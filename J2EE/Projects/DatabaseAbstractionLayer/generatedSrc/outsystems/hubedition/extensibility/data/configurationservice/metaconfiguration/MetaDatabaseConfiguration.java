/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration;

import java.lang.reflect.*;
import java.net.*;
import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import outsystems.hubedition.extensibility.data.configurationservice.AdvancedConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.ConfigurationParameter;
import outsystems.hubedition.extensibility.data.configurationservice.IIntegrationDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.ParameterRegion;
import outsystems.hubedition.extensibility.data.configurationservice.UserDefinedConfigurationParameter;


/**
 *	Represents the meta-information about a database configuration.
 */
public class MetaDatabaseConfiguration {
    public static final TypeInformation<MetaDatabaseConfiguration> TypeInfo = TypeInformation.get(MetaDatabaseConfiguration.class);
    private Object configuration;
    private List<IParameter> parameters;
    
    public MetaDatabaseConfiguration(Object configuration){
        this.configuration = configuration;
        parameters = findParameters();
    }
    
    private final List<IParameter> findParameters() {
        Map<String, IParameter> results = new HashMap<String, IParameter>();
        Class<?> type = configuration.getClass();
        for( Class<?> t = type; t != null; t = t.getSuperclass())
        {
            for (Method prop : t.getMethods()) {
                java.lang.annotation.Annotation param = getConfigurationParameter(prop);
                if (param != null && !results.containsKey(prop.getName()))
                {
                    CollectionUtils.addToMap(results,prop.getName(),getParameterToAdd(param, prop));
                }
            }
        }
        return LinqMethods.toList(results.values());
    }
    
    private static java.lang.annotation.Annotation getConfigurationParameter(Method prop)
    {
        
        boolean looksLikeBooleanGetter = !prop.getReturnType().equals(Void.TYPE)
                                            && prop.getName().startsWith("is")
                                            && prop.getReturnType().equals(Boolean.TYPE);
        
        boolean looksLikeGetter = !prop.getReturnType().equals(Void.TYPE)
        							&& prop.getName().startsWith("get");
        
        Annotation attr = prop.getAnnotation(UserDefinedConfigurationParameter.class);	
        
        if (attr == null) {
            attr = prop.getAnnotation(ConfigurationParameter.class);
        }
        		
        return (attr != null && (looksLikeGetter || looksLikeBooleanGetter)) ? attr : null;
        
    }
    
    
    
    
    private final Parameter getParameterToAdd(java.lang.annotation.Annotation param, Method prop) {
        String propName = prop.getReturnType().equals(Boolean.TYPE) ? prop.getName().substring("is".length()) : prop.getName().substring("get".length());
        Method getter = prop;
        Method setter = ClassUtils.getMethod(prop.getDeclaringClass(), "set" + propName);
        
        UserDefinedConfigurationParameter userDefinedConfigParam = ClassUtils.safeCast(param, UserDefinedConfigurationParameter.class);
        if (userDefinedConfigParam != null)
        {
            Method visibilityChecker = null;
            if (!StringUtils.isNullOrEmpty(userDefinedConfigParam.visibilityChecker()))
            {
                visibilityChecker = ClassUtils.getMethod(configuration.getClass(), userDefinedConfigParam.visibilityChecker() );
            }
            return new UserDefinedParameter(propName, getter, setter, configuration, userDefinedConfigParam.encrypt(), userDefinedConfigParam.persist(), visibilityChecker, userDefinedConfigParam);
        }
        
        ConfigurationParameter configParam = (ConfigurationParameter) param;
        return new Parameter(propName, getter, setter, configParam.encrypt(), configParam.persist(), configuration);
    }
    
    /**
	 *	Returns a parameter with the given name.
	 *	@param	name	The parameter's name.
	 *	@return	A parameter with the given name.
	 */
    public final IParameter getParameter(final String name) {
        IParameter coalescetemp;
        
        Func.Func1<IParameter, Boolean> matchesName = 
            new Func.Func1<IParameter, Boolean>() {
                protected Boolean executeImpl(IParameter p) throws Exception
                {
                    return p.getName().equals(name);
                }
            };
        
        return ((coalescetemp = LinqMethods.firstOrDefault(TypeInformation.get(IParameter.class), getParameters(), matchesName)) != null ? coalescetemp : LinqMethods.firstOrDefault(TypeInformation.get(IParameter.class), LinqMethods.cast(TypeInformation.get(IParameter.class), advancedModeParameters()), matchesName));
    }
    
    public final String getOrElse(String name, String orElse) {
        IParameter param = getParameter(name);
        if (param != null)
        {
            return param.get();
        }
        else
        {
            return orElse;
        }
    }
    
    private final Iterable<IUserDefinedParameter> advancedModeParameters() {
        return new Iterable<IUserDefinedParameter>() {
            public Iterator<IUserDefinedParameter> iterator() {
                return new Yielder<IUserDefinedParameter>() {
                    
                    IIntegrationDatabaseConfiguration integrationConf;
                    
                    protected boolean advance() throws Exception
                    {
                        switch (currentStatement) {
                            case BEGIN:
                                integrationConf = ClassUtils.safeCast(configuration, IIntegrationDatabaseConfiguration.class);
                                if (integrationConf == null)
                                    return yieldBreak();
                                return yieldReturn(new AdvancedConnectionStringParam(integrationConf), STATEMENT_1);
                            case STATEMENT_1:
                                return yieldReturn(new ConnStringTemplateParam(integrationConf), NO_NEXT_STATEMENT);
                        }
                        return yieldBreak();
                    }
                };
            }
        };
    }
    
    public final String get(String pname)
    {
        return getParameter(pname).get();
    }
    
    public final void put(String pname, String value)
    {
        getParameter(pname).set(value);
    }
    
    /**
	 *	Gets a list of visible parameters.
	 *	@return	The list of visible parameters.
	 */
    public final List<IUserDefinedParameter> getVisibleParameters()
    {
        if (configuration instanceof IIntegrationDatabaseConfiguration && ((IIntegrationDatabaseConfiguration) configuration).getAdvancedConfiguration().isSet())
        {
            return LinqMethods.toList(LinqMethods.union(LinqMethods.where(LinqMethods.ofType(TypeInformation.get(IUserDefinedParameter.class), parameters),
                
                    new Func.Func1<IUserDefinedParameter, Boolean>() {
                        protected Boolean executeImpl(IUserDefinedParameter p) throws Exception
                        {
                            return p.isVisible() && p.getRegion().equals(EnumSet.of(ParameterRegion.UserSpecific));
                        }
                    }),
                LinqMethods.where(advancedModeParameters(), 
                    new Func.Func1<IUserDefinedParameter, Boolean>() {
                        protected Boolean executeImpl(IUserDefinedParameter p) throws Exception
                        {
                            return p.isVisible();
                        }
                    })));
        }
        return LinqMethods.toList(LinqMethods.where(LinqMethods.ofType(TypeInformation.get(IUserDefinedParameter.class), parameters), 
            new Func.Func1<IUserDefinedParameter, Boolean>() {
                protected Boolean executeImpl(IUserDefinedParameter p) throws Exception
                {
                    return p.isVisible();
                }
            }));
    }
    
    public final List<IParameter> getPersistableParameters()
    {
        return LinqMethods.toList(LinqMethods.where(parameters, 
            new Func.Func1<IParameter, Boolean>() {
                protected Boolean executeImpl(IParameter p) throws Exception
                {
                    return p.isPersist();
                }
            }));
    }
    
    /**
	 *	Gets a list of all parameters.
	 *	@return	The list of parameters.
	 */
    public final List<IParameter> getParameters()
    {
        return parameters;
    }
}
