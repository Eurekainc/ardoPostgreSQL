/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.configuration;

import java.io.*;
import java.lang.reflect.*;
import java.net.*;
import java.nio.*;
import java.nio.charset.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.extensibility.data.transactionservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.transactionservice.ITransactionService;
import outsystems.runtimecommon.FileSystemUtils;


public abstract class BaseConfigurationManager {
    public static final TypeInformation<BaseConfigurationManager> TypeInfo = TypeInformation.get(BaseConfigurationManager.class);
    
    public static String Script_Path = FileUtils.combine(getCurrentInstallationDir(), "db");
    
    private static String getCurrentInstallationDir()
    {
        String path = System.getenv("OUTSYSTEMS_HOME"); return path == null ? "" : path;
    }
    
    public abstract String getStatementSeparator();
    
    public final boolean testConnection(IRuntimeDatabaseConfiguration runtimeConfiguration, RefParmHolder<String> friendlyMessage) throws java.sql.SQLException {
        ITransactionService transactionService = runtimeConfiguration.getDatabaseProvider().getIntegrationDatabaseServices(runtimeConfiguration).getTransactionService();
        if (transactionService.testConnection(friendlyMessage))
        {
            friendlyMessage.setVal("Test completed successfully." );
            return true;
        }
        return false;
    }
    
    protected final String readScriptFile(FileStream stream) throws IOException {
        {
            FileStream fsSource = stream;
            try 
            {
                {
                    InputStreamReader reader = new InputStreamReader(fsSource.getInputStream(), Charset.forName("UTF-8"));
                    try 
                    {
                        return StreamUtils.readToEnd(reader);
                    }
                    finally {
                        if (reader!= null) {
                            reader.close();
                        }
                    }
                }
            }
            finally {
                if (fsSource!= null) {
                    fsSource.dispose();
                }
            }
        }
    }
}
