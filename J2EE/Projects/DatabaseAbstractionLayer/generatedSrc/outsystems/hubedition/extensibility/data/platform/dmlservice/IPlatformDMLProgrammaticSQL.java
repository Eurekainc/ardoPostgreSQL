/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;


/**
 *	Defines a contract for generating Programmatic SQL fragments to interact with a database.
 */
public interface IPlatformDMLProgrammaticSQL
{
    /**
	 *	Gets the associated DML service.
	 */
    public IPlatformDMLService getDMLService();
    
    /**
	 *	This method generates sql that represents the if else statement.
	 *	@param	condition	Condition to test.
	 *	@param	ifBody	SQL to execute if the condition is true.
	 *	@param	elseBody	SQL to execute if the condition is false. This can be null if there is no else body.
	 *	@return	SQL that represents the if else statement.
	 */
    public String ifElseStatement(String condition, String ifBody, String elseBody);
    
    /**
	 *	This method generates a valid variable name based on the given name.
	 *	@param	varName	Name of the variable.
	 *	@return	SQL that represents the name of the variable.
	 */
    public String getVariableValue(String varName);
    
    /**
	 *	This method generates SQL that sets a variable value.
	 *	@param	varName	Name of the variable.
	 *	@param	value	Value to assign to the variable.
	 *	@return	SQL that sets the variable value.
	 */
    public String setVariable(String varName, String value);
    
    /**
	 *	This method generates SQL fragments to insert in specific points of the query to set the variable value with the output of a query.
	 *	@param	varName	Name of the variable to assign the value.
	 *	@return	SQL fragments to insert in specific points of the query to set the variable value.
	 */
    public Map<QueryPlaceholder, String> setVariableFromQuery(String varName);
    
    /**
	 *	This method generates SQL that sets a variable value with the last identifier inserted in the current scope.
	 *	@param	varName	Name of the variable to assign the value.
	 *	@return	SQL that sets the variable value.
	 */
    public String setVariableFromLastInsertedId(String varName);
    
    /**
	 *	This method generates SQL that starts a programmatic SQL Block and optionally declares variables to use inside the block.
	 *	@param	variables	Names and types of the variables.
	 *	@return	SQL that starts a programmatic SQL Block and declares variables.
	 */
    public String beginProgrammaticSQLBlock(VariableDetails ... variables);
    
    /**
	 *	This method generates SQL that ends a programmatic SQL Block.
	 *	@return	SQL that ends a programmatic SQL Block.
	 */
    public String endProgrammaticSQLBlock() throws Exception;
    
    /**
	 *	This method generates the SQL to execute a DDL statement inside a block.
	 *	@param	statement	The DDL statement to execute.
	 *	@return	SQL statement to execute the given DDL statement.
	 */
    public String executeDDLInsideBlock(String statement);
}
