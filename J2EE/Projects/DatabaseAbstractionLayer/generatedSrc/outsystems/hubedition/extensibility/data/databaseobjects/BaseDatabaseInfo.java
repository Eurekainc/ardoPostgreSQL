/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.databaseobjects;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.IDatabaseServices;

public abstract class BaseDatabaseInfo implements IDatabaseInfo {
    private IDatabaseServices _databaseServices;
    public static final TypeInformation<BaseDatabaseInfo> TypeInfo = TypeInformation.get(BaseDatabaseInfo.class);
    
    protected BaseDatabaseInfo(IDatabaseServices databaseServices){
        setDatabaseServices( databaseServices );
    }
    
    public final IDatabaseServices getDatabaseServices()
    {
        return _databaseServices;
    }
    
    private final void setDatabaseServices(IDatabaseServices value)
    {
        _databaseServices = value;
    }
    
    /**
	 *	Name that identifies the database
	 */
    public abstract String getIdentifier();
    
    /**
	 *	Returns true if both objects represent exactly the same database, or false otherwise. The base implementation checks if both objects are the same or if they have the same Identifier.
	 *	@param	other	Other database object to compare with
	 *	@return	true if the current object is equal to the other parameter; otherwise, false.
	 */
    public boolean equalsObj(IDatabaseInfo other) {
        return ((this) == (other)) || StringUtils.equals(getIdentifier(), other.getIdentifier());
    }
    
    public boolean equals(Object obj) {
        IDatabaseInfo db = ClassUtils.safeCast(obj, IDatabaseInfo.class);
        return db != null && equalsObj(db);
    }
    
    public int hashCode() {
        return getIdentifier().hashCode();
    }
}
