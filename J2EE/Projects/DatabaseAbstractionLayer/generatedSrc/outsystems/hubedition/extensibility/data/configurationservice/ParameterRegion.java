/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import java.util.Map;




/**
 *	Areas in the user interface used to display configuration parameters that relate to the same concept (e.g. server location, user credentials)
 */
public enum ParameterRegion implements IEnum {
    DatabaseLocation(0x01),
    SessionDatabaseLocation(0x02),
    UserSpecific(0x04),
    Advanced(
0x08),
    AdvancedSession(0x10),
    UserAdminSpecific(
/* Non Credentials Fields */
0x20),
    UserRuntimeSpecific(0x40),
    UserLogSpecific(0x80),
    UserSessionSpecific(0x100),
    Advanced1CP(
0x2000);
    
    public static final TypeInformation<EnumSet<ParameterRegion>> TypeInfo = TypeInformation.get(EnumSet.class, TypeInformation.get(ParameterRegion.class));
    public static final EnumSet<ParameterRegion> None = EnumSet.noneOf(ParameterRegion.class);
    private int value;
    ParameterRegion(int value) {
        this.value = value;
    }
    
    public int getIntValue() {
        return value;
    }
    
    public static String[] names() {
        return EnumUtils.getNames(values());
    }
    
    public static EnumSet<ParameterRegion> getDefaultValue() {
        return None;
    }
    
    private static Map<Integer, ParameterRegion> intToEnum;
    private static Map<Integer, ParameterRegion> getIntToEnum() {
        if (intToEnum == null) {
            intToEnum = EnumUtils.getIntToEnumValueMap(values());
        }
        return intToEnum;
    }
    
    private static Map<String, ParameterRegion> lowerCaseNameToEnum;
    private static Map<String, ParameterRegion> getLowerCaseNameToEnum() {
        if (lowerCaseNameToEnum == null) {
            lowerCaseNameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/true);
        }
        return lowerCaseNameToEnum;
    }
    
    private static Map<String, ParameterRegion> nameToEnum;
    private static Map<String, ParameterRegion> getNameToEnum() {
        if (nameToEnum == null) {
            nameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/false);
        }
        return nameToEnum;
    }
    
    public static ParameterRegion valueOf(int value) {
        ParameterRegion result = getIntToEnum().get(value);
        if (result == null) {
            throw new IllegalArgumentException("No enum const class ParameterRegion with int value " + value);
        }
        return result;
    }
    
    
    public static ParameterRegion valueOf(String value, boolean ignoreCase) {
        if (!ignoreCase) {
            return valueOf(value);
        }
        ParameterRegion result = getLowerCaseNameToEnum().get(value.toLowerCase());
        if (result == null) {
            throw new IllegalArgumentException("No enum const class ParameterRegion." + value);
        }
        return result;
    }
    
    
    public static boolean isDefined(String value) {
        return getNameToEnum().containsKey(value);
    }
    
    public static boolean isDefined(int value) {
        return getIntToEnum().containsKey(value);
    }
}
