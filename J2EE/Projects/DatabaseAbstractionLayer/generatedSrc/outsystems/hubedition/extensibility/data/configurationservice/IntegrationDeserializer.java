/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice;

import java.io.*;
import java.text.*;
import java.util.*;
import javax.xml.parsers.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import linqbridge.linq.*;
import linqbridge.xml.linq.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import linqbridge.xml.linq.XDocument;
import linqbridge.xml.linq.XElement;
import linqbridge.xml.linq.XName;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.MetaDatabaseConfiguration;



public final class IntegrationDeserializer {
    public static final TypeInformation<IntegrationDeserializer> TypeInfo = TypeInformation.get(IntegrationDeserializer.class);
    
    
    public IntegrationDeserializer(){
    }
    
    public static Map<String, String> readPropertiesFromSerialization(String serializedForm) throws Exception {
        try {
            HashMap<String, String> props = new HashMap<String, String>();
            XDocument configurationXML = XDocument.load(new StringReader(serializedForm));
            
            if (configurationXML.getRoot() == null)
                return props;
            java.util.Iterator<XElement> elemIter = (configurationXML.getRoot().elements()).iterator();
            try {
                XElement elem;
                while (elemIter.hasNext()) {
                    elem = elemIter.next();
                    CollectionUtils.addToMap(props,elem.getName().getLocalName(),elem.getValue());
                }
            } finally {
                CollectionUtils.dispose(elemIter);
            }
            return props;
        }catch (Exception exceptionToHandle) {
            exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
            
            if (exceptionToHandle instanceof XMLStreamException) {
                throw new Exception("Error deserializing database connection: Invalid Database Configuration Format");
            } else {
                return WrappedException.wrapExceptionIfNeeded(exceptionToHandle);
            }
        }
    }
    
    public final void deserialize(String serializedForm, IIntegrationDatabaseConfiguration config) throws ConfigurationSerializationException {
        try {
            MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
            Map<String, String> properties = readPropertiesFromSerialization(serializedForm);
            java.util.Iterator<Map.Entry<String, String>> nameValueIter = (properties).entrySet().iterator();
            try {
                Map.Entry<String, String> nameValue;
                while (nameValueIter.hasNext()) {
                    nameValue = nameValueIter.next();
                    IParameter param = wrapper.getParameter(nameValue.getKey());
                    
                    if (param != null)
                    {
                        param.set(nameValue.getValue());
                    }
                }
            } finally {
                CollectionUtils.dispose(nameValueIter);
            }
        }catch (Exception exceptionToHandle) {
            exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
            
            {
                Exception e = (Exception)exceptionToHandle;
                throw new ConfigurationSerializationException(e);
            }
        }
    }
    
}
