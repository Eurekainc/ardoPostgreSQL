/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.executionservice;

import java.sql.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.transactionservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOCommand;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOParameter;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOTransaction;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ConnectionUtils;
import outsystems.hubedition.extensibility.data.DBDataType;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.transactionservice.ITransactionManager;



/**
 *	Database service that handles the execution of statements made while connected to a database.
 */
public interface IExecutionService
{
    
    /**
	 *	Gets the IDatabaseServices instance associated with this service.
	 */
    public IDatabaseServices getDatabaseServices();
    
    /**
	 *	Gets the prefix used to qualify command parameters (e.g. @)
	 */
    public String getParameterPrefix();
    
    /**
	 *	Creates and associates a new parameter to a command.
	 *	@param	cmd	The command to associate the parameter.
	 *	@param	name	Parameter name.
	 *	@param	dbType	Parameter type.
	 *	@param	paramValue	Parameter value.
	 *	@return	The parameter associated to the comand.
	 */
    public ADOParameter createParameter(ADOCommand cmd, String name, int dbType, Object paramValue);
    
    /**
	 *	Checks if an exception was raised due to a connection error.
	 *	@param	e	Exception raised.
	 *	@return	True if the exception was due to a connection problem, False otherwise.
	 */
    public boolean isConnectionException(SQLException e);
    
    /**
	 *	Method called by the consumers of this service when an execution exception occurs. It is used to handle edge cases where cleaning up is required. NOTE: This method should handle the exception and not rethrow it.
	 *	@param	e	Exception thrown during execution.
	 *	@param	cmd	Command that was running when the exception was raised.
	 *	@param	reader	Reader created from executing the command, if applicable.
	 *	@param	conn	Connection that creates the transaction where the exception occured, if applicable.
	 *	@param	trans	Transaction where the exception was produced, if applicable.
	 *	@param	manager	Transaction manager associated with this command, if applicable.
	 */
    public void onExecuteException(SQLException e, ADOCommand cmd, OSResultSet reader, Connection conn, ADOTransaction trans, ITransactionManager manager) throws SQLException;
    
    /**
	 *	Executes a command and returns the number of affected rows.
	 *	@param	cmd	The command to execute.
	 *	@return	The number of rows affected.
	 */
    public int executeNonQuery(ADOCommand cmd) throws SQLException;
    
    /**
	 *	Executes a command and returns the resulting OSResultSet.
	 *	@param	cmd	The command to execute.
	 *	@return	A reader with the results of executing the query command.
	 */
    public OSResultSet executeReader(ADOCommand cmd) throws SQLException;
    
    /**
	 *	Executes a command and returns the value of the first column of the first row in the resultset returned by the query.
	 *	@param	cmd	The command to execute.
	 *	@return	An object with the resulting first row and first column of the query defined in the query command.
	 */
    public Object executeScalar(ADOCommand cmd) throws SQLException;
    
    /**
	 *	Creates a transactionless command associated with the connection.
	 *	@param	connection	The connection where the command is going to be executed.
	 *	@param	sql	The SQL statement to be executed.
	 *	@return	An SQL command command.
	 */
    public ADOCommand createCommand(Connection connection, String sql) throws SQLException;
    
    /**
	 *	Creates an SQL command to be executed in a transaction.
	 *	@param	trans	The transaction to execute the command.
	 *	@param	sql	The SQL statement to be executed.
	 *	@return	An SQL command.
	 */
    public ADOCommand createCommand(ADOTransaction trans, String sql) throws SQLException;
    
    /**
	 *	Transforms a database value to the equivalent runtime value.
	 *	@param	value	Value to transform.
	 *	@return	The transformed object.
	 */
    public Object transformDatabaseToRuntimeValue(Object value);
    
    /**
	 *	Transforms a runtime value to the equivalent database value.
	 *	@param	dbType	Database type.
	 *	@param	value	Value to be transform.
	 *	@return	The transformed object.
	 */
    public Object transformRuntimeToDatabaseValue(int dbType, Object value);
    
    /**
	 *	Sets the parameter direction (Input, Output, InputOutput or ReturnValue).
	 *	@param	param	Parameter to set the direction.
	 *	@param	direction	Direction to be set.
	 */
    public void setParameterDirection(ADOParameter param, int direction);
    
    /**
	 *	Set a parameter with a value.
	 *	@param	param	Parameter to set the value with.
	 *	@param	dbType	Database type of the parameter.
	 *	@param	paramValue	Value to set.
	 */
    public void setParameterValue(ADOParameter param, int dbType, Object paramValue);
    
    /**
	 *	Converts a type to its equivalent type in the database.
	 *	@param	type	The type to be converted.
	 *	@return	A database type.
	 */
    public int convertToDbType(Class<?> type) throws UnsupportedOperationException;
    
    public SqlTypes convertToDbType(DBDataType type, String originalType);
    
    
    /**
	 *	Checks if an exception was raised due to a timeout.
	 *	@param	exception	Exception raised.
	 *	@return	True if the exception was caused by a timeout, False otherwise.
	 */
    public boolean isTimeoutException(Exception exception);
    
    /**
	 *	Bulk inserts data into the database
	 *	@param	datatable	A datatable with all information to transfer
	 */
    public void bulkInsert(DataTable datatable) throws SQLException;
}
