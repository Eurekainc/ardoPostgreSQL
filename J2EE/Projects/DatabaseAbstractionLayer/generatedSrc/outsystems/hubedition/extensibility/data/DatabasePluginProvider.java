/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data;

import java.io.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import outsystems.runtimecommon.extensibility.plugins.*;
import java.math.BigDecimal;
import outsystems.runtimecommon.DatabaseProviderKey;
import outsystems.runtimecommon.extensibility.plugins.AbstractPluginProvider;
import outsystems.runtimecommon.OSTrace;


public final class DatabasePluginProvider<TDatabaseProvider extends IDatabaseProvider> extends AbstractPluginProvider<DatabaseProviderKey, TDatabaseProvider> implements IDatabasePluginSet<TDatabaseProvider>, IGenericObject {
    
    private File pluginsDirectory;
    
    
    protected DatabaseProviderKey getKey(TDatabaseProvider p) {
        return p.getKey();
    }
    
    public DatabasePluginProvider(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, File pluginsDirectory){
        super(DatabaseProviderKey.TypeInfo, classTypeArg_TDatabaseProvider);
        staticInitDatabasePluginProvider(classTypeArg_TDatabaseProvider);
        instanceInitDatabasePluginProvider(classTypeArg_TDatabaseProvider);
        this.pluginsDirectory = pluginsDirectory;
        
        loadPlugins(
            new Action.Action2<Exception, String>() {
                protected void executeImpl(Exception e, String s) throws Exception
                {
                    OSTrace.infoException(e, s);
                }
            });
    }
    
    public File getPluginsDirectory()
    {
        return pluginsDirectory;
    }
    
    public TypeInformation<?> getTypeInformation() {
        return TypeInformation.<DatabasePluginProvider<TDatabaseProvider>>get(DatabasePluginProvider.class, classTypeArg_TDatabaseProvider);
    }
    
    private final void instanceInitDatabasePluginProvider(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider) {
        this.classTypeArg_TDatabaseProvider = classTypeArg_TDatabaseProvider;
    }
    protected static <TDatabaseProvider extends IDatabaseProvider> void staticInitDatabasePluginProvider(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider) {
        staticInitAbstractPluginProvider(DatabaseProviderKey.TypeInfo, classTypeArg_TDatabaseProvider);
    }
    protected TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider;
}
