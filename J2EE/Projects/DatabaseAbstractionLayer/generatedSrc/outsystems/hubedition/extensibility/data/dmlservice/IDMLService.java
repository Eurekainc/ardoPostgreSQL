/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;
import outsystems.hubedition.extensibility.data.DBDataType;
import outsystems.hubedition.extensibility.data.IDatabaseServices;



/**
 *	Defines a contract for generating SQL fragments to interact with a database.
 */
public interface IDMLService
{
    
    /**
	 *	Gets the IDatabaseServices instance associated with this service.
	 */
    public IDatabaseServices getDatabaseServices();
    
    /**
	 *	Gets an object that generates the SQL fragments required to perform specific queries (e.g. count query).
	 */
    public IDMLQueries getQueries();
    
    /**
	 *	Gets an object that generates the SQL fragments required to perform entity actions.
	 *	@param	tableSourceInfo	Information about the entity's underlying table source
	 */
    public IDMLEntityActions getEntityActions(ITableSourceInfo tableSourceInfo);
    
    /**
	 *	Gets an object that generates and manipulates SQL identifiers.
	 */
    public IDMLIdentifiers getIdentifiers();
    
    /**
	 *	Gets an object that generates the SQL operators required to execute simple queries.
	 */
    public IDMLOperators getOperators();
    
    /**
	 *	Gets an object that generates the SQL functions required to execute simple queries
	 */
    public IDMLFunctions getFunctions();
    
    /**
	 *	Gets an object that generates the SQL aggregate functions required to execute DataSet queries
	 */
    public IDMLAggregateFunctions getAggregateFunctions();
    
    /**
	 *	Gets an object that generates the SQL default values for each database type.
	 */
    public IDMLDefaultValues getDefaultValues();
    
    /**
	 *	Gets an object that defines a set of fragments (e.g. keywords, operators) of the database-specific dialect  that can be used to provide syntax highlighting in SQL statements
	 */
    public IDMLSyntaxHighlightDefinitions getSyntaxHighlightDefinitions();
    
    /**
	 *	Returns an SQL expression that transforms a value of a specified type, so that it can be used in a query condition.
	 *	@param	value	DML expression that evaluates to a specific type.
	 *	@param	type	Database type of the literal.
	 *	@return	DML expression that transforms the value.
	 */
    public String transformDatabaseValue(String value, DBDataType type);
    
    /**
	 *	Escapes special characters in a text value to be used in SQL statements (e.g replace ' by '').
	 *	@param	text	text value to be escaped
	 *	@return	The escaped text
	 */
    public String escapeTextValue(String text);
}
