/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.databaseobjects.IDataTypeInfo;



final public class VariableDetails implements Cloneable, IStructure
{
    public static final TypeInformation<VariableDetails> TypeInfo = TypeInformation.get(VariableDetails.class);
    public VariableDetails(String name, IDataTypeInfo type){
        Name = name;
        Type = type;
    }
    public String Name;
    public IDataTypeInfo Type;
    
    public VariableDetails clone()
    {
        try
        {
            VariableDetails clone = (VariableDetails) super.clone();
            return clone;
        }
        // this exception shouldn't occur, since we are implementing Cloneable
        // (clone() only throws it if the current class does not implement Cloneable)
        catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Unexpected CloneNotSupportedException while calling clone()");
        }
    }
    
    public VariableDetails()
    {
    }
    
    public static VariableDetails[] create(int count)
    {
        VariableDetails[] array = new VariableDetails[count];
        for (int i = 0; i < count; i++)
            array[i] = new VariableDetails();
        return array;
    }
}
