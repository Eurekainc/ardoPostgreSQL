/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.introspectionservice;

import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.extensibility.data.introspectionservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.extensibility.data.platform.databaseobjects.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;
import outsystems.hubedition.extensibility.data.introspectionservice.IIntrospectionService;
import outsystems.hubedition.extensibility.data.platform.IPlatformDatabaseServices;



/**
 *	Inspects a database server to retrieve information about its data model.
 */
public interface IPlatformIntrospectionService extends IIntrospectionService
{
    
    public IPlatformDatabaseServices getDatabaseServices();
    
    
    /**
	 *	Returns the list of columns of the table source (e.g. table, view)
	 *	@param	tableSource	Table source from which we want to fetch the list of columns
	 *	@return	The columns of the table
	 *	@throws	SQLException	if an error occurs while accessing the database
	 */
    public Iterable<IPlatformTableSourceColumnInfo> getTableSourceColumns$IPlatformIntrospectionService(ITableSourceInfo tableSource) throws IntrospectionServiceException, java.sql.SQLException;
    
    /**
	 *	Returns detailed information about database table sources (e.g. foreign keys, indexes)
	 *	@param	tables	Table sources from which we want to fetch the details
	 *	@return	Table sources information along with the details
	 *	@throws	SQLException	if an error occurs while accessing the database
	 */
    public Map<ITableSourceInfo, IPlatformTableSourceInfo> getTableSourcesDetails(ITableSourceInfo ... tables) throws IntrospectionServiceException, InvalidDatabaseObjectIdentifierException, java.sql.SQLException;
    
    /**
	 *	Checks if the table sources exist in the database.
	 *	@param	tableSourcesNames	Table sources names which we want to check
	 *	@return	Table sources names along with a boolean value indicating if the table source exists or not in the database
	 *	@throws	SQLException	if an error occurs while accessing the database
	 */
    public Map<String, Boolean> checkTableSourcesExist(String ... tableSourcesNames) throws java.sql.SQLException;
}
