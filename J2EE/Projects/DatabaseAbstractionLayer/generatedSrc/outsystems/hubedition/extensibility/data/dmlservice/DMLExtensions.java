/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import java.util.Locale;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.DMLPlaceholderExtensions;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.SelectPlaceholder;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.StatementPlaceholder;
import outsystems.hubedition.util.LocaleUtils;
import outsystems.runtimecommon.CollectionsExtensions;


public class DMLExtensions {
    public static final TypeInformation<DMLExtensions> TypeInfo = TypeInformation.get(DMLExtensions.class);
    public static String getMaxRecordsSQL(IDMLQueries queries, int maxRecords, String selectSQL, String fromSQL, String whereSQL) {
        return getMaxRecordsSQL(queries, maxRecords, selectSQL, fromSQL, whereSQL, null);
    }
    
    public static String getMaxRecordsSQL(IDMLQueries queries, int maxRecords, String selectSQL, String fromSQL, String whereSQL, String orderBySQL) {
        Map<SelectPlaceholder, String> placeholders = queries.sQLPlaceholderValuesForMaxRecords(Integer.toString(maxRecords));
        return DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.BeforeStatement) + " SELECT " + DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.AfterSelectKeyword) + " " + selectSQL + " " + DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.BeforeFromKeyword) + " FROM " + DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.AfterFromKeyword) + " " + fromSQL + " " + DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.BeforeWhereKeyword) + " WHERE " + DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.AfterWhereKeyword) + " " + whereSQL + " " + (CollectionsExtensions.isNullOrEmpty(orderBySQL) ? "" : DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.BeforeOrderByKeyword) + " ORDER BY " + DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.AfterOrderByKeyword) + " " + orderBySQL) + " " + DMLPlaceholderExtensions.getPlaceholderValue(SelectPlaceholder.TypeInfo, placeholders, SelectPlaceholder.AfterStatement);
    }
    
    public static String getCountSQL(IDMLQueries queries, String sqlStatement) {
        Map<StatementPlaceholder, String> placeholders = queries.sQLPlaceholderValuesForCountQuery();
        return DMLPlaceholderExtensions.getPlaceholderValue(StatementPlaceholder.TypeInfo, placeholders, StatementPlaceholder.BeforeStatement) + " " + sqlStatement + " " + DMLPlaceholderExtensions.getPlaceholderValue(StatementPlaceholder.TypeInfo, placeholders, StatementPlaceholder.AfterStatement);
    }
}
