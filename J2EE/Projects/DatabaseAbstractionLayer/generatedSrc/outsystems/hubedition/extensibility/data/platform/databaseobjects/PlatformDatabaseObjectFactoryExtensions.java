/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.databaseobjects;

import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.extensibility.data.dmlservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import outsystems.hubedition.extensibility.data.databaseobjects.IDatabaseObjectFactory;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceForeignKeyInfo;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLIdentifiers;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.runtimecommon.CollectionsExtensions;



public class PlatformDatabaseObjectFactoryExtensions {
    public static final TypeInformation<PlatformDatabaseObjectFactoryExtensions> TypeInfo = TypeInformation.get(PlatformDatabaseObjectFactoryExtensions.class);
    
    // This is used for testing purposes only
    private static boolean truncateIdentifiers = true;
    public static boolean isTruncateIdentifiers()
    {
        return truncateIdentifiers;
    }
    
    public static void setTruncateIdentifiers(boolean value)
    {
        truncateIdentifiers = value;
    }
    
    /**
	 *	Returns a name that can be used as a valid object name (e.g. constraint), using getValidIdentifier
	 *	@param	objectFactory	The introspection object factory
	 *	@param	databaseServices	The database services
	 *	@param	baseName	An identifier name.
	 *	@return	A string representing a valid sql identifier.
	 */
    public static String getNewUniqueIdentifer(IDatabaseObjectFactory objectFactory, IDatabaseServices databaseServices, String baseName) {
        return databaseServices.getDMLService().getIdentifiers().getValidIdentifier(baseName, truncateIdentifiers);
    }
    
    /**
	 *	Returns a name that can be used as an event trigger identifier name.
	 *	@param	objectFactory	The introspection object factory
	 *	@param	databaseServices	The database services
	 *	@param	tableName	Name of the table for which we want to create a trigger
	 *	@return	A name that can be used as a sql identifier name
	 */
    public static String getNewEventTriggerName(IPlatformDatabaseObjectFactory objectFactory, IDatabaseServices databaseServices, String tableName) {
        String baseName = PlatformDatabaseObjectConstants.EventTriggerPrefix + "_" + tableName;
        return PlatformDatabaseObjectFactoryExtensions.getNewUniqueIdentifer(objectFactory, databaseServices, baseName);
    }
    
    /**
	 *	Returns a name that can be used as an index identifier name.
	 *	@param	objectFactory	The introspection object factory
	 *	@param	databaseServices	The database services
	 *	@param	tableName	Name of the table for which we want to create a trigger
	 *	@param	columns	Columns that will compose the index
	 *	@return	A name that can be used as a sql identifier name
	 */
    public static String getNewIndexName(IPlatformDatabaseObjectFactory objectFactory, IDatabaseServices databaseServices, String tableName, Iterable<IPlatformTableSourceColumnInfo> columns) {
        String baseName = PlatformDatabaseObjectConstants.IndexPrefix + 
            tableName + 
            "_" + 
            CollectionsExtensions.strCat(LinqMethods.select(columns, 
                new Func.Func1<IPlatformTableSourceColumnInfo, String>() {
                    protected String executeImpl(IPlatformTableSourceColumnInfo c) throws Exception
                    {
                        return c.getName().length() + c.getName();
                    }
                }), "_");
        return PlatformDatabaseObjectFactoryExtensions.getNewUniqueIdentifer(objectFactory, databaseServices, baseName);
    }
    
    /**
	 *	Returns a name that can be used as a foreign key identifier name.
	 *	@param	objectFactory	The introspection object factory
	 *	@param	databaseServices	The database services
	 *	@param	tableName	Name of the table for which we want to create a foreign key
	 *	@param	referencedTableName	Name of the referenced table
	 *	@param	columnName	Name of the column
	 *	@return	A name that can be used as a sql identifier name
	 */
    public static String getNewForeignKeyName(IPlatformDatabaseObjectFactory objectFactory, IDatabaseServices databaseServices, String tableName, String referencedTableName, String columnName) {
        String baseName = PlatformDatabaseObjectConstants.ForeignConstPrefix + 
            tableName + 
            "_" + 
            referencedTableName + 
            "_" + 
            columnName;
        return PlatformDatabaseObjectFactoryExtensions.getNewUniqueIdentifer(objectFactory, databaseServices, baseName);
    }
    
    /**
	 *	Returns a name that can be used as a primary key identifier name.
	 *	@param	objectFactory	The introspection object factory
	 *	@param	databaseServices	The database services
	 *	@param	tableName	Name of the table for which we want to create a primary key
	 *	@return	A name that can be used as a sql identifier name
	 */
    public static String getNewPrimaryKeyName(IPlatformDatabaseObjectFactory objectFactory, IDatabaseServices databaseServices, String tableName) {
        
        String baseName = (isSystemTable(tableName) ? PlatformDatabaseObjectConstants.PrimarySysConstPrefix : PlatformDatabaseObjectConstants.PrimaryConstPrefix) + 
            tableName;
        return PlatformDatabaseObjectFactoryExtensions.getNewUniqueIdentifer(objectFactory, databaseServices, baseName);
    }
    
    /**
	 *	Checks whether a table is a systems table or not.
	 *	@param	tableName	Table name to check
	 *	@return	True if the table is a system table. Otherwise, false.
	 */
    private static boolean isSystemTable(String tableName) {
        return tableName.toLowerCase(java.util.Locale.ROOT).startsWith("ossys_");
    }
    
    /**
	 *	Returns an object that contains information about a table source foreign key.
	 *	@param	objectFactory	The introspection object factory
	 *	@param	tableSource	Table source that owns the foreign key.
	 *	@param	columnName	Name of the column.
	 *	@param	referencedTableSource	Table source that owns the referenced column.
	 *	@param	referencedColumnName	Name of the referenced column.
	 *	@param	isCascadeDelete	True if the delete rule of the foreign key is CASCADE DELETE.
	 *	@return	Database-specific object that implements the ITableSourceForeignKeyInfo interface
	 */
    public static ITableSourceForeignKeyInfo createForeignKeyInfo(IPlatformDatabaseObjectFactory objectFactory, ITableSourceInfo tableSource, String columnName, ITableSourceInfo referencedTableSource, String referencedColumnName, boolean isCascadeDelete) {
        
        return objectFactory.createForeignKeyInfo(tableSource, null, columnName, referencedTableSource, referencedColumnName, isCascadeDelete);
    }
    
    /**
	 *	Returns an object that contains information about a table source index.
	 *	@param	objectFactory	The introspection object factory
	 *	@param	tableSource	Table source that owns the index.
	 *	@param	columns	Columns used in the index.
	 *	@param	foreignKeys	Foreign keys that use the indexed columns
	 *	@param	isUnique	True if the index is a unique index, false otherwise.
	 *	@param	isPrimaryKey	True if the index is a primary key index, false otherwise.
	 *	@return	Database-specific object that implements the ITableSourceIndexInfo interface
	 */
    public static IPlatformTableSourceIndexInfo createIndexInfo(IPlatformDatabaseObjectFactory objectFactory, ITableSourceInfo tableSource, Iterable<IPlatformTableSourceColumnInfo> columns, Iterable<ITableSourceForeignKeyInfo> foreignKeys, boolean isUnique, boolean isPrimaryKey) {
        
        return objectFactory.createIndexInfo(tableSource, null, columns, foreignKeys, isUnique, isPrimaryKey);
    }
}
