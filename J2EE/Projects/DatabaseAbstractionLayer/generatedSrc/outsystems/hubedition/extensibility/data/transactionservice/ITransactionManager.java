/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.transactionservice;

import java.sql.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOTransaction;



/**
 *	Represents a service to manage transactions.
 */
public interface ITransactionManager extends IDisposable
{
    
    /**
	 *	This property represents the ITransactionService associated with this transaction manager.
	 */
    public ITransactionService getTransactionService();
    
    /**
	 *	This property represents the ITransactionService associated with this transaction manager.
	 */
    public void setTransactionService(ITransactionService value);
    
    /**
	 *	Gets the number of busy transactions.
	 */
    public int getBusyTransactionCount();
    
    /**
	 *	Returns a transaction to be used during a web request. This transaction is only commited or rolled back by invoking freeupResources.
	 *	@return	A transaction to be used in the applications.
	 */
    public ADOTransaction getRequestTransaction() throws SQLException, UnsupportedOperationException;
    
    /**
	 *	Returns a transaction that ismanaged by extension developers. Extension developers explicitly commit or rollback this transaction.
	 *	@return	A private transaction managed by the user.
	 */
    public ADOTransaction getCommitableTransaction() throws SQLException, UnsupportedOperationException;
    
    /**
	 *	Returns a transaction with read only access suitable to iterate results.
	 *	@return	A Transaction only for read purposes.
	 */
    public ADOTransaction getReadOnlyTransaction() throws SQLException, UnsupportedOperationException;
    
    /**
	 *	Releases a transaction to the pool.
	 *	@param	trans	Transaction to be released.
	 */
    public void releaseTransaction(ADOTransaction trans) throws InvalidTransactionReleaseException, SQLException;
    
    /**
	 *	Commits a transaction.
	 *	@param	trans	The transaction to be committed.
	 */
    public void commitTransaction(ADOTransaction trans) throws InvalidCommitOrRollbackTransactionException;
    
    /**
	 *	Rolls back a transaction.
	 *	@param	trans	The transaction to be rolled back
	 */
    public void rollbackTransaction(ADOTransaction trans) throws InvalidCommitOrRollbackTransactionException;
    
    /**
	 *	Commits all transactions.
	 */
    public void commitAllTransactions() throws SQLException, UnsupportedOperationException;
    
    /**
	 *	Rolls back all transactions.
	 */
    public void rollbackAllTransactions() throws SQLException, UnsupportedOperationException;
    
    /**
	 *	Releases all database resources being used. All transactions are committed or rolled back, and connections are returned to the pool.
	 *	@param	commit	If True, all transaction are commited. Otherwise, are rolled back.
	 */
    public void freeupResources(boolean commit);
    
    /**
	 *	Associates a reader to a transaction.
	 *	@param	trans	The transaction that will be associated with the reader.
	 *	@param	reader	The reader to associate.
	 *	@return	Returns True if the reader was successfully associated, False otherwise.
	 */
    public boolean associateReader(ADOTransaction trans, OSResultSet reader);
    
    /**
	 *	Checks if this manager is managing a given transaction.
	 *	@param	trans	A transaction.
	 *	@return	Returns True if the transaction belongs to this transaction manager, False otherwise.
	 */
    public boolean isManaging(ADOTransaction trans);
}
