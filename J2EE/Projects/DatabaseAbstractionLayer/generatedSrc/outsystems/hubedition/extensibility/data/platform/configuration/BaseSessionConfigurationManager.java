/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.configuration;

import java.io.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;


public abstract class BaseSessionConfigurationManager extends BaseConfigurationManager implements ISessionConfigurationManager {
    public static final TypeInformation<BaseSessionConfigurationManager> TypeInfo = TypeInformation.get(BaseSessionConfigurationManager.class);
    protected ISessionDatabaseConfiguration sessionConfiguration;
    
    public BaseSessionConfigurationManager(ISessionDatabaseConfiguration sessionConfiguration){
        this.sessionConfiguration = sessionConfiguration;
    }
    
    public abstract Iterable<String> getSessionStatements() throws Exception;
    
    public abstract FileStream getStreamForScriptFile() throws FileNotFoundException, java.net.URISyntaxException;
    
    public abstract void pre_CreateOrUpgradeSession();
    
    public boolean testSessionConnection(RefParmHolder<String> friendlyMessage) throws java.sql.SQLException {
        boolean sucess = testConnection(sessionConfiguration.runtimeDatabaseConfiguration(),
            friendlyMessage);
        if (!sucess)
        {
            RefParmHolder<String> newFriendlyMessage = new RefParmHolder<String>();
            String upperCaseUser = ((BaseSessionDatabaseConfiguration) sessionConfiguration).getSessionUser();
            ((BaseSessionDatabaseConfiguration) sessionConfiguration).setSessionUser( upperCaseUser.toUpperCase(java.util.Locale.ROOT) );
            sucess = testConnection(sessionConfiguration.runtimeDatabaseConfiguration(),
                newFriendlyMessage);
            if (!sucess)
            {
                ((BaseSessionDatabaseConfiguration) sessionConfiguration).setSessionUser( upperCaseUser );
            }
            else
            {
                friendlyMessage.setVal(newFriendlyMessage.getVal() );
            }
        }
        return sucess;
    }
}
