/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;

/**
 *	Defines a set of fragments (e.g. keywords, operators) of Generic (ANSI) SQL that can be used to provide syntax highlighting in SQL statements. This is based on the book "SQL in a nutshell - A Desktop Quick Reference", from Kevin Kline and Daniel Kline (2001)
 */
public class GenericDMLSyntaxHighlightDefinitions implements IDMLSyntaxHighlightDefinitions {
    private IDMLService _dMLService;
    public static final TypeInformation<GenericDMLSyntaxHighlightDefinitions> TypeInfo = TypeInformation.get(GenericDMLSyntaxHighlightDefinitions.class);
    public static final String[] KEYWORDS = { "ABSOLUTE", "ACTION", "ADD", "ADMIN", "AFTER", "AGGREGATE", "ALIAS", "ALLOCATE", "ALTER", "ARE", "ARRAY", "AS", "ASC", "ASSERTION", "AT", "AUTHORIZATION", "BEFORE", "BEGIN", "BINARY", "BOTH", "BREADTH", "BY", "CALL", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CHECK", "CLASS", "CLOB", "CLOSE", "COLLATE", "COLLATION", "COLUMN", "COMMIT", "COMPLETION", "CONDITION", "CONNECT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINS", "CONTINUE", "CORRESPONDING", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_PATH", "CURRENT_ROLE", "CURSOR", "CYCLE", "DATA", "DATALINK", "DAY", "DEALLOCATE", "DEC", "DECLARE", "DEFAULT", "DEFERRABLE", "DELETE", "DEPTH", "DEREF", "DESC", "DESCRIPTOR", "DIAGNOSTICS", "DICTIONARY", "DISCONNECT", "DO", "DOMAIN", "DOUBLE", "DROP", "END-EXEC", "EQUALS", "ESCAPE", "EXCEPT", "EXCEPTION", "EXECUTE", "EXIT", "EXPAND", "EXPANDING", "FALSE", "FIRST", "FOR", "FOREIGN", "FREE", "FROM", "FUNCTION", "GENERAL", "GET", "GLOBAL", "GOTO", "GROUP", "GROUPING", "HANDLER", "HASH", "HOUR", "IDENTITY", "IF", "IGNORE", "IMMEDIATE", "INDICATOR", "INITIALIZE", "INITIALLY", "INNER", "INOUT", "INPUT", "INSERT", "INT", "INTERSECT", "INTERVAL", "INTO", "IS", "ISOLATION", "ITERATE", "JOIN", "KEY", "LANGUAGE", "LARGE", "LAST", "LATERAL", "LEADING", "LEAVE", "LEFT", "LESS", "LEVEL", "LIMIT", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATOR", "LOOP", "MATCH", "MEETS", "MINUTE", "MODIFIES", "MODIFY", "MODULE", "MONTH", "NAMES", "NATIONAL", "NATURAL", "NEW", "NEXT", "NO", "NONE", "NORMALIZE", "NOT", "NULL", "OBJECT", "OF", "NUMERIC", "OBJECT", "OF", "OFF", "OLD", "ON", "ONLY", "OPEN", "OPERATION", "OPTION", "OR", "ORDER", "ORDINALITY", "OUT", "OUTER", "OUTPUT", "PAD", "PARAMETER", "PARAMETERS", "PARTIAL", "PATH", "PERIOD", "POSTFIX", "PRECEDES", "PRECISION", "PREFIX", "PREORDER", "PREPARE", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURE", "PUBLIC", "READ", "READS", "REAL", "RECURSIVE", "REDO", "REF", "REFERENCES", "REFERENCING", "RELATIVE", "REPEAT", "RESIGNAL", "RESTRICT", "RESULT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUTINE", "ROW", "ROWS", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", "SECOND", "SECTION", "SELECT", "SEQUENCE", "SESSION", "SET", "SETS", "SIGNAL", "SIZE", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "START", "STATE", "STATIC", "STRUCTURE", "SUCCEEDS", "TABLE", "TEMPORARY", "TERMINATE", "THAN", "THEN", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSACTION", "TRANSLATION", "TREAT", "TRIGGER", "TRUE", "UNDER", "UNDO", "UNION", "UNIQUE", "UNKNOWN", "UNTIL", "UPDATE", "USAGE", "USER", "USING", "VALUE", "VALUES", "VALUES", "VARIABLE", "VARYING", "VIEW", "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WRITE", "YEAR", "ZONE" };
    
    public static final String[] FUNCTIONS = { "AVG", "COUNT", "MIN", "MAX", "SUM", // Aggregate            
"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "SESSION_USER", "SYSTEM_USER", // Scalar - Built-in                    
"BIT_LENGTH", "CHAR_LENGTH", "EXTRACT", "OCTET_LENGTH", "POSITION", // Scalar - Numeric                    
"CONCATENATE", "CONVERT", "LOWER", "SUBSTRING", "TRANSLATE", "TRIM", "UPPER" };
    // Scalar - String
    
    public static final String[] OPERATORS = { "+", "-", "*", "/", "=", "<>", "!=", "<", ">", "<=", ">=", "ALL", "AND", "ANY", "BETWEEN", "EXISTS", "IN", "LIKE", "NOT", "OR", "SOME" };
    
    public static final String[] DATA_TYPES = { "BLOB", "BIT", "BOOLEAN", "CHAR", "CHARACTER", "CLOB", "NCHAR", "NCLOB", "NVARCHAR", "VARCHAR", "DECIMAL", "FLOAT", "INTEGER", "NUMERIC", "REAL", "SMALLINT", "DATE", "INTERVAL", "TIME", "TIMESTAMP" };
    
    
    
    /**
	 *	Defines a set of fragments (e.g. keywords, operators) of Generic (ANSI) SQL that can be used to provide syntax highlighting in SQL statements. This is based on the book "SQL in a nutshell - A Desktop Quick Reference", from Kevin Kline and Daniel Kline (2001)
	 */
    public GenericDMLSyntaxHighlightDefinitions(IDMLService dmlService){
        setDMLService( dmlService );
    }
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    public final IDMLService getDMLService()
    {
        return _dMLService;
    }
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    private final void setDMLService(IDMLService value)
    {
        _dMLService = value;
    }
    
    /**
	 *	Returns a set of reserved keywords (e.g. SELECT, FROM, JOIN) This implementation returns the Ansi SQL 99 keywords
	 */
    public Iterable<String> getKeywords()
    {
        return Arrays.asList(KEYWORDS);
    }
    
    /**
	 *	Returns a set of function names (e.g. MAX, ROUND, UPPER)) This implementation returns the Ansi SQL 99 functions
	 */
    public Iterable<String> getFunctions()
    {
        return Arrays.asList(FUNCTIONS);
    }
    
    /**
	 *	Returns a set of operators (e.g. +, LIKE, EXISTS) This implementation returns the Ansi SQL 99 operators
	 */
    public Iterable<String> getOperators()
    {
        return Arrays.asList(OPERATORS);
    }
    
    /**
	 *	Returns a set of data types (e.g. INTEGER, CHAR, NVARCHAR) This implementation returns the Ansi SQL 99 data types
	 */
    public Iterable<String> getDataTypes()
    {
        return Arrays.asList(DATA_TYPES);
    }
}
