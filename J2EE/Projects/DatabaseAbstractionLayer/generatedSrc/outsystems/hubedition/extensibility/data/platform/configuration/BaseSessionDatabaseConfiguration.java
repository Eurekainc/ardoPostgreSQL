/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.configuration;

import java.net.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.http.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.AuthenticationType;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.platform.IPlatformDatabaseProvider;


public abstract class BaseSessionDatabaseConfiguration implements ISessionDatabaseConfiguration, ISuggestionableConfiguration {
    private ISuggestor _userNameSuggestor;
    private ISuggestor _tableSpaceSuggestor;
    private String _sessionPassword;
    private String _sessionAdvancedSettings;
    private boolean _advancedConfigurationMode;
    public static final TypeInformation<BaseSessionDatabaseConfiguration> TypeInfo = TypeInformation.get(BaseSessionDatabaseConfiguration.class);
    
    /**
	 *	Gets the database provider. It provides information about the database, and access to its services.
	 */
    public abstract IPlatformDatabaseProvider getPlatformDatabaseProvider();
    
    public final boolean isImplementsElevatedPrivilegesOperations()
    {
        return this instanceof IElevatedUserConfiguration;
    }
    
    public abstract AuthenticationType getAuthenticationMode();
    
    public abstract void setAuthenticationMode(AuthenticationType value);
    
    public final ISuggestor getUserNameSuggestor()
    {
        return _userNameSuggestor;
    }
    
    public final void setUserNameSuggestor(ISuggestor value)
    {
        _userNameSuggestor = value;
    }
    
    public final ISuggestor getTableSpaceSuggestor()
    {
        return _tableSpaceSuggestor;
    }
    
    public final void setTableSpaceSuggestor(ISuggestor value)
    {
        _tableSpaceSuggestor = value;
    }
    
    private String sessionUser;
    
    public abstract IRuntimeDatabaseConfiguration runtimeDatabaseConfiguration();
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserSessionSpecific, prompt="Session username")
    public String getSessionUser()
    {
        if (StringUtils.equals(sessionUser, null) && getUserNameSuggestor() != null)
        {
            return getUserNameSuggestor().getSuggestion("STATE", "OSSTATE");
        }
        return (sessionUser != null? sessionUser : "OSSTATE");
    }
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserSessionSpecific, prompt="Session username")
    public void setSessionUser(String value)
    {
        sessionUser = value;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserSessionSpecific, prompt="Session password", encrypt=true)
    public String getSessionPassword()
    {
        return _sessionPassword;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserSessionSpecific, prompt="Session password", encrypt=true)
    public void setSessionPassword(String value)
    {
        _sessionPassword = value;
    }
    
    @UserDefinedConfigurationParameter(label="Extra parameters", order=1, region=ParameterRegion.AdvancedSession, example="Max Pool Size= 100; Connection Timeout = 15;", prompt="Session TNS name")
    public String getSessionAdvancedSettings()
    {
        return _sessionAdvancedSettings;
    }
    
    @UserDefinedConfigurationParameter(label="Extra parameters", order=1, region=ParameterRegion.AdvancedSession, example="Max Pool Size= 100; Connection Timeout = 15;", prompt="Session TNS name")
    public void setSessionAdvancedSettings(String value)
    {
        _sessionAdvancedSettings = value;
    }
    
    public final PasswordAuthentication getSessionAuthenticationCredential()
    {
        return new PasswordAuthentication(getSessionUser(),getSessionPassword().toCharArray());
    }
    
    public abstract boolean equalsObj(ISessionDatabaseConfiguration other);
    
    @ConfigurationParameter
    public final boolean isAdvancedConfigurationMode()
    {
        return _advancedConfigurationMode;
    }
    
    @ConfigurationParameter
    public final void setAdvancedConfigurationMode(boolean value)
    {
        _advancedConfigurationMode = value;
    }
    
    public String getContextualHelpForAdvancedMode()
    {
        return "";
    }
    
    public String getContextualHelpForBasicMode()
    {
        return "";
    }
}
