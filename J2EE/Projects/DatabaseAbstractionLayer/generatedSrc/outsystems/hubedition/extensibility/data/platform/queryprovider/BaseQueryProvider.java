/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.queryprovider;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.hubedition.extensibility.data.IProviderProperties;
import outsystems.hubedition.extensibility.data.platform.DatabaseProviderExtensions;

public abstract class BaseQueryProvider<QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> implements IGenericObject {
    
    private static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> QueryProviderType getInstanceField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        return staticsHandler.instanceField;
    }
    
    private static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> void setInstanceField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier, QueryProviderType value) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        staticsHandler.instanceField = value;
    }
    
    private static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> QueryProviderType getOverrideInstanceField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        return staticsHandler.overrideInstanceField;
    }
    
    private static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> void setOverrideInstanceField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier, QueryProviderType value) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        staticsHandler.overrideInstanceField = value;
    }
    
    private static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> String getProviderNameField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        return staticsHandler.providerNameField;
    }
    
    private static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> void setProviderNameField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier, String value) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        staticsHandler.providerNameField = value;
    }
    
    
    private static final <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> Object getLockerField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        return staticsHandler.lockerField;
    }
    
    private static final <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> void setLockerField(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier, Object value) {
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticsHandler = staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        staticsHandler.lockerField = value;
    }
    
    
    /**
	 *	Returns an instance of a QueryProviderType that can be used to execute platform queries against a specific IDatabaseProvider
	 */
    public static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> QueryProviderType getInstance(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier)
    {
        staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        if (getOverrideInstanceField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier) != null)
        {
            return getOverrideInstanceField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        }
        if (getInstanceField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier) == null)
        {
            synchronized(getLockerField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier))
            {
                if (getInstanceField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier) == null)
                {
                    QueryProviderQualifier qualifier = classTypeArg_QueryProviderQualifier.newInstance();
                    setProviderNameField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier, qualifier.getDatabaseProvider().getProperties().getDisplayName() );
                    setInstanceField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier, DatabaseProviderExtensions.getProviderSpecificOrBaseType(classTypeArg_QueryProviderType, qualifier.getDatabaseProvider(), qualifier.getProviderSpecificTypes()) );
                }
            }
        }
        return getInstanceField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
    }
    
    /**
	 *	Used to override the singleton (Instance), for mocking purposes
	 *	@param	newInstance	instance of QueryProviderType, or null to use the original singleton
	 */
    protected static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> void overrideInstance(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier, QueryProviderType newInstance) {
        staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        setOverrideInstanceField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier, newInstance );
    }
    
    protected static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> String getNotImplementedMessage(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        staticInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        return "This query is not implemented for the database provider: " + getProviderNameField(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
    }
    
    public BaseQueryProvider(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        instanceInitBaseQueryProvider(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
    }
    
    public TypeInformation<?> getTypeInformation() {
        return TypeInformation.<BaseQueryProvider<QueryProviderType, QueryProviderQualifier>>get(BaseQueryProvider.class, classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
    }
    
    private final void instanceInitBaseQueryProvider(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        this.classTypeArg_QueryProviderType = classTypeArg_QueryProviderType;
        this.classTypeArg_QueryProviderQualifier = classTypeArg_QueryProviderQualifier;
    }
    protected static <QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> staticInitBaseQueryProvider(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
        @SuppressWarnings("unchecked")
        BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier> result = StaticsHandlerFactory.get(BaseQueryProviderStaticsHandler.class, BaseQueryProviderStaticsHandler.staticsHandlerMap, classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
        
        if (!result.isInitialized()) {
            synchronized (result) {
                if (result.isNew()) {
                    result.startInitialization();
                    try {
                        result.staticInit(classTypeArg_QueryProviderType, classTypeArg_QueryProviderQualifier);
                    } finally {
                        result.finishInitialization();
                    }
                }
            }
        }
        
        return result;
    }
    protected TypeInformation<QueryProviderType> classTypeArg_QueryProviderType;
    protected TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier;
    private static final class BaseQueryProviderStaticsHandler<QueryProviderType, QueryProviderQualifier extends IQueryProviderQualifier> extends StaticsHandler {
        @SuppressWarnings("rawtypes")
        public static final java.util.Map<TypeArguments, BaseQueryProviderStaticsHandler> staticsHandlerMap = new java.util.HashMap<TypeArguments, BaseQueryProviderStaticsHandler>();
        public QueryProviderType instanceField;
        public QueryProviderType overrideInstanceField;
        public String providerNameField;
        public Object lockerField;
        public void staticInit(final TypeInformation<QueryProviderType> classTypeArg_QueryProviderType, final TypeInformation<QueryProviderQualifier> classTypeArg_QueryProviderQualifier) {
            instanceField = ClassUtils.getDefaultValue(classTypeArg_QueryProviderType);
            overrideInstanceField = ClassUtils.getDefaultValue(classTypeArg_QueryProviderType);
            lockerField = new Object();
        }
    }
    
}
