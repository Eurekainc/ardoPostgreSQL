/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.StatementPlaceholder;


public abstract class BaseDMLQueries implements IDMLQueries {
    private IDMLService _dMLService;
    public static final TypeInformation<BaseDMLQueries> TypeInfo = TypeInformation.get(BaseDMLQueries.class);
    
    public BaseDMLQueries(IDMLService dmlService){
        setDMLService( dmlService );
    }
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    public final IDMLService getDMLService()
    {
        return _dMLService;
    }
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    private final void setDMLService(IDMLService value)
    {
        _dMLService = value;
    }
    
    /**
	 *	Returns the DML expressions to be inserted in a query statement, to make it count the number of records returned by the original query.
	 *	@return	An IDictionary{TKey,TValue} with the DML expressions.
	 */
    public abstract Map<SelectPlaceholder, String> sQLPlaceholderValuesForMaxRecords(String maxRecordsParam);
    
    /**
	 *	Returns the DML expressions to be inserted in the SELECT statement of a query to limit the number of records returned. This implementation adds placeholders to wrap the query in a select count statement: SELECT COUNT(1) FROM (Query).
	 */
    public Map<StatementPlaceholder, String> sQLPlaceholderValuesForCountQuery() {
        Map<StatementPlaceholder, String> placeholders = new HashMap<StatementPlaceholder, String>();
        CollectionUtils.addToMap(placeholders,StatementPlaceholder.BeforeStatement,"SELECT COUNT(1) FROM (");
        CollectionUtils.addToMap(placeholders,StatementPlaceholder.AfterStatement,")");
        return placeholders;
    }
    
    /**
	 *	Determines if the given join type is supported.
	 *	@param	joinType	The join type
	 *	@return	True if the join type is supported, false otherwise
	 */
    public boolean isSupported(QueryJoinType joinType) {
        return true;
    }
}
