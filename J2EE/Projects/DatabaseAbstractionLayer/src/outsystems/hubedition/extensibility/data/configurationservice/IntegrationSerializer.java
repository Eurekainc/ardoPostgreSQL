/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice;

import java.io.*;
import java.text.*;
import java.util.*;
import javax.xml.parsers.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import linqbridge.linq.*;
import linqbridge.xml.linq.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import linqbridge.xml.linq.XDocument;
import linqbridge.xml.linq.XElement;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IUserDefinedParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.MetaDatabaseConfiguration;


public final class IntegrationSerializer {
    public static final TypeInformation<IntegrationSerializer> TypeInfo = TypeInformation.get(IntegrationSerializer.class);
    
    public IntegrationSerializer(){
    }
    
    public final String serialize(IIntegrationDatabaseConfiguration config) {
        try {
            MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
            
            Iterable<IParameter> parametersToSerialize = LinqMethods.union(LinqMethods.where(LinqMethods.cast(TypeInformation.get(IParameter.class), wrapper.getVisibleParameters()), (IParameter p) -> {
                return !p.isReadOnly();
            }),
                LinqMethods.where(wrapper.getParameters(), (IParameter p) -> {
                    return !(p instanceof IUserDefinedParameter);
                }));
            
            XDocument configurationXML = new XDocument(new XElement(XName.op_Implicit("DBConfiguration")));
            
            java.util.Iterator<IParameter> paramToSerializeIter = (parametersToSerialize).iterator();
            try {
                IParameter paramToSerialize;
                while (paramToSerializeIter.hasNext()) {
                    paramToSerialize = paramToSerializeIter.next();
                    configurationXML.getRoot().add(new XElement(XName.op_Implicit(paramToSerialize.getName()), paramToSerialize.get()));
                }
            } finally {
                CollectionUtils.dispose(paramToSerializeIter);
            }
            
            return configurationXML.toString();
        }catch (Exception exceptionToHandle) {
            exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
            
            {
                Exception e = (Exception)exceptionToHandle;
                throw new ConfigurationSerializationException(e);
            }
        }
    }
    
    
}
