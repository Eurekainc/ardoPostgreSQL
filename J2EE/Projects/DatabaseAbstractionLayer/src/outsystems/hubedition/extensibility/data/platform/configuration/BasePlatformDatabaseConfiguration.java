/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.configuration;

import java.net.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.http.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.AuthenticationType;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.platform.IPlatformDatabaseProvider;


public abstract class BasePlatformDatabaseConfiguration implements IPlatformDatabaseConfiguration, ISuggestionableConfiguration {
    private ISuggestor _userNameSuggestor;
    private ISuggestor _tableSpaceSuggestor;
    private String _adminPassword;
    private String _runtimePassword;
    private String _logPassword;
    private String _runtimeAdvancedSettings;
    private String _servicesAdvancedSettings;
    private boolean _advancedConfigurationMode;
    public static final TypeInformation<BasePlatformDatabaseConfiguration> TypeInfo = TypeInformation.get(BasePlatformDatabaseConfiguration.class);
    
    /**
	 *	Gets the database provider. It provides information about the database, and access to its services.
	 */
    public abstract IPlatformDatabaseProvider getPlatformDatabaseProvider();
    
    public final boolean isImplementsElevatedPrivilegesOperations()
    {
        return this instanceof IElevatedUserConfiguration;
    }
    
    public boolean isRequiresElevatedPrivileges()
    {
        return this instanceof IElevatedUserConfiguration;
    }
    
    public abstract AuthenticationType getAuthenticationMode();
    
    public abstract IRuntimeDatabaseConfiguration runtimeDatabaseConfiguration(Source source, User userType);
    
    public abstract boolean equalsObj(IPlatformDatabaseConfiguration other);
    
    public final ISuggestor getUserNameSuggestor()
    {
        return _userNameSuggestor;
    }
    
    public final void setUserNameSuggestor(ISuggestor value)
    {
        _userNameSuggestor = value;
    }
    
    public final ISuggestor getTableSpaceSuggestor()
    {
        return _tableSpaceSuggestor;
    }
    
    public final void setTableSpaceSuggestor(ISuggestor value)
    {
        _tableSpaceSuggestor = value;
    }
    
    private String adminUser = null;
    private String runtimeUser = null;
    private String logUser = null;
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserAdminSpecific, prompt="Admin username")
    public String getAdminUser()
    {
        return (adminUser != null? adminUser : "OSADMIN");
    }
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserAdminSpecific, prompt="Admin username")
    public void setAdminUser(String value)
    {
        adminUser = value;
        setUserNameSuggestor( NameSuggestorFactory.newSuggestor(true, adminUser, "ADMIN") );
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserAdminSpecific, prompt="Admin password", encrypt=true)
    public String getAdminPassword()
    {
        return _adminPassword;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserAdminSpecific, prompt="Admin password", encrypt=true)
    public void setAdminPassword(String value)
    {
        _adminPassword = value;
    }
    
    public final PasswordAuthentication getAdminAuthenticationCredential()
    {
        return new PasswordAuthentication(getAdminUser(),getAdminPassword().toCharArray());
    }
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserRuntimeSpecific, prompt="Runtime username")
    public String getRuntimeUser()
    {
        if (StringUtils.equals(runtimeUser, null) && getUserNameSuggestor() != null)
        {
            return getUserNameSuggestor().getSuggestion("RUNTIME", "OSRUNTIME");
        }
        return (runtimeUser != null? runtimeUser : "OSRUNTIME");
    }
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserRuntimeSpecific, prompt="Runtime username")
    public void setRuntimeUser(String value)
    {
        runtimeUser = value;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserRuntimeSpecific, prompt="Runtime password", encrypt=true)
    public String getRuntimePassword()
    {
        return _runtimePassword;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserRuntimeSpecific, prompt="Runtime password", encrypt=true)
    public void setRuntimePassword(String value)
    {
        _runtimePassword = value;
    }
    
    public final PasswordAuthentication getRuntimeAuthenticationCredential()
    {
        return new PasswordAuthentication(getRuntimeUser(),getRuntimePassword().toCharArray());
    }
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserLogSpecific, prompt="Log username")
    public String getLogUser()
    {
        if (StringUtils.equals(logUser, null) && getUserNameSuggestor() != null)
        {
            return getUserNameSuggestor().getSuggestion("LOG", "OSLOG");
        }
        return (logUser != null? logUser : "OSLOG");
    }
    
    @UserDefinedConfigurationParameter(label="User", isMandatory=true, order=1, region=ParameterRegion.UserLogSpecific, prompt="Log username")
    public void setLogUser(String value)
    {
        logUser = value;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserLogSpecific, prompt="Log password", encrypt=true)
    public String getLogPassword()
    {
        return _logPassword;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, isMandatory=true, order=2, region=ParameterRegion.UserLogSpecific, prompt="Log password", encrypt=true)
    public void setLogPassword(String value)
    {
        _logPassword = value;
    }
    
    public final PasswordAuthentication getLogAuthenticationCredential()
    {
        return new PasswordAuthentication(getLogUser(),getLogPassword().toCharArray());
    }
    
    @UserDefinedConfigurationParameter(label="Runtime Applications", order=1, region=ParameterRegion.Advanced, prompt="Runtime TNS name")
    public String getRuntimeAdvancedSettings()
    {
        return _runtimeAdvancedSettings;
    }
    
    @UserDefinedConfigurationParameter(label="Runtime Applications", order=1, region=ParameterRegion.Advanced, prompt="Runtime TNS name")
    public void setRuntimeAdvancedSettings(String value)
    {
        _runtimeAdvancedSettings = value;
    }
    
    @UserDefinedConfigurationParameter(label="OutSystems Services", order=2, region=ParameterRegion.Advanced, example="Max Pool Size= 100; Connection Timeout = 15;", prompt="Services TNS name")
    public String getServicesAdvancedSettings()
    {
        return _servicesAdvancedSettings;
    }
    
    @UserDefinedConfigurationParameter(label="OutSystems Services", order=2, region=ParameterRegion.Advanced, example="Max Pool Size= 100; Connection Timeout = 15;", prompt="Services TNS name")
    public void setServicesAdvancedSettings(String value)
    {
        _servicesAdvancedSettings = value;
    }
    
    @ConfigurationParameter
    public final boolean isAdvancedConfigurationMode()
    {
        return _advancedConfigurationMode;
    }
    
    @ConfigurationParameter
    public final void setAdvancedConfigurationMode(boolean value)
    {
        _advancedConfigurationMode = value;
    }
    
    public String getContextualHelpForAdvancedMode()
    {
        return "";
    }
    
    public String getContextualHelpForBasicMode()
    {
        return "";
    }
}
