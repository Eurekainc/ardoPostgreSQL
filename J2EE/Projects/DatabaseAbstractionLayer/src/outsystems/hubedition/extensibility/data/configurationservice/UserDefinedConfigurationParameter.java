/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/***
 * Attribute used to identify a configuration parameter and to describe the way it is presented in the user interface allowing users to manipulate it.
 * This attribute should be used in a database configuration objects.
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@ConfigurationParameter
public @interface UserDefinedConfigurationParameter {
    /***
     * Identifies the UI region where the parameter will be placed.
     * @return The region where the parameter will be present.
     */
	ParameterRegion[] region();
	
	/***
	 * Defines the text of the label that is placed next to the parameter in the user interface.
	 * @return The label that will represent the parameter.
	 */
	String label();
	
	/***
	 * Defines the text of the message used to ask the user for a value to the parameter.
	 * @return A string with the prompt to be displayed about the parameter's value.
	 */
	String prompt() default "";
	
	/***
	 * Defines a detailed message that clearly explains the purpose of the parameter and/or applicable restrictions to its values.
	 * @return The information to be shown about the parameter.
	 */
	String example() default "";
	
	/***
	 * Establishes the order of the parameter inside its region.
	 * @return An integer that represents the order of the parameter inside the defined region.
	 */
	int order() default 0;
	
	/***
	 * Indicates whether the parameter should be treated as a password.
	 * @return True if this parameter is a password, or False otherwise.
	 */
	boolean isPassword() default false;
	
	/***
	 * Indicates whether this parameter should be treated as mandatory.
	 * @return True if this parameter is mandatory, or False otherwise.
	 */
	boolean isMandatory() default false;
	
	/***
	 * Specifies the boolean property responsible for dictating if the parameter should be displayed in the user interface or not.
	 * @return The boolean property name.
	 */
	String visibilityChecker() default "";
	
		/***
	 * Defines if this parameter should be encrypted.
	 * @return True if this parameter is to be encrypted, or False otherwise.
	 */
	boolean encrypt() default false;
	
	/***
	 * Defines if this parameter should be persisted.
	 * @return True if this parameter is to be persisted, or False otherwise.
	 */
	boolean persist() default true;
}
