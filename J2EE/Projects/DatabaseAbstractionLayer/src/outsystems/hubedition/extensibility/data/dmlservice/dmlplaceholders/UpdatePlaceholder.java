/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.dmlservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import java.util.Map;


/**
 *	Represents the possible placeholders for the update SQL statement produced for the Update entity action. {BeforeStatement} UPDATE Entity SET column = val {BeforeWhereKeyword} WHERE conditions {AfterStatement}
 */
public enum UpdatePlaceholder implements IEnum {
    BeforeStatement,
    BeforeWhereKeyword,
    AfterStatement;
    
    public static final TypeInformation<UpdatePlaceholder> TypeInfo = TypeInformation.get(UpdatePlaceholder.class);
    public int getIntValue() {
        return ordinal();
    }
    
    public static String[] names() {
        return EnumUtils.getNames(values());
    }
    
    public static UpdatePlaceholder getDefaultValue() {
        return BeforeStatement;
    }
    
    private static Map<Integer, UpdatePlaceholder> intToEnum;
    private static Map<Integer, UpdatePlaceholder> getIntToEnum() {
        if (intToEnum == null) {
            intToEnum = EnumUtils.getIntToEnumValueMap(values());
        }
        return intToEnum;
    }
    
    private static Map<String, UpdatePlaceholder> lowerCaseNameToEnum;
    private static Map<String, UpdatePlaceholder> getLowerCaseNameToEnum() {
        if (lowerCaseNameToEnum == null) {
            lowerCaseNameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/true);
        }
        return lowerCaseNameToEnum;
    }
    
    private static Map<String, UpdatePlaceholder> nameToEnum;
    private static Map<String, UpdatePlaceholder> getNameToEnum() {
        if (nameToEnum == null) {
            nameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/false);
        }
        return nameToEnum;
    }
    
    public static UpdatePlaceholder valueOf(int value) {
        UpdatePlaceholder result = getIntToEnum().get(value);
        if (result == null) {
            throw new IllegalArgumentException("No enum const class UpdatePlaceholder with int value " + value);
        }
        return result;
    }
    
    
    public static UpdatePlaceholder valueOf(String value, boolean ignoreCase) {
        if (!ignoreCase) {
            return valueOf(value);
        }
        UpdatePlaceholder result = getLowerCaseNameToEnum().get(value.toLowerCase());
        if (result == null) {
            throw new IllegalArgumentException("No enum const class UpdatePlaceholder." + value);
        }
        return result;
    }
    
    
    public static boolean isDefined(String value) {
        return getNameToEnum().containsKey(value);
    }
    
    public static boolean isDefined(int value) {
        return getIntToEnum().containsKey(value);
    }
}
