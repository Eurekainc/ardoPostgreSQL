/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;


/**
 *	Defines a contract for generating DML fragments required by applications to execute entity actions.
 */
public interface IDMLEntityActions
{
    
    /**
	 *	Gets the associated DML service.
	 *	@return	The DML service associated.
	 */
    public IDMLService getDMLService();
    
    /**
	 *	Gets information about this entity&#39;s underlying table source, needed by the platform for DML generation purposes. This information should be passed to the object&#39;s constructor in getEntityActions.
	 *	@return	Information about this entity&#39;s underlying table source.
	 */
    public ITableSourceInfo getTableSourceInfo();
    
    /**
	 *	Returns the table name of this entity to be used in the entity action specified.
	 *	@param	action	Entity action to be considered for table name overriding.
	 *	@return	The table name of this entity if it needs to be overridden, otherwise returns Null.
	 */
    public String getInlineTableName(EntityActionKind action);
    
    /**
	 *	Returns True if this entity requires the parameter values to be dumped inline for a given entity action kind.
	 *	@param	action	Entity action whose requirement for inline parameter values is to be tested.
	 *	@return	A boolean indicating whether this entity requires inline parameter values or not.
	 */
    public boolean requiresInlineParameterValues(EntityActionKind action);
    
    /**
	 *	Returns True if this entity requires the table names to be dumped inline for a given entity action kind.
	 *	@param	action	Entity action whose requirement for inline table names is to be tested.
	 *	@return	A boolean indicating whether this entity requires inline table names or not.
	 */
    public boolean requiresInlineTableNames(EntityActionKind action);
    
    /**
	 *	Returns additional DML expressions to be inserted in the SELECT statement generated by the platform for the Get entity action.
	 *	@return	An IDictionary{TKey,TValue} with the DML expression.
	 */
    public Map<SelectPlaceholder, String> sQLPlaceholderValuesForGet();
    
    /**
	 *	Returns additional DML expression to be inserted in the SELECT statement generated by the platform for the GetForUpdate entity action.
	 *	@return	An IDictionary{TKey,TValue} with the DML expression.
	 */
    public Map<SelectPlaceholder, String> sQLPlaceholderValuesForGetForUpdate();
    
    /**
	 *	Returns additional DML expressions to be inserted in the SELECT statement generated by the platform for the Create entity action.
	 *	@return	An IDictionary{TKey,TValue} with the DML expression.
	 */
    public Map<InsertPlaceholder, String> sQLPlaceholderValuesForCreate();
    
    /**
	 *	Returns additional DML expression to be inserted in the SELECT statement generated by the platform for the Create entity action, when it&#39;s necessary to retrieve the Id of the record created.
	 *	@param	idColumnName	Column that stores the identifiers.
	 *	@param	outputParameterName	If the retrieveIdMethod is OutputParameter, this is the name of the parameter that will hold the value stored  in idColumnName, including the parameter prefix, otherwise it should be ignored.
	 *	@param	retrieveIdMethod	Method used by the platform to retrieve the identifier.
	 *	@return	An IDictionary{TKey,TValue} with the DML expressions.
	 */
    public Map<InsertPlaceholder, String> sQLPlaceholderValuesForCreateAndRetrieveId(String idColumnName, String outputParameterName, RefParmHolder<RetrieveIdMethod> retrieveIdMethod);
    
    /**
	 *	Returns additional DML expressions to be inserted in the UPDATE statement generated by the platform for the Update entity action.
	 *	@return	An IDictionary{TKey,TValue} with the DML expressions.
	 */
    public Map<UpdatePlaceholder, String> sQLPlaceholderValuesForUpdate();
    
    /**
	 *	Returns additional DML expressions to be inserted in the DELETE statement generated by the platform for the Delete entity action.
	 *	@return	An IDictionary{TKey,TValue} with the DML expressions.
	 */
    public Map<DeletePlaceholder, String> sQLPlaceholderValuesForDelete();
}
