/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.configuration;

import java.net.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.http.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.AuthenticationType;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;



/**
 *	This interface identifies a database configurations, i.e., an implementation of IPlatformDatabaseConfiguration or ISessionDatabaseConfiguration, that handle operations that require elevated privileges user. The credentials for this user will be set whenever the execution of operations that require elevated user is necessary.
 */
public interface IElevatedUserConfiguration
{
    
    /**
	 *	This property returns the credentials for the elevated user. Changes to this property must be reflected by the RuntimeDatabaseConfigurations returned by the method elevatedRuntimeDatabaseConfiguration.
	 *	@return	The elevated user credentials.
	 */
    public PasswordAuthentication getElevatedAuthenticationCredential();
    
    /**
	 *	This property returns the credentials for the elevated user. Changes to this property must be reflected by the RuntimeDatabaseConfigurations returned by the method elevatedRuntimeDatabaseConfiguration.
	 *	@param	value	The elevated user credentials.
	 */
    public void setElevatedAuthenticationCredential(PasswordAuthentication value);
    
    /**
	 *	Gets the object that compacts all the needed configuration parameters to be used in runtime.
	 *	@return	The configuration that allows accessing the database as an elevated user.
	 */
    public IRuntimeDatabaseConfiguration elevatedRuntimeDatabaseConfiguration();
    
    /**
	 *	The authentication mode used by the elevated user.
	 *	@return	The elevated user authentication mode.
	 */
    public AuthenticationType getElevatedUserAuthenticationMode();
    
    /**
	 *	The authentication mode used by the elevated user.
	 *	@param	value	The elevated user authentication mode.
	 */
    public void setElevatedUserAuthenticationMode(AuthenticationType value);
}
