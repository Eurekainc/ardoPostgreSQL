/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.executionservice;

import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;

import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOParameter;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ConnectionUtils;
import outsystems.hubedition.extensibility.data.IDatabaseServices;

public class BulkWriter {
	public static interface ADOParameterFactory {
		ADOParameter createADOParameter(); 
	}
	
	ADOParameterFactory factory;
	
	IDatabaseServices _databaseServices;
	
	private IDatabaseServices getDatabaseServices()
    {
        return _databaseServices;
    }
    
    private void setDatabaseServices(IDatabaseServices value)
    {
        _databaseServices = value;
    }

    public BulkWriter(IDatabaseServices services, ADOParameterFactory factory) {
    	setDatabaseServices(services);
    	this.factory = factory;
    }
    
	public void individualInsert(DataTable data) throws SQLException {
		Connection connection = getDatabaseServices().getTransactionService()
				.createConnection();
		try {
			for (DataRow row : data.getRows()) {
				if (row.getState() == DataRowState.Added) {
					writeRow(connection, data, row);
				}
			}
		} finally {
			if (connection != null) {
				ConnectionUtils.closeConnection(connection);
			}
		}
	}

	private void writeRow(Connection connection, DataTable data, DataRow row) throws SQLException {
		PreparedStatement statement = getStatement(connection, data.getTableName(), data.getColumns());
		try {
			int i = 1;
			for (DataColumn column : data.getColumns()) {
				addParameter(statement, i++, getDatabaseServices().getExecutionService().convertToDbType(column.getType()) , row.get(column));
			}
		    
		    try {
		    	statement.execute();
		    } catch (SQLException e) {
		    	row.setRowError(e.getMessage());
		    }
		} finally {
			if (statement != null) {
				statement.close();
			}
		}
	}

    public void bulkInsert(DataTable data) throws SQLException {
        Connection connection = getDatabaseServices().getTransactionService().createConnection();
        try 
        {
        	PreparedStatement statement = getStatement(connection, data.getTableName(), data.getColumns());
    		
    		for (DataRow row : data.getRows()) {
    			int i = 1;
    			for (DataColumn column : data.getColumns()) {
    				addParameter(statement, i++, getDatabaseServices().getExecutionService().convertToDbType(column.getType()), row.get(column));
    			}
    			statement.addBatch();
    		}

    		int[] result;
    		
    		try {
    			result = statement.executeBatch();
    		} catch (BatchUpdateException e) {
    			result = e.getUpdateCounts();
    		} finally {
    			statement.close();
    		}
    		
    		boolean hasFailuresInBatch = false;
    		for (int i = 0; i < data.getRows().getCount(); i++) {
    			if (i < result.length && result[i] != Statement.EXECUTE_FAILED) {
    				data.getRow(i).acceptChanges();
    			} else {
    				hasFailuresInBatch = true;
    				data.getRow(i).setRowError("Failed in batch");
    			}
    		}
    		
    		if (hasFailuresInBatch) {
    			throw new BatchUpdateException(result);
    		}
        } finally {
            if (connection!= null) {
                ConnectionUtils.closeConnection(connection);
            }
        }
		
	}

	private PreparedStatement getStatement(Connection connection, String tableName, DataColumnCollection columns) throws SQLException {
		StringBuilder sb = new StringBuilder();
		
		sb.append("insert into " + tableName + "(");
		{
			boolean first = true;
			for (DataColumn column : columns) {
				if (!first) {
					sb.append(", ");
				}
				sb.append(getDatabaseServices().getDMLService().getIdentifiers().escapeIdentifier(column.getName()));
				first = false;
			}
		}
		sb.append(")");
		
		sb.append(" values (");
		{
			boolean first = true;
			Iterator<DataColumn> iterator = columns.iterator();
			while (iterator.hasNext()) {
				iterator.next();
				if (!first) {
					sb.append(", ");
				}
				sb.append("?");
				first = false;
			}
		}
		sb.append(")");
		
		return connection.prepareStatement(sb.toString());
	}
	
	private void addParameter(PreparedStatement statement, int paramIndex, int dbType, Object paramValue) throws SQLException {
		ADOParameter param = factory.createADOParameter();
		
		param.setDbType(dbType);
		param.setValue(getDatabaseServices().getExecutionService().transformRuntimeToDatabaseValue(dbType,paramValue));
        param.set(statement, paramIndex);
	}
}
