/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.databaseobjects;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.databaseobjects.IDatabaseObjectFactory;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceForeignKeyInfo;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;
import outsystems.hubedition.extensibility.data.DBDataType;



/**
 *	Creates introspection objects from qualified names, inspecting the database only if needed.
 */
public interface IPlatformDatabaseObjectFactory extends IDatabaseObjectFactory
{
    
    /**
	 *	Returns an object that contains information about a local table source (data source in tabular format), like a database table or view, inferring the database information from the current configuration
	 *	@param	tableName	Unqualified identifier of the table source
	 *	@return	Database-specific object that implements the ITableSourceInfo interface
	 */
    public ITableSourceInfo createLocalTableSourceInfo(String tableName);
    
    /**
	 *	Returns an object that contains information about a data type, inferring the correct SqlDataType from the values of the other fields.
	 *	@param	dataType	Database type that can be mapped to the data types available in the platform
	 *	@param	length	Size of the data type, when applicable (e.g. text of decimal numbers)
	 *	@param	decimals	Number of decimal places of the data type, when applicable (e.g. decimal numbers)
	 *	@return	Database-specific object that implements the IDataTypeInfo interface
	 */
    public IPlatformDataTypeInfo createDataTypeInfo(DBDataType dataType, int length, int decimals);
    
    /**
	 *	Returns an object that contains information about a table source column.
	 *	@param	tableSource	Table source that owns the column.
	 *	@param	name	Name that identifies the column.
	 *	@param	dataType	Data type of the values stored in the column.
	 *	@param	isMandatory	True if the column must have a value assigned to it (NOT NULL), or false if it is nullable.
	 *	@param	isPrimaryKey	True if the column is part of the table source&#39;s primary key, or false otherwise.
	 *	@param	isAutoGenerated	true if the column value is generated automatically when a row is inserted (e.g. sequential numbers).
	 *	@return	Database-specific object that implements the ITableSourceColumnInfo interface
	 */
    public IPlatformTableSourceColumnInfo createColumnInfo(ITableSourceInfo tableSource, String name, IPlatformDataTypeInfo dataType, boolean isMandatory, boolean isPrimaryKey, boolean isAutoGenerated);
    
    /**
	 *	Returns an object that contains information about a table source foreign key.
	 *	@param	tableSource	Table source that owns the foreign key.
	 *	@param	foreignKeyName	Name of the foreign key. If null, a generated name will be assigned.
	 *	@param	columnName	Name of the column.
	 *	@param	referencedTableSource	Table source that owns the referenced column.
	 *	@param	referencedColumnName	Name of the referenced column.
	 *	@param	isCascadeDelete	True if the delete rule of the foreign key is CASCADE DELETE.
	 *	@return	Database-specific object that implements the ITableSourceForeignKeyInfo interface
	 */
    public ITableSourceForeignKeyInfo createForeignKeyInfo(ITableSourceInfo tableSource, String foreignKeyName, String columnName, ITableSourceInfo referencedTableSource, String referencedColumnName, boolean isCascadeDelete);
    
    /**
	 *	Returns an object that contains information about a table source index.
	 *	@param	tableSource	Table source that owns the index.
	 *	@param	indexName	Name of the index. If null, a generated name will be assigned.
	 *	@param	columns	Columns used in the index.
	 *	@param	foreignKeys	Foreign keys that use the indexed columns
	 *	@param	isUnique	True if the index is a unique index, false otherwise.
	 *	@param	isPrimaryKey	True if the index is a primary key index, false otherwise.
	 *	@return	Database-specific object that implements the ITableSourceIndexInfo interface
	 */
    public IPlatformTableSourceIndexInfo createIndexInfo(ITableSourceInfo tableSource, String indexName, Iterable<IPlatformTableSourceColumnInfo> columns, Iterable<ITableSourceForeignKeyInfo> foreignKeys, boolean isUnique, boolean isPrimaryKey);
    
    /**
	 *	Returns an object that contains information about a table source trigger.
	 *	@param	tableSource	Table source that owns the trigger.
	 *	@return	Database-specific object that implements the ITableSourceTriggerInfo interface
	 */
    public IPlatformTableSourceEventTriggerInfo createTriggerInfo(ITableSourceInfo tableSource);
}
