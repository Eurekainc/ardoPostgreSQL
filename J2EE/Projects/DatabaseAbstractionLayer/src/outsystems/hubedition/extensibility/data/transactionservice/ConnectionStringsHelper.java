/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.transactionservice;

import java.sql.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;


public class ConnectionStringsHelper {
    public static final TypeInformation<ConnectionStringsHelper> TypeInfo = TypeInformation.get(ConnectionStringsHelper.class);
    private static final Pattern _passwordRegex = Pattern.compile("(password=\\s*)([^ ;]+)(\\s*;)", /*unsupported: RegexOptions.CultureInvariant*/ 0 | Pattern.CASE_INSENSITIVE);
    private static final Pattern _IntegratedSecuriyRegex = Pattern.compile("(integrated security=\\s*[^ ;]+\\s*;)", /*unsupported: RegexOptions.CultureInvariant*/ 0 | Pattern.CASE_INSENSITIVE);
    private static final Pattern _userIdReplaceRegex = Pattern.compile("(user id=\\s*)([^ ;]+)(\\s*;)", /*unsupported: RegexOptions.CultureInvariant*/ 0 | Pattern.CASE_INSENSITIVE);
    private static final Pattern _userIdRegex = Pattern.compile("user id=\\s*([^ ;]+)\\s*;", /*unsupported: RegexOptions.CultureInvariant*/ 0 | Pattern.CASE_INSENSITIVE);
    
    public static String extractUsername(String connectionString)
    {
        assert connectionString.startsWith("jdbc:oracle:thin:"): "Not a conn string " + connectionString;        
        int slashIndex = connectionString.indexOf('/');
                
        if (slashIndex == -1) {
            return "";
        }
                
        int startIndex = "jdbc:oracle:thin:".length();        
        assert startIndex < slashIndex: "Slash after start";        
        return StringUtils.substring(connectionString, startIndex, slashIndex - startIndex);
    }
    
    
    
    
    
    public static String replaceUsername(String connectionString, final String username)
    {
        int slashIndex = connectionString.indexOf('/');
                
        if (slashIndex == -1) {
            return connectionString;
        }
                
        int startIndex = "jdbc:oracle:thin:".length();
        assert  startIndex < slashIndex: "Slash after start";        
        return StringUtils.substring(connectionString, 0, startIndex) + username + connectionString.substring(slashIndex);
    }
    
    
    
    
    
    public static String extractPassword(String connectionString)
    {
        int slashIndex = connectionString.indexOf('/');
        int atIndex = connectionString.indexOf('@');
                
        if (slashIndex == -1 || atIndex == -1) {
            return "";
        }
                
        if (slashIndex > atIndex) {
            return "";
        }
                
        return StringUtils.substring(connectionString, slashIndex + 1, atIndex - (slashIndex + 1));
    }
    
    
    public static String replacePassword(String connectionString, final String password)
    {
        int slashIndex = connectionString.indexOf('/');
        int atIndex = connectionString.indexOf('@');
                
        if (slashIndex == -1 || atIndex == -1) {
            return connectionString;
        }
                
        if (slashIndex > atIndex) {
            return connectionString;
        }
                
        return StringUtils.substring(connectionString, 0, slashIndex + 1) + password + connectionString.substring(atIndex);
    }
    
    
    
    
    
}
