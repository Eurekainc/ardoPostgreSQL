/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.session;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;


/**
 *	Specify methods related to the storage of sessions information associated to a module (application).
 */
public interface ISessionModuleStoreOperations
{
    
    /**
	 *	Gets the data of a module&#39;s item identified by the given item&#39;s id and associated to the referred session.
	 *	@param	sessionId	The session identifier.
	 *	@param	itemId	The item identifier.
	 *	@return	The data stored for the given item in the requested session.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public byte[] getModuleItem(String sessionId, String itemId);
    
    /**
	 *	Inserts the data from a module&#39;s item identified by the given item&#39;s id and associate it to a session.
	 *	@param	sessionId	The session identifier.
	 *	@param	itemId	The item identifier.
	 *	@param	data	The data to be stored.
	 *	@param	userId	The user identifier.
	 *	@param	cookieId	The cookie identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void insertModuleItem(String sessionId, String itemId, byte[] data, int userId, String cookieId);
    
    /**
	 *	Updates the information stored about a module&#39;s item identified by the given item&#39;s id and associated to the referred session.
	 *	@param	sessionId	The session identifier.
	 *	@param	itemId	The item identifier.
	 *	@param	data	The data to be stored.
	 *	@param	userId	The user identifier.
	 *	@param	cookieId	The cookie identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void updateModuleItem(String sessionId, String itemId, byte[] data, int userId, String cookieId);
    
    /**
	 *	Store the association of a module&#39;s item identified by the given item&#39;s id to a user. The item&#39;s data isn&#39;t stored in this method.
	 *	@param	sessionId	The session identifier.
	 *	@param	itemId	The item identifier.
	 *	@param	userId	The user identifier.
	 *	@param	cookieId	The cookie identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void insertModuleItemUser(String sessionId, String itemId, int userId, String cookieId);
    
    /**
	 *	Updates the association related to a module&#39;s item identified by the given item&#39;s id. The item&#39;s data isn&#39;t changed in this method.
	 *	@param	sessionId	The session identifier.
	 *	@param	itemId	The item identifier.
	 *	@param	userId	The user identifier.
	 *	@param	cookieId	The cookie identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void updateModuleItemUser(String sessionId, String itemId, int userId, String cookieId);
    
    /**
	 *	Deletes all the items associated to the session identified by the referred session&#39;s id.
	 *	@param	sessionId	The session identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void deleteModuleItems(String sessionId);
    
    /**
	 *	Returns the userID associated to the session identified by the referred session&#39;s id.
	 *	@param	sessionId	The session identifier.
	 *	@return	The Id of the user currently logged in or 0 if no user is logged in
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public int getUserBySessionId(String sessionId);
    
    /**
	 *	Resets the timeout for the items associated to the session identified by the referred session&#39;s id.
	 *	@param	sessionId	The session identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void resetModuleTimeout(String sessionId);
}
