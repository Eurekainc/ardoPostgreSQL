/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.dmlservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;


public abstract class BasePlatformDMLProgrammaticSQL implements IPlatformDMLProgrammaticSQL {
    private IPlatformDMLService _dMLService;
    public static final TypeInformation<BasePlatformDMLProgrammaticSQL> TypeInfo = TypeInformation.get(BasePlatformDMLProgrammaticSQL.class);
    
    protected BasePlatformDMLProgrammaticSQL(IPlatformDMLService dmlService){
        setDMLService( dmlService );
    }
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    public final IPlatformDMLService getDMLService()
    {
        return _dMLService;
    }
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    private final void setDMLService(IPlatformDMLService value)
    {
        _dMLService = value;
    }
    
    public abstract String ifElseStatement(String condition, String ifBody, String elseBody);
    public abstract String getVariableValue(String name);
    public abstract String setVariable(String varName, String value);
    public abstract Map<QueryPlaceholder, String> setVariableFromQuery(String varName);
    public abstract String setVariableFromLastInsertedId(String varName);
    
    /**
	 *	This method generates SQL that starts a programmatic SQL Block.
	 *	@return	SQL that starts a programmatic SQL Block.
	 */
    public abstract String beginProgrammaticSQLBlock(VariableDetails ... variables);
    
    /**
	 *	This method generates SQL that ends a programmatic SQL Block. This implementation returns &quot;END;&quot;.
	 *	@return	SQL that ends a programmatic SQL Block.
	 */
    public String endProgrammaticSQLBlock() throws Exception {
        return "END";
    }
    
    /**
	 *	This method generates the SQL to execute a DDL statement inside a block. This implementation simply returns the DDL statement terminated with &quot;;&quot;.
	 *	@param	statement	The DDL statement to execute.
	 *	@return	SQL statement to execute the given DDL statement.
	 */
    public String executeDDLInsideBlock(String statement) {
        if (statement.endsWith(";"))
        {
            return statement;
        }
        return statement + ";";
    }
}
