/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;


/**
 *	Base implementation for generating the DML aggregate functions required by the applications to perform DataSet queries
 */
public abstract class BaseDMLAggregateFunctions implements IDMLAggregateFunctions {
    private IDMLService _dMLService;
    public static final TypeInformation<BaseDMLAggregateFunctions> TypeInfo = TypeInformation.get(BaseDMLAggregateFunctions.class);
    
    protected BaseDMLAggregateFunctions(IDMLService dmlService){
        setDMLService( dmlService );
    }
    
    /**
	 *	This property represents the associated DML service.
	 */
    public final IDMLService getDMLService()
    {
        return _dMLService;
    }
    
    /**
	 *	This property represents the associated DML service.
	 */
    private final void setDMLService(IDMLService value)
    {
        _dMLService = value;
    }
    
    /**
	 *	Returns a DML expression that computes the maximum value of &#39;v&#39; in the current group&#39;s rows. Ignores rows for which the value of &#39;v&#39; is NULL. This implementation returns Max(v).
	 *	@param	v	A DML expression that evaluates to an Integer, Decimal or DateTime.
	 *	@return	A DML expression that evaluates to a value of the same type as the argument.
	 */
    public String max(String v) {
        return "Max(" + v + ")";
    }
    
    /**
	 *	Returns a DML expression that computes the minimum value of &#39;v&#39; in the current group&#39;s rows. Ignores rows for which the value of &#39;v&#39; is NULL. This implementation returns Min(v).
	 *	@param	v	A DML expression that evaluates to an Integer, Decimal or DateTime.
	 *	@return	A DML expression that evaluates to a value of the same type as the argument.
	 */
    public String min(String v) {
        return "Min(" + v + ")";
    }
    
    /**
	 *	Returns a DML expression that computes the average value of &#39;n&#39; in the current group&#39;s rows. Ignores rows for which the value of &#39;n&#39; is NULL. This implementation returns Avg(n).
	 *	@param	n	A DML expression that evaluates to an Integer or Decimal.
	 *	@return	A DML expression that evaluates to a Decimal.
	 */
    public String avg(String n) {
        return "Avg(" + n + ")";
    }
    
    /**
	 *	Returns a DML expression that computes the sum of &#39;n&#39; in the current group&#39;s rows. Ignores rows for which the value of &#39;n&#39; is NULL. This implementation returns Sum(n).
	 *	@param	n	A DML expression that evaluates to an Integer or Decimal.
	 *	@return	A DML expression that evaluates to a value of the same type as the argument.
	 */
    public String sum(String n) {
        return "Sum(" + n + ")";
    }
    
    /**
	 *	Returns a DML expression that computes the number of rows in the current group. This implementation returns Count(*).
	 *	@return	A DML expression that evaluates to an Integer.
	 */
    public String count() {
        return "Count(*)";
    }
    
    /**
	 *	Returns a DML expression that computes the number of rows in the current group. Ignores rows for which the value of &#39;v&#39; is NULL. This implementation returns Count(v).
	 *	@param	v	A DML expression that evaluates to a basic type.
	 *	@return	A DML expression that evaluates to a Integer.
	 */
    public String count(String v) {
        return "Count(" + v + ")";
    }
    
}
