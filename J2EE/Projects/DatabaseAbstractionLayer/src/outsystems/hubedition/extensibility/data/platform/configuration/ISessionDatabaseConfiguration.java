/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.configuration;

import java.net.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.http.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.AuthenticationType;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.platform.IPlatformDatabaseProvider;



public interface ISessionDatabaseConfiguration extends IEquatable<ISessionDatabaseConfiguration>
{
    
    /**
	 *	Gets the database provider. It provides information about the database, and access to its services.
	 *	@return	The platform database provider.
	 */
    public IPlatformDatabaseProvider getPlatformDatabaseProvider();
    
    /**
	 *	This property indicates if the plugin has operations that require elevated privileges user. If this is set to true, the caller (Configuration Tool) will prompt a form to ask for credentials, and use them in operations that require elevated user
	 *	@return	True if it implements elevated privileges operations, False otherwise.
	 */
    public boolean isImplementsElevatedPrivilegesOperations();
    
    /**
	 *	Indicates the current state of the Configuration, if the property is true, then IntegratedAuthenticationMode is set
	 *	@param	value	The authentication type.
	 */
    public void setAuthenticationMode(AuthenticationType value);
    
    /**
	 *	Indicates the current state of the Configuration, if the property is true, then IntegratedAuthenticationMode is set
	 *	@return	The authentication type.
	 */
    public AuthenticationType getAuthenticationMode();
    
    /**
	 *	Gets the object that compacts all the needed configuration parameters to be used in runtime.
	 *	@return	The configuration that allows accessing the database as the session user.
	 */
    public IRuntimeDatabaseConfiguration runtimeDatabaseConfiguration();
    
    /**
	 *	Indicates the current state of the Configuration, if the property is true, then Advanced Configuration mode is set is set
	 *	@return	True if advanced configuration mode is set, False otherwise.
	 */
    public boolean isAdvancedConfigurationMode();
    
    /**
	 *	Indicates the current state of the Configuration, if the property is true, then Advanced Configuration mode is set is set
	 *	@param	value	True if advanced configuration mode is set, False otherwise.
	 */
    public void setAdvancedConfigurationMode(boolean value);
    
    /**
	 *	Contextual text to help the user understand what does the Advanced configuration consist of.
	 *	@return	The contextual help for advanced mode.
	 */
    public String getContextualHelpForAdvancedMode();
    
    /**
	 *	Contextual text to help the user understand what does the Basic configuration consist of.
	 *	@return	The contextual help for basic mode.
	 */
    public String getContextualHelpForBasicMode();
    
    /**
	 *	This property returns the credentials for the session user.
	 *	@return	The session authentication credentials.
	 */
    public PasswordAuthentication getSessionAuthenticationCredential();
    
    /**
	 *	This property returns the credentials for the session user.
	 *	@param	value	The session authentication credentials.
	 */
    public void setSessionAuthenticationCredential(PasswordAuthentication value);
    
}
