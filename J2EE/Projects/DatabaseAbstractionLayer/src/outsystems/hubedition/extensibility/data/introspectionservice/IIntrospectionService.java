/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.introspectionservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.databaseobjects.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.databaseobjects.IDatabaseInfo;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;
import outsystems.hubedition.extensibility.data.IDatabaseServices;



/**
 *	Inspects a database server to retrieve information about its data model.
 */
public interface IIntrospectionService
{
    
    /**
	 *	Sets the command timeout value to use in introspection queries.
	 *	@param	value	The query timeout.
	 */
    public void setQueryTimeout(int value);
    
    /**
	 *	Gets the database services.
	 *	@return	The database services associated.
	 */
    public IDatabaseServices getDatabaseServices();
    
    /**
	 *	Returns the list of databases that can be accessed from the current configuration. A database is a logical group of data objects (e.g. tables, views) that the plugin maps to a db-specific concept (e.g. SQL Server catalog or Oracle schema).
	 *	@return	List of available databases in the given server
	 *	@throws	java.sql.SQLException	If an error occurs while accessing the database
	 */
    public Iterable<IDatabaseInfo> listDatabases() throws java.sql.SQLException;
    
    /**
	 *	Returns a list of table sources (e.g. tables, views) that belong to a given database.  The returned table sources must have different display names.
	 *	@param	database	Database from which we want to fetch the list of tables
	 *	@param	isTableSourceToIgnore	The delegate to call to see if the table source should be ignored and excluded from the returned list
	 *	@return	List of available table sources in the given database
	 *	@throws	java.sql.SQLException	if an error occurs while accessing the database
	 *	@throws	outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException	If an error occurs while introspecting the database.
	 */
    public Iterable<ITableSourceInfo> listTableSources(IDatabaseInfo database, IsTableSourceToIgnore_Lambda isTableSourceToIgnore) throws IntrospectionServiceException, java.sql.SQLException;
    
    /**
	 *	Returns the list of foreign keys of the table source (e.g. table, view)
	 *	@param	tableSource	Table source from which we want to fetch the list of foreign keys
	 *	@return	The list of foreign keys of the table
	 *	@throws	java.sql.SQLException	if an error occurs while accessing the database
	 *	@throws	outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException	If an error occurs while introspecting the database.
	 */
    public Iterable<ITableSourceForeignKeyInfo> getTableSourceForeignKeys(ITableSourceInfo tableSource) throws IntrospectionServiceException, java.sql.SQLException;
    
    /**
	 *	Returns the list of columns of the table source (e.g. table, view)
	 *	@param	tableSource	Table source from which we want to fetch the list of columns
	 *	@return	The columns of the table
	 *	@throws	java.sql.SQLException	if an error occurs while accessing the database
	 *	@throws	outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException	If an error occurs while introspecting the database.
	 */
    public Iterable<ITableSourceColumnInfo> getTableSourceColumns(ITableSourceInfo tableSource) throws IntrospectionServiceException, java.sql.SQLException;
}
