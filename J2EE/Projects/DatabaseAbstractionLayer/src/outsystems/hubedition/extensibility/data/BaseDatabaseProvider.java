/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.IIntegrationDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.runtimecommon.DatabaseProviderKey;


public abstract class BaseDatabaseProvider implements IDatabaseProvider {
    public static final TypeInformation<BaseDatabaseProvider> TypeInfo = TypeInformation.get(BaseDatabaseProvider.class);
    
    /**
	 *	Returns a unique identifier of the database provider, used to identify it as a plugin
	 */
    public abstract DatabaseProviderKey getKey();
    
    /**
	 *	Gets the IProviderProperties instance associated with this database provider.
	 *	@return	The provider properties.
	 */
    public abstract IProviderProperties getProperties();
    
    /**
	 *	Returns an empty IIntegrationDatabaseConfiguration.
	 */
    public abstract IIntegrationDatabaseConfiguration createEmptyIntegrationDatabaseConfiguration();
    
    /**
	 *	Returns the services provided by the DBMS.
	 *	@param	databaseConfiguration	The database configuration.
	 */
    public abstract IDatabaseServices getIntegrationDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration);
    
    /**
	 *	Returns true if the Key of both providers is equal
	 */
    public boolean equalsObj(IDatabaseProvider provider) {
        if (provider == null)
            return false;
        return provider.getKey().equals(getKey());
    }
    
    public boolean equals(Object obj) {
        if (obj == null || getClass() != obj.getClass())
        {
            return false;
        }
        
        return equalsObj(ClassUtils.safeCast(obj, IDatabaseProvider.class));
    }
    
    public int hashCode() {
        return getKey().hashCode();
    }
}
