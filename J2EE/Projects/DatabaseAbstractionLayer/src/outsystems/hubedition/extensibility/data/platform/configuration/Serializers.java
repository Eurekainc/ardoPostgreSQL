/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.configuration;

import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import outsystems.hubedition.extensibility.data.configurationservice.AuthenticationType;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IUserDefinedParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.MetaDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.Serializer;



public class Serializers {
    public static final TypeInformation<Serializers> TypeInfo = TypeInformation.get(Serializers.class);
    
    public static Serializer<IPlatformDatabaseConfiguration> getForPlatform()
    {
        Func.Func1_Lambda<IPlatformDatabaseConfiguration, Iterable<IParameter>> e = (IPlatformDatabaseConfiguration c) -> {
            MetaDatabaseConfiguration m = new MetaDatabaseConfiguration(c);
            Iterable<IParameter> ps = LinqMethods.where(m.getParameters(), (IParameter p) -> {
                return p.isPersist();
            });
            if (c.getAuthenticationMode() == AuthenticationType.Windows_Authentication)
            {
                return LinqMethods.where(ps, (IParameter p) -> {
                    return !(p instanceof IUserDefinedParameter) || 
                        !((IUserDefinedParameter) p).isPassword();
                });
            }
            else
            {
                return ps;
            }
        };
        
        return new Serializer<IPlatformDatabaseConfiguration>(TypeInformation.get(IPlatformDatabaseConfiguration.class), "PlatformDatabaseConfiguration", e);
    }
    
    public static Serializer<ISessionDatabaseConfiguration> getForSession()
    {
        Func.Func1_Lambda<ISessionDatabaseConfiguration, Iterable<IParameter>> e = (ISessionDatabaseConfiguration c) -> {
            MetaDatabaseConfiguration m = new MetaDatabaseConfiguration(c);
            Iterable<IParameter> ps = LinqMethods.where(m.getParameters(), (IParameter p) -> {
                return p.isPersist();
            });
            if (c.getAuthenticationMode() == AuthenticationType.Windows_Authentication)
            {
                return LinqMethods.where(ps, (IParameter p) -> {
                    return !(p instanceof IUserDefinedParameter) || 
                        !((IUserDefinedParameter) p).isPassword();
                });
            }
            else
            {
                return ps;
            }
        };
        
        return new Serializer<ISessionDatabaseConfiguration>(TypeInformation.get(ISessionDatabaseConfiguration.class), "SessionDatabaseConfiguration", e);
    }
}
