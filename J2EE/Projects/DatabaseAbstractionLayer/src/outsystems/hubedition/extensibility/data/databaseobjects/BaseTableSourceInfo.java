/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.databaseobjects;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.IDatabaseServices;

public abstract class BaseTableSourceInfo implements ITableSourceInfo {
    private IDatabaseServices _databaseServices;
    private IDatabaseInfo _database;
    private String _name;
    private String _qualifiedName;
    private String _validationWarning;
    public static final TypeInformation<BaseTableSourceInfo> TypeInfo = TypeInformation.get(BaseTableSourceInfo.class);
    
    protected BaseTableSourceInfo(IDatabaseServices databaseServices, IDatabaseInfo database, String name, String qualifiedName){
        setDatabaseServices( databaseServices );
        setDatabase( database );
        setName( name );
        setQualifiedName( qualifiedName );
    }
    
    public final IDatabaseServices getDatabaseServices()
    {
        return _databaseServices;
    }
    
    private final void setDatabaseServices(IDatabaseServices value)
    {
        _databaseServices = value;
    }
    
    /**
	 *	Database where the table source is located.
	 */
    public IDatabaseInfo getDatabase()
    {
        return _database;
    }
    
    /**
	 *	Database where the table source is located.
	 */
    private void setDatabase(IDatabaseInfo value)
    {
        _database = value;
    }
    
    /**
	 *	Name that identifies the table source inside the database
	 */
    public final String getName()
    {
        return _name;
    }
    
    /**
	 *	Name that identifies the table source inside the database
	 */
    private final void setName(String value)
    {
        _name = value;
    }
    
    /**
	 *	Fully qualified identifier of the table source, including the database information
	 */
    public final String getQualifiedName()
    {
        return _qualifiedName;
    }
    
    /**
	 *	Fully qualified identifier of the table source, including the database information
	 */
    private final void setQualifiedName(String value)
    {
        _qualifiedName = value;
    }
    
    /**
	 *	Human-readable name that unambiguously identifies the table source inside a database. This implementation returns the Name.
	 */
    public String getDisplayName()
    {
        return getName();
    }
    
    /**
	 *	Returns true if both objects represent exactly the same table source, or false otherwise. This implementation returns true if both objects are the same instance or if the  Database, Name and QualifiedName are equal.
	 *	@param	other	Other table source object to compare with
	 *	@return	true if the current object is equal to the other parameter; otherwise, false.
	 */
    public boolean equalsObj(ITableSourceInfo other) {
        return ((this) == (other)) || (getDatabase().equalsObj(other.getDatabase()) && StringUtils.equals(getName(), other.getName()) && StringUtils.equals(getQualifiedName(), other.getQualifiedName()));
    }
    
    public boolean equals(Object obj) {
        ITableSourceInfo ts = ClassUtils.safeCast(obj, ITableSourceInfo.class);
        return ts != null && equalsObj(ts);
    }
    
    public int hashCode() {
        return getDatabase().hashCode() ^ getName().hashCode() ^ getQualifiedName().hashCode();
    }
    
    public final void setValidationWarning(String value)
    {
        _validationWarning = value;
    }
    
    public final String getValidationWarning()
    {
        return _validationWarning;
    }
}
