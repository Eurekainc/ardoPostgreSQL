/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;

public class BaseDMLOperators implements IDMLOperators {
    private IDMLService _dMLService;
    public static final TypeInformation<BaseDMLOperators> TypeInfo = TypeInformation.get(BaseDMLOperators.class);
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    public final IDMLService getDMLService()
    {
        return _dMLService;
    }
    
    /**
	 *	This property represents the associated IDMLService.
	 */
    private final void setDMLService(IDMLService value)
    {
        _dMLService = value;
    }
    
    public BaseDMLOperators(IDMLService dmlService){
        setDMLService( dmlService );
    }
    
    /**
	 *	Returns a DML expression that computes the numeric negation of a number. This implementation returns -n.
	 *	@param	n	A DML expression that evaluates to a Decimal or Integer.
	 *	@return	A DML expression that evaluates to a Decimal or Integer.
	 */
    public String negative(String n) {
        return "-" + n;
    }
    
    /**
	 *	Returns a DML expression that computes the logical negation. This implementation returns &#39;NOT b&#39;.
	 *	@param	b	A DML expression that evaluates to a Boolean.
	 *	@return	A DML expression that evaluates to a Boolean.
	 */
    public String not(String b) {
        return "NOT " + b;
    }
    
    /**
	 *	Returns a DML expression that checks if the value is NULL. This implementation returns v IS NULL.
	 *	@param	v	A DML expression that evaluates to a value of any database type.
	 *	@return	A DML expression that evaluates to a Boolean.
	 */
    public String isNull(String v) {
        return v + " IS NULL";
    }
    
    /**
	 *	Returns a DML expression that checks if a is not NULL. This implementation returns v IS NULL.
	 *	@param	v	A DML expression that evaluates to a value of any database type.
	 *	@return	A DML expression that evaluates to a Boolean.
	 */
    public String isNotNull(String v) {
        return v + " IS NOT NULL";
    }
    
    /**
	 *	Returns a DML expression that concatenates two values. This implementation returns v1 || v2.
	 *	@param	v1	A DML expression that evaluates to a value of any type except binary data.
	 *	@param	v2	A DML expression that evaluates to a value of any type except binary data.
	 *	@return	A DML expression that evaluates to Text.
	 */
    public String concatenate(String v1, String v2) {
        return v1 + " || " + v2;
    }
    
    /**
	 *	Returns a DML expression that adds two numbers. This implementation returns v1 + v2.
	 *	@param	n1	A DML expression that evaluates to a Decimal or Integer.
	 *	@param	n2	A DML expression that evaluates to a Decimal or Integer.
	 *	@return	A DML expression that evaluates to a Decimal or Integer.
	 */
    public String add(String n1, String n2) {
        return n1 + " + " + n2;
    }
    
    /**
	 *	Returns a DML expression that subtracts two numbers. This implementation returns n1 - n2.
	 *	@param	n1	A DML expression that evaluates to a Decimal or Integer.
	 *	@param	n2	A DML expression that evaluates to a Decimal or Integer.
	 *	@return	A DML expression that evaluates to a Decimal or Integer.
	 */
    public String subtract(String n1, String n2) {
        return n1 + " - " + n2;
    }
    
    /**
	 *	Returns a DML expression that multiplies two numbers. This implementation returns n1 * n2.
	 *	@param	n1	A DML expression that evaluates to a Decimal or Integer.
	 *	@param	n2	A DML expression that evaluates to a Decimal or Integer.
	 *	@return	A DML expression that evaluates to a Decimal or Integer.
	 */
    public String multiply(String n1, String n2) {
        return n1 + " * " + n2;
    }
    
    /**
	 *	Returns a DML expression that divides two numbers. This implementation returns n1 / n2.
	 *	@param	n1	A DML expression that evaluates to a Decimal or Integer.
	 *	@param	n2	A DML expression that evaluates to a Decimal or Integer.
	 *	@return	A DML expression that evaluates to a Decimal.
	 */
    public String divide(String n1, String n2) {
        return n1 + " / " + n2;
    }
    
    /**
	 *	Returns a DML expression that checks if two values are equal. This implementation returns n1 = n2.
	 *	@param	v1	A DML expression that evaluates to a value of any type except binary data.
	 *	@param	v2	A DML expression that evaluates to a value of any type except binary data.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String equal(String v1, String v2) {
        return v1 + " = " + v2;
    }
    
    /**
	 *	Returns a DML expression that checks if two values are different. This implementation returns n1 &lt;&gt; n2.
	 *	@param	v1	A DML expression that evaluates to a value of any type except binary data.
	 *	@param	v2	A DML expression that evaluates to a value of any type except binary data.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String notEqual(String v1, String v2) {
        return v1 + " <> " + v2;
    }
    
    /**
	 *	Returns a DML expression that checks if a value is less than another. This implementation returns n1 &lt; n2.
	 *	@param	v1	A DML expression that evaluates to a value of any type except binary data.
	 *	@param	v2	A DML expression that evaluates to a value of any type except binary data.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String lessThen(String v1, String v2) {
        return v1 + " < " + v2;
    }
    
    /**
	 *	Returns a DML expression that checks if a value is less than or equal to another. This implementation returns n1 &lt;= n2.
	 *	@param	v1	A DML expression that evaluates to a value of any type except binary data.
	 *	@param	v2	A DML expression that evaluates to a value of any type except binary data.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String lessThanOrEqual(String v1, String v2) {
        return v1 + " <= " + v2;
    }
    
    /**
	 *	Returns a DML expression that checks if a value is greater than another. This implementation returns n1 &gt; n2.
	 *	@param	v1	A DML expression that evaluates to a value of any type except binary data.
	 *	@param	v2	A DML expression that evaluates to a value of any type except binary data.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String greaterThan(String v1, String v2) {
        return v1 + " > " + v2;
    }
    
    /**
	 *	Returns a DML expression that checks if a value is less or equals to another. This implementation returns n1 &gt;= n2.
	 *	@param	v1	A DML expression that evaluates to a value of any type except binary data.
	 *	@param	v2	A DML expression that evaluates to a value of any type except binary data.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String greaterThanOrEqual(String v1, String v2) {
        return v1 + " >= " + v2;
    }
    
    /**
	 *	Returns a DML expression that performs the logical AND. This implementation returns b1 AND b2.
	 *	@param	b1	A DML expression that evaluates to Boolean.
	 *	@param	b2	A DML expression that evaluates to Boolean.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String and(String b1, String b2) {
        return b1 + " AND " + b2;
    }
    
    /**
	 *	Returns a DML expression that performs the logical OR. This implementation returns b1 OR b2.
	 *	@param	b1	A DML expression that evaluates to Boolean.
	 *	@param	b2	A DML expression that evaluates to Boolean.
	 *	@return	A DML expression that evaluates to Boolean.
	 */
    public String or(String b1, String b2) {
        return b1 + " OR " + b2;
    }
    
    /**
	 *	Provides a DML expression that checks whether a string matches a pattern. This implementation returns t1 LIKE t2.
	 *	@param	t1	A DML expression that evaluates to Text.
	 *	@param	t2	A DML expression that evaluates to Text.
	 *	@return	A DML expression that evaluates to Text.
	 */
    public String like(String t1, String t2) {
        return t1 + " LIKE " + t2;
    }
}
