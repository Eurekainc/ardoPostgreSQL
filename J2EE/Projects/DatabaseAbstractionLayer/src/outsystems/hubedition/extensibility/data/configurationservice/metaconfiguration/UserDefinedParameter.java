/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration;

import java.lang.reflect.*;
import java.net.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.ParameterRegion;
import outsystems.hubedition.extensibility.data.configurationservice.UserDefinedConfigurationParameter;


/**
 *	Represents a parameter defined by a specific implementation of a database provider tagged accordingly.
 */
public class UserDefinedParameter extends Parameter implements IUserDefinedParameter {
    public static final TypeInformation<UserDefinedParameter> TypeInfo = TypeInformation.get(UserDefinedParameter.class);
    
    private UserDefinedConfigurationParameter annotation;
    private Method visibilityChecker;
    private Object config;
    
    /**
	 *	Constructor to create a new parameter.
	 *	@param	name	The parameter&#39;s name.
	 *	@param	getter	Method to get the value of the parameter.
	 *	@param	setter	Method to set the value of the parameter.
	 *	@param	config	The configuration.
	 *	@param	encrypt	Indicates if the parameter is encrypted.
	 *	@param	persist	Indicates if the parameter should be persisted.
	 *	@param	visibilityChecker	Method to check the visibility of the parameter.
	 *	@param	annotation	The annotation.
	 */
    public UserDefinedParameter(String name, Method getter, Method setter, Object config, boolean encrypt, boolean persist, Method visibilityChecker, UserDefinedConfigurationParameter annotation){
        super(name, getter, setter, encrypt, persist, config);
        this.config = config;
        this.visibilityChecker = visibilityChecker;
        this.annotation = annotation;
    }
    
    /**
	 *	Invokes the visibilityChecker method to check whether this parameter is visible or not.
	 *	@return	True if the parameter is visible or False if not.
	 */
    public final boolean isVisible() throws IllegalAccessException, InvocationTargetException
    {
        if (visibilityChecker == null)
        {
            return true;
        }
        Object visible = visibilityChecker.invoke(config, (Object[]) null);
        return BooleanUtils.toBoolean( visible);
    }
    
    /**
	 *	Gets the label that represents the parameter.
	 *	@return	The label representing the parameter.
	 */
    public final String getLabel()
    {
        return annotation.label();
    }
    
    /**
	 *	Returns information about the parameter.
	 *	@return	The information to be shown.
	 */
    public final String getExample()
    {
        return annotation.example();
    }
    
    /**
	 *	Gets a value indicating whether the parameter is mandatory or not.
	 *	@return	True if the parameter is mandatory or False if not.
	 */
    public final boolean isMandatory()
    {
        return annotation.isMandatory();
    }
    
    /**
	 *	Gets the order of the parameter inside the region.
	 *	@return	An integer that represents the parameter&#39;s order inside the region.
	 */
    public final int getOrder()
    {
        return annotation.order();
    }
    
    /**
     *	Gets the UI region of the parameter.
     *	@return	Object that represents the region where the parameter will be.
     */
    public final EnumSet<ParameterRegion> getRegion()
    {
        return EnumSet.copyOf(Arrays.asList(annotation.region()));
    }
    
    /**
	 *	Gets a value indicating whether this object is password.
	 *	@return	True if this parameter is representing password or False if not.
	 */
    public final boolean isPassword()
    {
        return annotation.isPassword();
    }
    
    /**
	 *	This property indicates whether this object uses a multiline text.
	 *	@return	True if this object has multiline text, false if not.
	 */
    public final boolean isMultiline()
    {
        return false;
    }
    
    /**
	 *	Gets the autocomplete expression.
	 *	@return	An expression that controls how autocomplete will react for read-only fields.
	 */
    public final String getAutoCompleteExpression()
    {
        return "";
    }
}
