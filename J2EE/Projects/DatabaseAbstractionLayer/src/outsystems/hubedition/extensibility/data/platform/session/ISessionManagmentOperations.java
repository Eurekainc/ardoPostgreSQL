/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.session;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;


/**
 *	Specify methods to allow the management of existing sessions.
 */
public interface ISessionManagmentOperations
{
    
    /**
	 *	Deletes the session with the given identifier.
	 *	@param	sessionId	The session identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void deleteSession(String sessionId);
    
    /**
	 *	Deletes the expired session with the given identifier also deleting related module sessions.
	 *	@param	sessionId	The session identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void deleteExpiredSession(String sessionId);
    
    /**
	 *	Deletes all expired sessions also deleting related module sessions.
	 *	@return	Number of sessions eliminated.
	 */
    public int deleteExpiredSessions();
    
    /**
	 *	Changes the session identifier.
	 *	@param	oldSessionId	The old session identifier.
	 *	@param	newSessionId	The new session identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void changeSessionId(String oldSessionId, String newSessionId);
    
    /**
	 *	Resets the session timeout.
	 *	@param	sessionId	The session identifier.
	 *	@param	newTimeout	The new timeout.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void resetSessionTimeout(String sessionId, TimeSpan newTimeout);
    
    /**
	 *	Unlocks session whose identifier contains the provided sub string in the specified position.
	 *	@param	position	Specifies where to start looking for the substring in the session identifier. The first position is always 0.
	 *	@param	subString	The value to look for in the session identifier
	 */
    public void unlockSessionBySubstring(int position, String subString);
    
    /**
	 *	Checks if the session state model is correctly created.
	 *	@return	True if the model is alright, false otherwise.
	 */
    public boolean checkSessionModel();
}
