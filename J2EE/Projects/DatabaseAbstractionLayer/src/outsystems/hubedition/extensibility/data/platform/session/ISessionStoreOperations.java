/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.platform.session;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;



/**
 *	Specify methods related to the storage of sessions information.
 */
public interface ISessionStoreOperations
{
    
    /**
	 *	If an association exists from str to an hash hash1, returns true and sets ehash to hash1. If the association does not exist, makes the association, returns true and sets ehash to hash. If there is a str str1 associated with an hash hash, returns false and sets to collidedStr to str1.
	 *	@param	str	The key to be associated to the given hash
	 *	@param	hash	The hash to be stored
	 *	@param	ehash	The existent hash for the given str, if it already exists.
	 *	@param	collidedStr	The existent str, if there is a string different than str associated with an hash hash.
	 *	@return	True, if the association doesn&#39;t exist or if it exists the hashes are different. False, otherwise.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public boolean store(String str, int hash, RefParmHolderInteger ehash, RefParmHolder<String> collidedStr);
    
    /**
	 *	Releases the lock from the given session.
	 *	@param	sessionId	The session identifier.
	 *	@param	lockId	The lock identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void releaseLock(String sessionId, int lockId);
    
    /**
	 *	Gets the session with the specified session&#39;s ID. This method don&#39;t lock the required session.
	 *	@param	sessionId	The session identifier.
	 *	@param	lockId	The lock identifier.
	 *	@param	locked	True, if the required session is locked. False, otherwise.
	 *	@param	lockAge	How long is the session locked.
	 *	@param	state	The state.
	 *	@return	The requested session data stored.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public byte[] get(String sessionId, RefParmHolderInteger lockId, RefParmHolderBoolean locked, RefParmHolder<TimeSpan> lockAge, RefParmHolder<ItemState> state);
    
    /**
	 *	Gets the session with the specified session&#39;s ID and lock it.
	 *	@param	sessionId	The session identifier.
	 *	@param	lockId	The lock identifier.
	 *	@param	locked	True, if the required session is locked. False, otherwise.
	 *	@param	lockAge	How long is the session locked.
	 *	@param	state	The state.
	 *	@return	The requested session data stored.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public byte[] getAndLock(String sessionId, RefParmHolderInteger lockId, RefParmHolderBoolean locked, RefParmHolder<TimeSpan> lockAge, RefParmHolder<ItemState> state);
    
    /**
	 *	Inserts the specified session and it&#39;s data. The timeout for the inserted is also stored.
	 *	@param	sessionId	The session identifier.
	 *	@param	data	The session&#39;s data.
	 *	@param	timeout	The session&#39;s expiration timeout.
	 *	@throws	RepeatedInsertException	Thrown when we try to insert a session when a session with the same sessionId already exists.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void insert(String sessionId, byte[] data, TimeSpan timeout);
    
    /**
	 *	Inserts an initialized session with the given identifier.
	 *	@param	sessionId	The session identifier.
	 *	@param	data	The session&#39;s data.
	 *	@param	timeout	The session&#39;s expiration timeout.
	 *	@throws	RepeatedInsertException	Thrown when we try to insert a session when a session with the same sessionId already exists.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void insertInitialized(String sessionId, byte[] data, TimeSpan timeout);
    
    /**
	 *	Inserts an uninitialized session with the given identifier.
	 *	@param	sessionId	The session identifier.
	 *	@param	data	The session&#39;s data.
	 *	@param	timeout	The session&#39;s expiration timeout.
	 *	@throws	RepeatedInsertException	Thrown when we try to insert a session when a session with the same sessionId already exists.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void insertUninitialized(String sessionId, byte[] data, TimeSpan timeout);
    
    /**
	 *	Inserts or creates a session with the given identifier and lockId.
	 *	@param	sessionId	The session identifier.
	 *	@param	lockId	The session lock id
	 *	@param	data	The session&#39;s data.
	 *	@param	timeout	The session&#39;s expiration timeout.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void insertOrUpdate(String sessionId, int lockId, byte[] data, TimeSpan timeout);
    
    /**
	 *	Updates the specified session information that has the given identifier.
	 *	@param	sessionId	The session identifier.
	 *	@param	lockId	The lock identifier.
	 *	@param	data	The session&#39;s data.
	 *	@param	prevDataSize	Size of the previous data.
	 *	@param	timeout	The session&#39;s expiration timeout.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void update(String sessionId, int lockId, byte[] data, int prevDataSize, TimeSpan timeout);
    
    /**
	 *	Deletes the specified session that has the given identifier.
	 *	@param	sessionId	The session identifier.
	 *	@param	lockId	The lock identifier.
	 *	@throws	SessionStoreException	Thrown when it&#39;s not possible to complete the operation.
	 */
    public void delete(String sessionId, int lockId);
    
}
