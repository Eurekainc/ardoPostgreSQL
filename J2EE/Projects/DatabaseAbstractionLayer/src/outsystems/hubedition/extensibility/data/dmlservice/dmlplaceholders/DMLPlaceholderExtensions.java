/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.dmlservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.runtimecommon.CollectionsExtensions;
import outsystems.runtimecommon.StringUtilities;


public class DMLPlaceholderExtensions {
    public static final TypeInformation<DMLPlaceholderExtensions> TypeInfo = TypeInformation.get(DMLPlaceholderExtensions.class);
    /**
	 *	Gets the placeholder value and removes all leading white spaces.
	 *	@param	placeholders	The placeholder.
	 *	@param	key	The placeholder key in the dictionary.
	 *	@return	The placeholder value.
	 *	@param <TKey> Class related to the type of the key.
@param methodTypeArg_TKey Information regarding the method's type argument.
	 */
    public static <TKey> String getPlaceholderValueTrimStart(final TypeInformation<TKey> methodTypeArg_TKey, Map<TKey, String> placeholders, TKey key) {
        return DMLPlaceholderExtensions.<TKey>getPlaceholderValue(methodTypeArg_TKey, placeholders, key, /*trimStart*/
        true, /*trimEnd*/
        false);
    }
    
    /**
	 *	Gets the placeholder value and removes all trailing white spaces.
	 *	@param	placeholders	The placeholder.
	 *	@param	key	The placeholder key in the dictionary.
	 *	@return	The placeholder value.
	 *	@param <TKey> Class related to the type of the key.
@param methodTypeArg_TKey Information regarding the method's type argument.
	 */
    public static <TKey> String getPlaceholderValueTrimEnd(final TypeInformation<TKey> methodTypeArg_TKey, Map<TKey, String> placeholders, TKey key) {
        return DMLPlaceholderExtensions.<TKey>getPlaceholderValue(methodTypeArg_TKey, placeholders, key, /*trimStart*/
        false, /*trimEnd*/
        true);
    }
    
    /**
	 *	Gets the placeholder value and removes all leading and trailing white spaces.
	 *	@param	placeholders	placeholders
	 *	@param	key	The placeholder key in the dictionary.
	 *	@return	The placeholder value.
	 *	@param <TKey> Class related to the type of the key.
@param methodTypeArg_TKey Information regarding the method's type argument.
	 */
    public static <TKey> String getPlaceholderValue(final TypeInformation<TKey> methodTypeArg_TKey, Map<TKey, String> placeholders, TKey key) {
        return DMLPlaceholderExtensions.<TKey>getPlaceholderValue(methodTypeArg_TKey, placeholders, key, /*trimStart*/
        true, /*trimEnd*/
        true);
    }
    
    /**
	 *	Gets the placeholder value and removes all leading and trailing white spaces depending on the values of trimStart and trimEnd.
	 *	@param	placeholders	placeholders
	 *	@param	key	placeholder&#39;s key
	 *	@param	trimStart	if set to true removes all leading white spaces from the placeholder value.
	 *	@param	trimEnd	if set to true removes all trailing white spaces from the placeholder value
	 *	@return	The placeholder value.
	 *	@param <TKey> Class related to the type of the key.
@param methodTypeArg_TKey Information regarding the method's type argument.
	 */
    public static <TKey> String getPlaceholderValue(final TypeInformation<TKey> methodTypeArg_TKey, Map<TKey, String> placeholders, TKey key, boolean trimStart, boolean trimEnd) {
        String value = placeholders == null ? "" : CollectionsExtensions.getValueOrEmpty(methodTypeArg_TKey, placeholders, key).trim();
        return (trimStart || StringUtilities.isEmpty(value) ? "" : " ") + value + (trimEnd || StringUtilities.isEmpty(value) ? "" : " ");
    }
}
