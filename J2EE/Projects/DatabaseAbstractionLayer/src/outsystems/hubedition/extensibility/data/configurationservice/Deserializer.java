/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice;

import java.io.*;
import java.text.*;
import java.util.*;
import javax.xml.parsers.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import linqbridge.linq.*;
import linqbridge.xml.linq.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import linqbridge.xml.linq.XAttribute;
import linqbridge.xml.linq.XElement;
import linqbridge.xml.linq.XName;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.MetaDatabaseConfiguration;


public final class Deserializer<TConfiguration> implements IGenericObject {
    private String _tag;
    private Func.Func1_Lambda<String, String> _valueDecrypter;
    
    public final String getTag()
    {
        return _tag;
    }
    
    private final void setTag(String value)
    {
        _tag = value;
    }
    public final Func.Func1_Lambda<String, String> getValueDecrypter()
    {
        return _valueDecrypter;
    }
    
    public final void setValueDecrypter(Func.Func1_Lambda<String, String> value)
    {
        _valueDecrypter = value;
    }
    
    public Deserializer(final TypeInformation<TConfiguration> classTypeArg_TConfiguration, String tag){
        staticInitDeserializer(classTypeArg_TConfiguration);
        instanceInitDeserializer(classTypeArg_TConfiguration);
        setTag( tag );
        setValueDecrypter( null );
    }
    
    public final void deserialize(XElement xmlConf, TConfiguration conf) {
        
        if (xmlConf == null)
        {
            throw new ConfigurationSerializationException("No root");
        }
        
        if (XName.op_Inequality(xmlConf.getName(),XName.op_Implicit(getTag())))
        {
            throw new ConfigurationSerializationException("Expected element tagged " + getTag() + " got " + xmlConf.getName());
        }
        
        MetaDatabaseConfiguration meta = new MetaDatabaseConfiguration(conf);
        
        java.util.Iterator<XElement> elemIter = (xmlConf.elements()).iterator();
        try {
            XElement elem;
            while (elemIter.hasNext()) {
                elem = elemIter.next();
                IParameter param = meta.getParameter(elem.getName().getLocalName());
                if (param != null)
                {
                    
                    boolean decryptValue = getValueDecrypter() != null && 
                        elem.attribute(XName.op_Implicit("encrypted")) != null && 
                        elem.attribute(XName.op_Implicit("encrypted")).getValue().equals("true");
                    
                    param.set(decryptValue ? getValueDecrypter().execute(elem.getValue()) : elem.getValue());
                }
            }
        } finally {
            CollectionUtils.dispose(elemIter);
        }
    }
    
    
    public TypeInformation<?> getTypeInformation() {
        return TypeInformation.<Deserializer<TConfiguration>>get(Deserializer.class, classTypeArg_TConfiguration);
    }
    
    private final void instanceInitDeserializer(final TypeInformation<TConfiguration> classTypeArg_TConfiguration) {
        this.classTypeArg_TConfiguration = classTypeArg_TConfiguration;
    }
    protected static <TConfiguration> void staticInitDeserializer(final TypeInformation<TConfiguration> classTypeArg_TConfiguration) {
    }
    protected TypeInformation<TConfiguration> classTypeArg_TConfiguration;
}
