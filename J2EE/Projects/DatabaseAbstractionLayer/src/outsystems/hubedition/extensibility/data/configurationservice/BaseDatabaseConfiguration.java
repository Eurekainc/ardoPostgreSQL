/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.extensibility.data.configurationservice;

import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;



/**
 *	Base implementation of the IIntegrationDatabaseConfiguration interface, that encapsulates a connection string and other configuration information required to connect to a database. Extend this class to create a specific database configuration.
 */
public abstract class BaseDatabaseConfiguration implements IIntegrationDatabaseConfiguration {
    private String _connectionStringOverride;
    public static final TypeInformation<BaseDatabaseConfiguration> TypeInfo = TypeInformation.get(BaseDatabaseConfiguration.class);
    
    /**
	 *	Gets the database provider. It provides information about the database, and access to its services.
	 */
    public abstract IDatabaseProvider getDatabaseProvider();
    
    /**
	 *	Gets the connection string that allows connecting to a database. If the ConnectionStringOverride is defined, returns it, if an advanced connection string is defined returns the result of assembleAdvancedConnectionString. Otherwise returns the result of assembleBasicConnectionString.
	 */
    public String getConnectionString()
    {
        if (!StringUtils.isNullOrEmpty(getConnectionStringOverride()))
        {
            return getConnectionStringOverride();
        }
        return getAdvancedConfiguration().isSet() ? assembleAdvancedConnectionString() : assembleBasicConnectionString();
    }
    
    /**
	 *	Returns a basic connection string with attributes such as username and password.
	 *	@return	A basic connection string.
	 */
    protected abstract String assembleBasicConnectionString();
    
    /**
	 *	Returns an advanced connection string with attributes that might be specific for a particular database.
	 *	@return	An advanced connection string.
	 */
    protected abstract String assembleAdvancedConnectionString();
    
    /**
	 *	This property represents the connection string that overrides specified configuration parameter values.
	 */
    @ConfigurationParameter
    public String getConnectionStringOverride()
    {
        return _connectionStringOverride;
    }
    
    /**
	 *	This property represents the connection string that overrides specified configuration parameter values.
	 */
    @ConfigurationParameter
    public void setConnectionStringOverride(String value)
    {
        _connectionStringOverride = value;
    }
    
    /**
	 *	This property represents the advanced configuration object.
	 *	@return	The advanced configuration object.
	 */
    public abstract AdvancedConfiguration getAdvancedConfiguration();
    
    /**
	 *	This property represents the advanced configuration object.
	 *	@param	value	The advanced configuration object.
	 */
    public abstract void setAdvancedConfiguration(AdvancedConfiguration value);
    
    /**
	 *	This property represents the database identifier to be used in the configuration.
	 */
    public abstract String getDatabaseIdentifier();
    
    /**
	 *	Concatenates the connection string with the supplied extra parameters.
	 *	@param	connectionStringWithoutExtras	Connection string without any extra parameters.
	 *	@param	extras	Extra parameters to be added to the connection string.
	 *	@return	A string representation of the new connection string after joining the extra parameters.
	 */
    public static String join(String connectionStringWithoutExtras, String extras)
    {
        return connectionStringWithoutExtras;
    }
    
    
    
    /**
	 *	Determines whether the current object is equal to the specified T:System.Object.
	 *	@param	obj	The T:System.Object to compare with.
	 *	@return	True if the instance is equal to the specified T:System.Object, False otherwise.
	 */
    public boolean equals(Object obj) {
        BaseDatabaseConfiguration other = ClassUtils.safeCast(obj, BaseDatabaseConfiguration.class);
        
        return ((other != null) && equalsBasedOnParts(new Object[] { getConnectionStringOverride(), getAdvancedConfiguration().getAdvancedConnectionStringField(), getConnectionString() },
    new Object[] { other.getConnectionStringOverride(), other.getAdvancedConfiguration().getAdvancedConnectionStringField(), getConnectionString() }));
    }
    
    /**
	 *	Returns the hash code for this object.
	 *	@return	The hash code for this object.
	 */
    public int hashCode() {
        return getHashCodeBasedOnParts(getConnectionStringOverride(), getAdvancedConfiguration().getAdvancedConnectionStringField(), getConnectionString());
    }
    
    /**
	 *	Returns the hash code of a list of objects.
	 *	@param	parts	A list of objects.
	 *	@return	An hash code.
	 */
    protected static int getHashCodeBasedOnParts(Object ... parts) {
        int result = 0;
        
        for( int i = 0; i < parts.length; i++)
        {
            if (parts[i] != null)
            {
                result ^= parts[i].hashCode();
            }
        }
        
        return result;
    }
    
    /**
	 *	Compares two lists of objects.
	 *	@param	parts1	A list of objects.
	 *	@param	parts2	Another list of objects.
	 *	@return	True if the two lists are equal, False otherwise.
	 */
    protected static boolean equalsBasedOnParts(Object[] parts1, Object[] parts2) {
        for( int i = 0; i < parts1.length; i++)
        {
            if (!ClassUtils.safeEquals(parts1[i], parts2[i]))
            {
                return false;
            }
        }
        
        return true;
    }
    
    public abstract IRuntimeDatabaseConfiguration getRuntimeDatabaseConfiguration();
}
