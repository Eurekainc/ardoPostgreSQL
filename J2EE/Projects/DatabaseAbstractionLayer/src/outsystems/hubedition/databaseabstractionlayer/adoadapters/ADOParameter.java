/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.databaseabstractionlayer.adoadapters;

import java.io.OutputStream;
import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import outsystems.hubedition.util.DateTime;
import outsystems.hubedition.util.IDisposable;
import outsystems.runtimecommon.OSTrace;

/**
 * A parameter in a DB command. Parameters are represented by their name (e.g.,
 * "@LIMIT") and not by their position in the command text.
 */
public class ADOParameter implements IDisposable {
	// Possible parameter value types
	protected static final int OBJECT_VALUE = 0;
	protected static final int BIGDECIMAL_VALUE = 1;
	protected static final int BOOLEAN_VALUE = 2;
	protected static final int BYTE_VALUE = 3;
	protected static final int DATE_VALUE = 4;
	protected static final int DOUBLE_VALUE = 5;
	protected static final int FLOAT_VALUE = 6;
	protected static final int INT_VALUE = 7;
	protected static final int LONG_VALUE = 8;
	protected static final int SHORT_VALUE = 9;
	protected static final int STRING_VALUE = 10;

	// Parameter name
	protected String name;

	// Parameter db type
	protected int dbType = Types.OTHER;

	// Parameter value (the field used is selected based on the value of
	// valueType, which is set by the setValue methods)
	protected Object objectValue;

	protected boolean booleanValue;

	protected int longValue;

	protected double doubleValue;

	protected float floatValue;

	// Parameter value type
	protected int valueType;

	// Parameter direction
	protected int direction = ADOParameterDirection.Input;
	
	// Temporary blob for holding binary data in the parameter
    protected TemporaryBlob blob = null;
    
    // Temporary clob for holding large text data in the parameter
    protected TemporaryClob clob = null;
    protected boolean isResultSetParameter;
    
    protected static boolean CACHE_BLOB = true;
	
	public ADOParameter(){ }
	
	public ADOParameter(String name, int dbType){
		setName(name);
		setDbType(dbType);
	}
	
	protected Object convertToTimeStamp(DateTime value) {
	    return new Timestamp(value.toDate().getTime());
	}
	
	protected void setTimeStamp(PreparedStatement pstmt, int index, Object timestamp) throws SQLException {
	    pstmt.setTimestamp(index, (Timestamp) timestamp);
    }

    /**
	 * Sets the name of the parameter. The name should be of ther form "@IDENTIFIER".
	 * @param name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the name of the parameter.
	 * @return Parameter's name.
	 */
	public String getName() {
		return name;
	}
	
	public Object getValue() {
		return this.objectValue;
	}
	
	/**
	 * Sets the parameter DB type. If the parameter value is set by calling
	 * setValue(Object) then this property must also be set.
	 * @param dbType
	 */
	public void setDbType(int dbType) {
		this.dbType = dbType;
	}
	
	/**
	 * Returns the parameter DB type.
	 */
	public int getDbType() {
		return this.dbType;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(BigDecimal value) {
		this.valueType = BIGDECIMAL_VALUE;
		this.objectValue = value;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(boolean value) {
		this.valueType = BOOLEAN_VALUE;
		this.booleanValue = value;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(byte value) {
		this.valueType = BYTE_VALUE;
		this.longValue = value;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(DateTime value) {
		this.valueType = DATE_VALUE;
		this.objectValue = convertToTimeStamp(value);
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(double value) {
		this.valueType = DOUBLE_VALUE;
		this.doubleValue = value;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(float value) {
		this.valueType = FLOAT_VALUE;
		this.floatValue = value;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(int value) {
		this.valueType = INT_VALUE;
		this.longValue = value;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(Object value) {
		this.valueType = OBJECT_VALUE;
		
		if (value instanceof DateTime) {
			this.objectValue = convertToTimeStamp((DateTime) value);
		} else {		
			this.objectValue = value;
		}
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(short value) {
		this.valueType = SHORT_VALUE;
		this.longValue = value;
	}

	/**
	 * Sets the parameter value.
	 * @param value
	 */
	public void setValue(String value) {
		this.valueType = STRING_VALUE;
		this.objectValue = value;
	}

	public void setSize(int size) {
		// TODO
	}
	
	public int getSize() {
		// TODO
		return 0;
	}
	
	/**
	 * Sets the parameter direction
	 * @param direction
	 */
	public void setDirection(int direction) {
		this.direction = direction;
	}

	public int getDirection() {
		return direction;
	}
	
	// Sets the parameter value in the prepared statement. The parameter
	// position is given by "index".
	public void set(CallableStatement cstmt, int index) throws SQLException {
	    if (direction == ADOParameterDirection.Output) {
			cstmt.registerOutParameter(index, this.dbType);
		} else {
		    set((PreparedStatement) cstmt, index);
		}
	}
	
	public void setObjectValue(PreparedStatement pstmt, int index) throws SQLException {
	    if (objectValue instanceof Timestamp) {
            setTimeStamp(pstmt, index, objectValue);
        } else if (objectValue != null) {
            Connection conn = pstmt.getConnection();

            // If binary -> create a temporary BLOB to write the byte[]
            if ((dbType == Types.BINARY || dbType == Types.BLOB) && (objectValue instanceof byte[])) {
                // Create blob
                blob = new TemporaryBlob(conn, conn.createBlob());

                // Prepare to write
                OutputStream os = blob.getVal().setBinaryStream(1);

                // Write to blob
                try {
                    os.write((byte[]) objectValue);
                    os.flush();
                    os.close();
                } catch (Throwable e) {
                    throw new SQLException("Error Writing Binary Data.", e);
                }
                // Set blob parameter
                pstmt.setBlob(index, blob.getVal());
            } else {
                // Use CLOB to large objects
                if ((objectValue instanceof String) && ((String) objectValue).length() > 4000) {
                    // Create clob
                    clob = new TemporaryClob(conn, conn.createClob());
                    java.io.Writer os = clob.getVal().setCharacterStream(1);
                    try {
                        os.write((String) objectValue);
                        os.flush();
                        os.close();
                    } catch (Throwable e) {
                        throw new SQLException("Error Writing Binary Data.", e);
                    }

                    // Set clob parameter
                    pstmt.setClob(index, clob.getVal());
                } else if ((objectValue instanceof String) && (dbType == Types.NVARCHAR)) {
                    pstmt.setNString(index, (String) objectValue);
                } else {
                    pstmt.setObject(index, objectValue, dbType);
                }
            }
        } else {
            pstmt.setNull(index, dbType);
        }
	}
	
	public void set(PreparedStatement pstmt, int index) throws SQLException {
	    
		switch (valueType) {
		case BIGDECIMAL_VALUE:
			pstmt.setBigDecimal(index, (BigDecimal) objectValue);
			break;

		case BOOLEAN_VALUE:
			pstmt.setBoolean(index, booleanValue);
			break;

		case BYTE_VALUE:
			pstmt.setByte(index, (byte) longValue);
			break;

		case DATE_VALUE:
		    setTimeStamp(pstmt, index, objectValue);
		    break;

		case DOUBLE_VALUE:
			pstmt.setDouble(index, doubleValue);
			break;

		case FLOAT_VALUE:
			pstmt.setFloat(index, floatValue);
			break;

		case INT_VALUE:
			pstmt.setInt(index, (int) longValue);
			break;

		case LONG_VALUE:
			pstmt.setLong(index, longValue);
			break;

		case OBJECT_VALUE:
		    setObjectValue(pstmt, index);
			break;

		case SHORT_VALUE:
			pstmt.setShort(index, (short) longValue);
			break;

		case STRING_VALUE:
			if (dbType == Types.NVARCHAR) {
				pstmt.setNString(index, (String) objectValue);
			} else {
				pstmt.setString(index, (String) objectValue);
			}
			break;	
		}		
	}
	
	/**
	 * Frees any temporary Blob or Clob generated in this parameter
	 */
	public void freeTemporaryLobs() throws SQLException {
	    if (blob != null) {
            try {
                blob.dispose();
            } catch (RuntimeException e) {
                OSTrace.exception(e);
                throw e;
            }

            blob = null;
        }       
        if (clob != null) {
            try {
                clob.dispose();
            } catch (RuntimeException e) {
                OSTrace.exception(e);
                throw e;
            }

            clob = null;
        }
	}
		
	public String toString() {
		String val = null;
		switch (valueType) {
		case BIGDECIMAL_VALUE:
		case DATE_VALUE:
		case OBJECT_VALUE:
		case STRING_VALUE:
			if (objectValue == null) {
				val = "null";
			} else {
				val = objectValue.toString();
			}
			break;

		case BOOLEAN_VALUE:
			val = booleanValue ? "true" : "false";
			break;

		case BYTE_VALUE:
		case INT_VALUE:
		case LONG_VALUE:
		case SHORT_VALUE:
			val = String.valueOf(longValue);
			break;

		case DOUBLE_VALUE:
		case FLOAT_VALUE:
			val = String.valueOf(doubleValue);
			break;
		}

		return name + "='" + val + "'";
	}
	
	@Override
    public void dispose() {
        try {
            freeTemporaryLobs();
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }
	
	public boolean isResultSetParameter() {
	    return isResultSetParameter;
	}
	
	public void setParameterAsResultSetParameter() {
	    isResultSetParameter = true;
	}
}
