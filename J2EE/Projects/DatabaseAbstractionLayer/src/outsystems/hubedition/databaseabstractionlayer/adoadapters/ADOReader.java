/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.hubedition.databaseabstractionlayer.adoadapters;

import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Statement;
import java.text.ParseException;

import outsystems.hubedition.util.ConvertUtils;
import outsystems.hubedition.util.DateTime;
import outsystems.hubedition.util.OSResultSet;
import outsystems.runtimecommon.OSTrace;

public class ADOReader implements OSResultSet {
	OSResultSet parentResultSet;

	protected ResultSet resultSet;
	protected ADOCommand command;
	Statement statement;
		
	public ADOReader(ResultSet resultSet, Statement statement) {
	    this.resultSet = resultSet;
	    this.statement = statement;
	}
	
	public ResultSet getResultSet() {
		return resultSet;
	}

	@Override
	public boolean next() throws SQLException {
		return resultSet.next();
	}
	
	public String getName(int index) throws SQLException {
		return resultSet.getMetaData().getColumnName(index);
	}
	
	@Override
	public Statement getStatement() throws SQLException {
		return statement;
	}

	@Override
	public int getFieldCount() throws SQLException {
		return resultSet.getMetaData().getColumnCount();
	}		
	
	@Override
	public String getString(int i) throws SQLException {
		Object obj = getObject( i);
		if ( obj != null)
			return obj.toString();
		return (String)obj;
	}
	
	@Override
	public String getString(String string) throws SQLException {
		Object obj = getObject( string);
		if ( obj != null)
			return obj.toString();
		return (String)obj;
	}

	@Override
	public Object getObject(int i) throws SQLException {
		return getObject( resultSet.getObject(i));
	}
	
	@Override
	public Object getObject(String string) throws SQLException {
		return getObject( resultSet.getObject(string));
	}
	
	public Object getObject(Object result) throws SQLException {
        // verify CLOB's and BLOB's and try to extract String/byte[] values
        if (result instanceof Clob) {
            try {
                return readClob((Clob) result);
            } catch (IOException exception) { 
            	throw new SQLException(exception);
            }
        } else if (result instanceof Blob) {
            try {
                return readBlob((Blob) result);
            } catch (IOException exception) { 
            	throw new SQLException(exception);
            }
        } else if (result instanceof java.sql.Date){
            return new DateTime(((java.sql.Date) result));
        } else if (result instanceof java.sql.Timestamp) {
            return new DateTime( (java.sql.Timestamp) result);
        } else if (result instanceof SQLXML) {
        	try {
                return readSQLXML((SQLXML) result);
            } catch (IOException exception) { 
            	throw new SQLException(exception);
            }
        }

        return result;

	}

    public byte[] readBlob (Object obj) throws SQLException, IOException {
        Blob blob = (Blob)obj;

        // Read a the blob stream. ReadBytes only returns 86 bytes
        InputStream is = blob.getBinaryStream();
        int blobIndex = 0;
        byte[] result= new byte[(int)blob.length()];
        int readSize;

        // Read blob:
        int readBytes = 0;

        while (blobIndex < result.length) {
            //Avoid index Out of Bounds when trying to read more than available - 11g driver over 10g database
            readSize = Math.min(1024, result.length - blobIndex);
            readBytes = is.read( result, blobIndex, readSize);
            blobIndex += readBytes;
        }

        return result;
    }

    public String readClob(Object obj) throws SQLException, IOException {
        Clob clob = (Clob) obj;

        // Read a the blob stream. ReadBytes only returns 86 bytes
        StringBuilder clobBuffer = new StringBuilder();
        Reader reader = clob.getCharacterStream();

        // Read the data and append it to the clobBuffer
        // Uses a 1024 character buffer
        char[] buffer = new char[1024];
        int readCount;

        while ((readCount = reader.read(buffer)) != -1) {
            clobBuffer.append(buffer, 0, readCount);
        }

        return clobBuffer.toString();
    }
    
    public String readSQLXML(Object obj) throws SQLException, IOException {
        SQLXML xml = (SQLXML) obj;

        // Read the xml stream. 
        StringBuilder xmlBuffer = new StringBuilder();
        Reader reader = xml.getCharacterStream();

        // Read the data and append it to the clobBuffer
        // Uses a 1024 character buffer
        char[] buffer = new char[1024];
        int readCount;

        while ((readCount = reader.read(buffer)) != -1) {
        	xmlBuffer.append(buffer, 0, readCount);
        }

        return xmlBuffer.toString();
    }
		
	@Override
	public int getInt(int i) throws SQLException {
		return resultSet.getInt( i);
	}
	
	@Override
	public int getInt(String string) throws SQLException {
		return resultSet.getInt( string);
	}
	
	@Override
	public boolean getBoolean(int i) throws SQLException {
		try {
			return ConvertUtils.toBoolean(resultSet.getObject(i));
		} catch (ParseException e) {
			throw new SQLException(e);
		}
	}
	
	@Override
	public boolean getBoolean(String string) throws SQLException {
		try {
			return ConvertUtils.toBoolean(resultSet.getObject(string));
		} catch (ParseException e) {
			throw new SQLException(e);
		}
	}
	
	@Override
	public DateTime getDate(String string) throws SQLException {
		return (DateTime) getObject( string);
	}	
	
	@Override
	public DateTime getDate(int i) throws SQLException {
		return (DateTime) getObject( i);
	}

	@Override
	public byte getByte(String string) throws SQLException {
		return resultSet.getByte( string);
	}

	@Override
	public byte getByte(int i) throws SQLException {
		return resultSet.getByte( i);
	}

	@Override
	public byte[] getBytes(String string) throws SQLException {
		return (byte[])getObject( string);
	}

	@Override
	public byte[] getBytes(int i) throws SQLException {
		return (byte[])getObject(i);
	}

	@Override
	public long getBytes(int i, long fieldOffset, byte[] buffer, int bufferOffset, int length) throws SQLException {
	    if ((i < 1) || (i > getFieldCount())) {
	        throw new IndexOutOfBoundsException();
	    }

	    Blob blob = (Blob) resultSet.getObject(i);
	    
	    if (buffer == null) {
	        return blob.length();
	    } else {
	        byte[] readBytes = blob.getBytes(fieldOffset + 1, length);
	        System.arraycopy(readBytes, 0, buffer, bufferOffset, length);
	        return Math.min(0, blob.length() - length);
	    }
	}

	@Override
	public BigDecimal getBigDecimal(String string) throws SQLException {
		return resultSet.getBigDecimal( string);
	}

	@Override
	public BigDecimal getBigDecimal(int i) throws SQLException {
		return resultSet.getBigDecimal( i);
	}

	@Override
	public short getShort(String string) throws SQLException {
		return resultSet.getShort( string);
	}

	@Override
	public short getShort(int i) throws SQLException {
		return resultSet.getShort( i);
	}

	@Override
	public long getLong(String string) throws SQLException {
		return resultSet.getLong( string);
	}

	@Override
	public long getLong(int i) throws SQLException {
		return resultSet.getLong( i);
	}	

	@Override
	public float getFloat(String string) throws SQLException {
		return resultSet.getFloat( string);
	}

	@Override
	public float getFloat(int i) throws SQLException {
		return resultSet.getFloat( i);
	}

	@Override
	public double getDouble(String string) throws SQLException {
		return resultSet.getDouble( string);
	}

	@Override
	public double getDouble(int i) throws SQLException {
		return resultSet.getDouble( i);
	}

	@Override
	public void close() throws SQLException {
		try {
			try {
			    if (resultSet != null) {
				    resultSet.close();
                }
			} finally {			    
    			if (statement != null) {
    				statement.close();
    			}
    			if (parentResultSet != null) {
    				parentResultSet.close();
    			}
			}
		} finally {
			resultSet = null;
			statement = null;
			parentResultSet = null;
		}
	}
	
	@Override
	public void dispose() {
		try {
			close();
		} catch (SQLException e) {
		}
	}
	
	@Override
	public boolean isClosed() {
		return resultSet == null;
	}

}