/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.servertests.databaseprovider.framework;

import java.io.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.platform.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.DatabasePluginProvider;


public abstract class BaseAgnosticDatabaseProviderTestConfiguration<TDatabaseProvider extends IDatabaseProvider, TDatabaseProviderTestCase extends IDatabaseProviderTestCase<TDatabaseProvider>> extends BaseDatabaseProviderTestConfiguration<TDatabaseProvider, TDatabaseProviderTestCase> implements IGenericObject {
    
    // Plugins are loaded relative to AppBase so that they work on the developer machine and on regressions
    private static final <TDatabaseProvider extends IDatabaseProvider, TDatabaseProviderTestCase extends IDatabaseProviderTestCase<TDatabaseProvider>> DatabasePluginProvider<TDatabaseProvider> getPluginProviderField(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseProviderTestCase> classTypeArg_TDatabaseProviderTestCase) {
        BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler<TDatabaseProvider, TDatabaseProviderTestCase> staticsHandler = staticInitBaseAgnosticDatabaseProviderTestConfiguration(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
        return staticsHandler.pluginProviderField;
    }
    
    private static final <TDatabaseProvider extends IDatabaseProvider, TDatabaseProviderTestCase extends IDatabaseProviderTestCase<TDatabaseProvider>> void setPluginProviderField(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseProviderTestCase> classTypeArg_TDatabaseProviderTestCase, DatabasePluginProvider<TDatabaseProvider> value) {
        BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler<TDatabaseProvider, TDatabaseProviderTestCase> staticsHandler = staticInitBaseAgnosticDatabaseProviderTestConfiguration(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
        staticsHandler.pluginProviderField = value;
    }
    
    
    protected Iterable<TDatabaseProvider> getProvidersToTest()
    {
        return getPluginProviderField(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase).getImplementations();
    }
    
    public BaseAgnosticDatabaseProviderTestConfiguration(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseProviderTestCase> classTypeArg_TDatabaseProviderTestCase) {
        super(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
        instanceInitBaseAgnosticDatabaseProviderTestConfiguration(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
    }
    
    public TypeInformation<?> getTypeInformation() {
        return TypeInformation.<BaseAgnosticDatabaseProviderTestConfiguration<TDatabaseProvider, TDatabaseProviderTestCase>>get(BaseAgnosticDatabaseProviderTestConfiguration.class, classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
    }
    
    private final void instanceInitBaseAgnosticDatabaseProviderTestConfiguration(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseProviderTestCase> classTypeArg_TDatabaseProviderTestCase) {
    }
    protected static <TDatabaseProvider extends IDatabaseProvider, TDatabaseProviderTestCase extends IDatabaseProviderTestCase<TDatabaseProvider>> BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler<TDatabaseProvider, TDatabaseProviderTestCase> staticInitBaseAgnosticDatabaseProviderTestConfiguration(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseProviderTestCase> classTypeArg_TDatabaseProviderTestCase) {
        staticInitBaseDatabaseProviderTestConfiguration(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
        @SuppressWarnings("unchecked")
        BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler<TDatabaseProvider, TDatabaseProviderTestCase> result = StaticsHandlerFactory.get(BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler.class, BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler.staticsHandlerMap, classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
        
        if (!result.isInitialized()) {
            synchronized (result) {
                if (result.isNew()) {
                    result.startInitialization();
                    try {
                        result.staticInit(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseProviderTestCase);
                    } finally {
                        result.finishInitialization();
                    }
                }
            }
        }
        
        return result;
    }
    private static final class BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler<TDatabaseProvider extends IDatabaseProvider, TDatabaseProviderTestCase extends IDatabaseProviderTestCase<TDatabaseProvider>> extends StaticsHandler {
        @SuppressWarnings("rawtypes")
        public static final java.util.Map<TypeArguments, BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler> staticsHandlerMap = new java.util.HashMap<TypeArguments, BaseAgnosticDatabaseProviderTestConfigurationStaticsHandler>();
        public DatabasePluginProvider<TDatabaseProvider> pluginProviderField;
        public void staticInit(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseProviderTestCase> classTypeArg_TDatabaseProviderTestCase) {
            pluginProviderField = new DatabasePluginProvider<TDatabaseProvider>(classTypeArg_TDatabaseProvider, new File(FileUtils.combine(FileUtils.combine("."+ File.separatorChar, "plugins"), "database")));
        }
    }
    
}
