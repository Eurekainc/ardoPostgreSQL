/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.servertests.databaseprovider.framework;

import java.sql.*;
import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.executionservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOCommand;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOTransaction;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ConnectionUtils;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.executionservice.IExecutionService;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.IProviderProperties;
import outsystems.hubedition.extensibility.data.transactionservice.ITransactionService;


public abstract class BaseDatabaseProviderTest extends DashboardTest {
    public static final TypeInformation<BaseDatabaseProviderTest> TypeInfo = TypeInformation.get(BaseDatabaseProviderTest.class);
    public abstract static class BaseDatabaseProviderTestCase<TDatabaseProvider extends IDatabaseProvider, TDatabaseServices extends IDatabaseServices> implements IDatabaseProviderTestCase<TDatabaseProvider>, IGenericObject {
        private String _name;
        private boolean _runWithBootstrapServices;
        private TDatabaseServices _runtimeServices;
        private TDatabaseServices _bootstrapServices;
        private Iterable<String> _bootstrapScripts;
        private Iterable<String> _teardownScripts;
        private boolean _executeScriptsWithoutTransaction;
        
        public final String getName()
        {
            return _name;
        }
        
        public final void setName(String value)
        {
            _name = value;
        }
        
        public String toString() {
            return getName();
        }
        
        public final boolean isRunWithBootstrapServices()
        {
            return _runWithBootstrapServices;
        }
        
        protected final void setRunWithBootstrapServices(boolean value)
        {
            _runWithBootstrapServices = value;
        }
        
        public final TDatabaseServices getRuntimeServices()
        {
            return _runtimeServices;
        }
        
        protected final void setRuntimeServices(TDatabaseServices value)
        {
            _runtimeServices = value;
        }
        
        public final TDatabaseServices getServices()
        {
            return isRunWithBootstrapServices() ? getBootstrapServices() : getRuntimeServices();
        }
        
        public final TDatabaseServices getBootstrapServices()
        {
            return _bootstrapServices;
        }
        
        protected final void setBootstrapServices(TDatabaseServices value)
        {
            _bootstrapServices = value;
        }
        
        public final Iterable<String> getBootstrapScripts()
        {
            return _bootstrapScripts;
        }
        
        public final void setBootstrapScripts(Iterable<String> value)
        {
            _bootstrapScripts = value;
        }
        
        public final Iterable<String> getTeardownScripts()
        {
            return _teardownScripts;
        }
        
        public final void setTeardownScripts(Iterable<String> value)
        {
            _teardownScripts = value;
        }
        
        public final boolean isExecuteScriptsWithoutTransaction()
        {
            return _executeScriptsWithoutTransaction;
        }
        
        public final void setExecuteScriptsWithoutTransaction(boolean value)
        {
            _executeScriptsWithoutTransaction = value;
        }
        
        private final void executeScripts(Iterable<String> scripts, boolean throwExceptions) throws Exception {
            if (scripts == null)
            {
                return;
            }
            SQLExecutor sqlExecutor = new SQLExecutor(getBootstrapServices());
            List<String> errors = new ArrayList<String>();
            java.util.Iterator<String> sqlIter = (scripts).iterator();
            try {
                String sql;
                while (sqlIter.hasNext()) {
                    sql = sqlIter.next();
                    try {
                        if (isExecuteScriptsWithoutTransaction())
                        {
                            sqlExecutor.executeNonQueryWithoutTransaction(sql);
                        }
                        else
                        {
                            sqlExecutor.executeNonQuery(sql);
                        }
                    }catch (Exception exceptionToHandle) {
                        exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
                        
                        {
                            Exception e = (Exception)exceptionToHandle;
                            errors.add(ExceptionUtils.getExceptionTypeOrMessage(e));
                        }
                    }
                }
            } finally {
                CollectionUtils.dispose(sqlIter);
            }
            if (throwExceptions && errors.size() > 0)
            {
                throw new Exception("Error executing scripts for provider '" + getBootstrapServices().getDatabaseConfiguration().getDatabaseProvider().getProperties().getDisplayName() + "' with connection string '" + getBootstrapServices().getDatabaseConfiguration().getConnectionString() + "':" + StringUtils.newLine + "" + StringUtils.join(StringUtils.newLine, LinqMethods.toArray(TypeInformation.String, errors)));
            }
        }
        
        public final void executeTeardown() throws Exception {
            try {
                executeScripts(getTeardownScripts(), false);
            }catch (Exception exceptionToHandle) {
                exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
                
                {
                    Exception e = (Exception)exceptionToHandle;
                    throw new Exception("Error executing teardown scripts:" + StringUtils.newLine + ExceptionUtils.getExceptionTypeOrMessage(e));
                }
            }
        }
        
        public final void executeBootstrap() throws Exception {
            try {
                executeScripts(getBootstrapScripts(), true);
            }catch (Exception exceptionToHandle) {
                exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
                
                {
                    Exception bootstrapException = (Exception)exceptionToHandle;
                    try {
                        executeTeardown();
                    }catch (Exception exceptionToHandle1) {
                        exceptionToHandle1 = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle1);
                        
                        {
                            Exception teardownException = (Exception)exceptionToHandle1;
                            throw new Exception("Error executing bootstrap scripts:" + StringUtils.newLine + ExceptionUtils.getExceptionTypeOrMessage(bootstrapException) + StringUtils.newLine + 
                                "Automatically tried to recover by executing teardown scripts, but got an error:" + 
                                StringUtils.newLine + 
                                ExceptionUtils.getExceptionTypeOrMessage(teardownException));
                        }
                    }
                    throw new Exception("Error executing bootstrap scripts:" + StringUtils.newLine + ExceptionUtils.getExceptionTypeOrMessage(bootstrapException));
                }
            }
        }
        
        public abstract void initializeServices(TDatabaseProvider provider, IRuntimeDatabaseConfiguration runtimeConfiguration, IRuntimeDatabaseConfiguration bootstrapConfiguration, boolean runWithBootstrapServices) throws UnsupportedOperationException;
        public BaseDatabaseProviderTestCase(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseServices> classTypeArg_TDatabaseServices) {
            instanceInitBaseDatabaseProviderTestCase(classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseServices);
        }
        
        public TypeInformation<?> getTypeInformation() {
            return TypeInformation.<BaseDatabaseProviderTestCase<TDatabaseProvider, TDatabaseServices>>get(BaseDatabaseProviderTestCase.class, classTypeArg_TDatabaseProvider, classTypeArg_TDatabaseServices);
        }
        
        private final void instanceInitBaseDatabaseProviderTestCase(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseServices> classTypeArg_TDatabaseServices) {
            this.classTypeArg_TDatabaseProvider = classTypeArg_TDatabaseProvider;
            this.classTypeArg_TDatabaseServices = classTypeArg_TDatabaseServices;
            _runtimeServices = ClassUtils.getDefaultValue(classTypeArg_TDatabaseServices);
            _bootstrapServices = ClassUtils.getDefaultValue(classTypeArg_TDatabaseServices);
        }
        protected static <TDatabaseProvider extends IDatabaseProvider, TDatabaseServices extends IDatabaseServices> void staticInitBaseDatabaseProviderTestCase(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TDatabaseServices> classTypeArg_TDatabaseServices) {
        }
        protected TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider;
        protected TypeInformation<TDatabaseServices> classTypeArg_TDatabaseServices;
    }
    
    protected static class SQLExecutor {
        public static final TypeInformation<SQLExecutor> TypeInfo = TypeInformation.get(SQLExecutor.class);
        private IDatabaseServices services;
        
        public SQLExecutor(IDatabaseServices services){
            this.services = services;
        }
        
        public final Scalar executeScalar(String sql, Object ... parameters) throws Exception {
            return executeScalar(sql, 
                new Func.Func2<Integer, Class<?>, String>() {
                    protected String executeImpl(Integer arg1, Class<?> arg2) throws Exception {
                        return getParameterName(arg1, arg2);
                    }
                }, parameters);
        }
        
        public final Scalar executeScalar(String sql, Func.Func2<Integer, Class<?>, String> getParamName, Object ... parameters) throws Exception {
            final RefParmHolder<IExecutionService> executionService = new RefParmHolder<IExecutionService>(services.getExecutionService());
            Object value = executeInTransactionAndRollback(sql, 
                new Func.Func1<ADOCommand, Object>() {
                    protected Object executeImpl(ADOCommand cmd) throws Exception
                    {
                        return executionService.getVal().executeScalar(cmd);
                    }
                }, getParamName,
                parameters);
            return new Scalar(executionService.getVal(), value);
        }
        
        public final Object executeNonQueryWithoutTransaction(String sql, Object ... parameters) throws Exception {
            final RefParmHolder<IExecutionService> executionService = new RefParmHolder<IExecutionService>(services.getExecutionService());
            return executeInConnection(sql, 
                new Func.Func1<ADOCommand, Object>() {
                    protected Object executeImpl(ADOCommand cmd) throws Exception
                    {
                        return Integer.valueOf(executionService.getVal().executeNonQuery(cmd));
                    }
                }, 
                new Func.Func2<Integer, Class<?>, String>() {
                    protected String executeImpl(Integer arg1, Class<?> arg2) throws Exception {
                        return getParameterName(arg1, arg2);
                    }
                },
                parameters);
        }
        
        public final Object executeNonQuery(String sql, Object ... parameters) throws Exception {
            final RefParmHolder<IExecutionService> executionService = new RefParmHolder<IExecutionService>(services.getExecutionService());
            return executeInTransactionAndCommit(sql, 
                new Func.Func1<ADOCommand, Object>() {
                    protected Object executeImpl(ADOCommand cmd) throws Exception
                    {
                        return Integer.valueOf(executionService.getVal().executeNonQuery(cmd));
                    }
                }, 
                new Func.Func2<Integer, Class<?>, String>() {
                    protected String executeImpl(Integer arg1, Class<?> arg2) throws Exception {
                        return getParameterName(arg1, arg2);
                    }
                },
                parameters);
        }
        
        public final void executeReader(String sql, final Action.Action1<OSResultSet> action, Object ... parameters) throws Exception {
            final RefParmHolder<IExecutionService> executionService = new RefParmHolder<IExecutionService>(services.getExecutionService());
            executeInTransactionAndRollback(sql, 
                new Func.Func1<ADOCommand, Object>() {
                    protected Object executeImpl(ADOCommand cmd) throws Exception
                    {
                        {
                            OSResultSet reader = executionService.getVal().executeReader(cmd);
                            try 
                            {
                                action.execute(reader);
                            }
                            finally {
                                if (reader!= null) {
                                    reader.dispose();
                                }
                            }
                        }
                        return null;
                    }
                },
                
                    new Func.Func2<Integer, Class<?>, String>() {
                        protected String executeImpl(Integer arg1, Class<?> arg2) throws Exception {
                            return getParameterName(arg1, arg2);
                        }
                    },
                parameters);
        }
        
        public final String getParameterName(int paramIndex, Class<?> paramType) {
            return services.getExecutionService().getParameterPrefix() + StringUtils.substring(paramType.getSimpleName(), 0, 2) + PARAM_NAME_PREFIX + paramIndex;
        }
        
        private final Object executeWithCommand(String sql, Func.Func1<ADOCommand, Object> action, Action.Action1<ADOTransaction> applyTrans, Func.Func2<Integer, Class<?>, String> getParamName, Object ... parameters) throws Exception {
            try {
                {
                    Connection conn = services.getTransactionService().createConnection();
                    try 
                    {
                        ADOTransaction tran = null;
                        boolean hasErrors = false;
                        try {
                            if (applyTrans != null)
                            {
                                tran = services.getTransactionService().createTransaction(conn);
                            }
                            {
                                ADOCommand cmd = tran != null ? services.getExecutionService().createCommand(tran, sql) : services.getExecutionService().createCommand(conn, sql);
                                try 
                                {
                                    for( int i = 0; i < parameters.length; i++)
                                    {
                                        Object param = parameters[i];
                                        int type = services.getExecutionService().convertToDbType(param.getClass());
                                        services.getExecutionService().createParameter(cmd, getParamName.execute(i, param.getClass()), type, param);
                                    }
                                    return action.execute(cmd);
                                }
                                finally {
                                    if (cmd!= null) {
                                        cmd.cleanUp();
                                    }
                                }
                            }
                        }catch (Exception exceptionToHandle) {
                            exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
                            
                            {
                                Exception e1 = (Exception)exceptionToHandle;
                                hasErrors = true;
                                if (e1 instanceof SQLException)
                                    throw (SQLException)e1;
                                if (e1 instanceof UnsupportedOperationException)
                                    throw (UnsupportedOperationException)e1;
                                if (e1 instanceof RuntimeException)
                                    throw (RuntimeException)e1;
                                return WrappedException.wrapExceptionIfNeeded(e1);
                            }
                        }
                         finally{
                            if (tran != null)
                            {
                                if (!hasErrors)
                                {
                                    applyTrans.execute(tran);
                                }
                                else
                                {
                                    tran.rollback();
                                }
                            }
                        }
                    }
                    finally {
                        if (conn!= null) {
                            ConnectionUtils.closeConnection(conn);
                        }
                    }
                }
            }catch (Exception exceptionToHandle1) {
                exceptionToHandle1 = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle1);
                
                {
                    Exception e = (Exception)exceptionToHandle1;
                    throw new Exception("Error executing the statement: " + sql + StringUtils.newLine + ExceptionUtils.getExceptionTypeOrMessage(e), e);
                }
            }
        }
        
        private final Object executeInTransactionAndCommit(String sql, Func.Func1<ADOCommand, Object> action, Func.Func2<Integer, Class<?>, String> getParamName, Object ... parameters) throws Exception {
            return executeWithCommand(sql, action, 
                new Action.Action1<ADOTransaction>() {
                    protected void executeImpl(ADOTransaction trans) throws Exception
                    {
                        trans.commit();
                    }
                }, getParamName, parameters);
        }
        
        private final Object executeInTransactionAndRollback(String sql, Func.Func1<ADOCommand, Object> action, Func.Func2<Integer, Class<?>, String> getParamName, Object ... parameters) throws Exception {
            return executeWithCommand(sql, action, 
                new Action.Action1<ADOTransaction>() {
                    protected void executeImpl(ADOTransaction trans) throws Exception
                    {
                        trans.rollback();
                    }
                }, getParamName, parameters);
        }
        
        private final Object executeInConnection(String sql, Func.Func1<ADOCommand, Object> action, Func.Func2<Integer, Class<?>, String> getParamName, Object ... parameters) throws Exception {
            return executeWithCommand(sql, action, null, getParamName, parameters);
        }
    }
    
    protected static class Scalar {
        public static final TypeInformation<Scalar> TypeInfo = TypeInformation.get(Scalar.class);
        private IExecutionService service;
        private Object value;
        
        public Scalar(IExecutionService service, Object value){
            this.service = service;
            this.value = value;
        }
        
        public final Object value() {
            return value;
        }
        
        public final Object runtimeValue() {
            return service.transformDatabaseToRuntimeValue(value());
        }
        
        public final <V> V value(final TypeInformation<V> methodTypeArg_V) throws Exception {
            return cast(methodTypeArg_V, value());
        }
        
        public final <V> V runtimeValue(final TypeInformation<V> methodTypeArg_V) throws Exception {
            return cast(methodTypeArg_V, runtimeValue());
        }
        
        private final <V> V cast(final TypeInformation<V> methodTypeArg_V, Object o) throws Exception {
            try {
                if ((o == null))
                {
                    if (!methodTypeArg_V.getTypeClass().equals(String.class))
                    {
                        return ClassUtils.getDefaultValue(methodTypeArg_V);
                    }
                    // Default value for string is "", not (null)
                    o = "";
                }
                return methodTypeArg_V.cast(ConvertUtils.changeType(o,methodTypeArg_V.getTypeClass()));
            }catch (Exception exceptionToHandle) {
                exceptionToHandle = WrappedException.unwrapExceptionIfNeeded(exceptionToHandle);
                
                {
                    Exception e = (Exception)exceptionToHandle;
                    throw new Exception("Error converting the result: " + o + StringUtils.newLine + ExceptionUtils.getExceptionTypeOrMessage(e), e);
                }
            }
        }
    }
    
    private static final String PARAM_NAME_PREFIX = "param";
}
