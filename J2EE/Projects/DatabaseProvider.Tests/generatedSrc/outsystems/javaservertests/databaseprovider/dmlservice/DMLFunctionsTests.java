/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.dmlservice;

import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import outsystems.common.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import outsystems.common.CommonConstants;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLFunctions;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLOperators;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.IterativeTestCase;
import outsystems.junit.framework.TestDetails;
import outsystems.runtimecommon.FormatInfoLogic;
import outsystems.runtimecommon.ScriptableBuiltInFunction;
import outsystems.servertests.databaseprovider.framework.BaseDatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTestCase;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class DMLFunctionsTests extends DMLTest {
    public static final TypeInformation<DMLFunctionsTests> TypeInfo = TypeInformation.get(DMLFunctionsTests.class);
    
    private static final String[] DATE_FORMATS = new String[] { "dd/MM/yyyy", "dd-MM-yyyy", "MM-dd-yyyy", "MM/dd/yyyy", CommonConstants.DefaultDateFormat, "yyyy/MM/dd" };
    
    private static final String DEFAULT_TIME_FORMAT = "HH:mm:ss";
    private static final String DEFAULT_DATE_FORMAT = CommonConstants.DefaultDateFormat;
    
    private static final String ERROR_MESSAGE_FORMAT = "Error executing function {0} with parameters: {1}. Executed SQL: {2}";
    
    private static <T> void assertValues(final TypeInformation<T> methodTypeArg_T, IDatabaseServices services, String funcName, String sqlFormat, Iterable<Object> paramsToTest, Func.Func1<Object, T> expectedConverter) throws Exception {
        SQLExecutor sqlExecutor = new SQLExecutor(services);
        java.util.Iterator<Object> valueIter = (paramsToTest).iterator();
        try {
            Object value;
            while (valueIter.hasNext()) {
                value = valueIter.next();
                T expected = expectedConverter.execute(value);
                String sql = getSql(sqlFormat, value, sqlExecutor);
                T result = executeScalar(methodTypeArg_T, sqlExecutor, sql, value);
                assertEqual(expected, result, StringUtils.format(ERROR_MESSAGE_FORMAT, new Object[] {funcName, getParameterValuesString(value), sql}));
            }
        } finally {
            CollectionUtils.dispose(valueIter);
        }
    }
    
    private static String getSql(String sqlFormat, Object value, final SQLExecutor sqlExecutor) {
        final RefParmHolderInteger i = new RefParmHolderInteger(0);
        return value.getClass().isArray() ? StringUtils.format(sqlFormat, LinqMethods.toArray(TypeInformation.Object, LinqMethods.select(Arrays.asList(((Object[]) value)), 
    new Func.Func1<Object, Object>() {
        protected Object executeImpl(Object o) throws Exception
        {
            return sqlExecutor.getParameterName(i.valPostIncr(), o.getClass());
        }
    }))) : StringUtils.format(sqlFormat, new Object[] {sqlExecutor.getParameterName(i.getVal(), value.getClass())});
    }
    
    private static <T> T executeScalar(final TypeInformation<T> methodTypeArg_T, SQLExecutor sqlExecutor, String sql, Object parameters) throws Exception {
        return (parameters.getClass().isArray() ? sqlExecutor.executeScalar(sql, (Object[]) parameters) : sqlExecutor.executeScalar(sql, parameters)).runtimeValue(methodTypeArg_T);
    }
    
    private static String getParameterValuesString(Object value) {
        return value.getClass().isArray() ? StringUtils.join(", ", LinqMethods.toArray(TypeInformation.String, LinqMethods.select(Arrays.asList(((Object[]) value)), 
    new Func.Func1<Object, String>() {
        protected String executeImpl(Object o) throws Exception
        {
            return o.toString();
        }
    }))) : value.toString();
    }
    
    private static <T> T getArgValue(final TypeInformation<T> methodTypeArg_T, Object objArray, int index) {
        return methodTypeArg_T.cast(((Object[]) objArray)[index]);
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testAbs(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.BigDecimal, databaseServices, "Abs",
            "SELECT " + databaseServices.getDMLService().getFunctions().abs("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { BigDecimal.valueOf(-1.44), BigDecimal.valueOf(4.21), BigDecimal.valueOf(0), BigDecimal.valueOf(-2), BigDecimal.valueOf(50) }),
            
                new Func.Func1<Object, BigDecimal>() {
                    protected BigDecimal executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.abs(ConvertUtils.toBigDecimal(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testRound(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.BigDecimal, databaseServices, "Round",
            "SELECT " + databaseServices.getDMLService().getFunctions().round("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { BigDecimal.valueOf(-2.145453), BigDecimal.valueOf(0), BigDecimal.valueOf(50), BigDecimal.valueOf(3.14) }),
            
                new Func.Func1<Object, BigDecimal>() {
                    protected BigDecimal executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.round(ConvertUtils.toBigDecimal(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testSqrt(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.BigDecimal, databaseServices, "Sqrt",
            "SELECT " + databaseServices.getDMLService().getFunctions().sqrt("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { BigDecimal.valueOf(0), BigDecimal.valueOf(1), BigDecimal.valueOf(2.25), BigDecimal.valueOf(9) }),
            
                new Func.Func1<Object, BigDecimal>() {
                    protected BigDecimal executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.sqrt(ConvertUtils.toBigDecimal(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTrunc(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.BigDecimal, databaseServices, "Trunc",
            "SELECT " + databaseServices.getDMLService().getFunctions().trunc("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { BigDecimal.valueOf(0), BigDecimal.valueOf(1), BigDecimal.valueOf(3.14), BigDecimal.valueOf(10.34563434) }),
            
                new Func.Func1<Object, BigDecimal>() {
                    protected BigDecimal executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.trunc(ConvertUtils.toBigDecimal(o));
                    }
                });
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testConcat(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "Concat",
            "SELECT " + databaseServices.getDMLService().getFunctions().concat("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { "Dave", "Lauper" }, new Object[] { "Out", "Systems" }, new Object[] { "First", "" }, new Object[] { "", "Last" }, new Object[] { "", "" } }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.concat(getArgValue(TypeInformation.String, o, 0), getArgValue(TypeInformation.String, o, 1));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testIndex(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Index",
            "SELECT " + databaseServices.getDMLService().getFunctions().index("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { "Test", "NotFound" }, new Object[] { "MyTest1 MyTest2", "Test" }, new Object[] { "", "NotFound" } }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.index(getArgValue(TypeInformation.String, o, 0), getArgValue(TypeInformation.String, o, 1));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testLength(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Length",
            "SELECT " + databaseServices.getDMLService().getFunctions().length("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "DaveLauper", "Test With Spaces", "" }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.length(o.toString());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testReplace(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "Replace",
            "SELECT " + databaseServices.getDMLService().getFunctions().replace("{0}", "{1}", "{2}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { "DaveLauper", "NotFound", "" }, new Object[] { "Test1Test2Test3", "Test", "0" }, new Object[] { "Test1Test2Test3", "3", "1" }, new Object[] { "Test1Test2Test3", "Test", "" } }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.replace(getArgValue(TypeInformation.String, o, 0), getArgValue(TypeInformation.String, o, 1), getArgValue(TypeInformation.String, o, 2));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testSubstr(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "Substr",
            "SELECT " + databaseServices.getDMLService().getFunctions().substr("{0}", "{1}", "{2}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { "DaveLauper", Integer.valueOf(0), Integer.valueOf(4) }, new Object[] { "DaveLauper", Integer.valueOf(4), Integer.valueOf(6) }, new Object[] { "DaveLauper", Integer.valueOf(4), Integer.valueOf(0) }, new Object[] { "DaveLauper", Integer.valueOf(10), Integer.valueOf(0) }, new Object[] { "DaveLauper", Integer.valueOf(0), Integer.valueOf(100) } }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.substr(getArgValue(TypeInformation.String, o, 0), getArgValue(TypeInformation.Integer, o, 1).intValue(), getArgValue(TypeInformation.Integer, o, 2).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testToLower(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "ToLower",
            "SELECT " + databaseServices.getDMLService().getFunctions().toLower("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "DaveLauper", "Test With Spaces", "" }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.toLower(o.toString());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testToUpper(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "ToUpper",
            "SELECT " + databaseServices.getDMLService().getFunctions().toUpper("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "DaveLauper", "Test With Spaces", "" }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.toUpper(o.toString());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTrim(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "Trim",
            "SELECT " + databaseServices.getDMLService().getFunctions().trim("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.trim(o.toString());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTrimEnd(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "TrimEnd",
            "SELECT " + databaseServices.getDMLService().getFunctions().trimEnd("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.trimEnd(o.toString());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTrimStart(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "TrimStart",
            "SELECT " + databaseServices.getDMLService().getFunctions().trimStart("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.trimStart(o.toString());
                    }
                });
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testAddDays(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddDays",
            "SELECT " + databaseServices.getDMLService().getFunctions().addDays("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.addDays(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.Integer, o, 1).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testAddHours(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddHours",
            "SELECT " + databaseServices.getDMLService().getFunctions().addHours("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.addHours(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.Integer, o, 1).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testAddMinutes(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddMinutes",
            "SELECT " + databaseServices.getDMLService().getFunctions().addMinutes("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.addMinutes(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.Integer, o, 1).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testAddMonths(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddMonths",
            "SELECT " + databaseServices.getDMLService().getFunctions().addMonths("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) }, new Object[] { new DateTime(2012, 1, 30, 1, 2, 3), Integer.valueOf(1) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.addMonths(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.Integer, o, 1).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testAddSeconds(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddSeconds",
            "SELECT " + databaseServices.getDMLService().getFunctions().addSeconds("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.addSeconds(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.Integer, o, 1).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testAddYears(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddYears",
            "SELECT " + databaseServices.getDMLService().getFunctions().addYears("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) }, new Object[] { new DateTime(2012, 2, 29, 1, 2, 3), Integer.valueOf(1) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.addYears(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.Integer, o, 1).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testBuildDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "BuildDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().buildDateTime("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2100, 1, 1), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(1900, 1, 1), new DateTime(1900, 1, 1, 10, 11, 12) }, new Object[] { new DateTime(2100, 1, 1), new DateTime(1900, 1, 1, 10, 11, 12) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.buildDateTime(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.get(DateTime.class), o, 1));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDay(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Day",
            "SELECT " + databaseServices.getDMLService().getFunctions().day("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.day(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDayOfWeek(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "DayOfWeek",
            "SELECT " + databaseServices.getDMLService().getFunctions().dayOfWeek("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.dayOfWeek(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDiffDays(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "DiffDays",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffDays("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.diffDays(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.get(DateTime.class), o, 1));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDiffHours(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "DiffHours",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffHours("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.diffHours(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.get(DateTime.class), o, 1));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDiffMinutes(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "DiffMinutes",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffMinutes("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.diffMinutes(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.get(DateTime.class), o, 1));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDiffSeconds(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "DiffSeconds",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffSeconds("{0}", "{1}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.diffSeconds(getArgValue(TypeInformation.get(DateTime.class), o, 0), getArgValue(TypeInformation.get(DateTime.class), o, 1));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testHour(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Hour",
            "SELECT " + databaseServices.getDMLService().getFunctions().hour("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.hour(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testMinute(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Minute",
            "SELECT " + databaseServices.getDMLService().getFunctions().minute("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.minute(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testMonth(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Month",
            "SELECT " + databaseServices.getDMLService().getFunctions().month("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.month(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testNewDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "NewDate",
            "SELECT " + databaseServices.getDMLService().getFunctions().newDate("{0}", "{1}", "{2}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1900), Integer.valueOf(1), Integer.valueOf(1) }, new Object[] { Integer.valueOf(2012), Integer.valueOf(2), Integer.valueOf(29) }, new Object[] { Integer.valueOf(2100), Integer.valueOf(1), Integer.valueOf(31) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.newDate(getArgValue(TypeInformation.Integer, o, 0).intValue(), getArgValue(TypeInformation.Integer, o, 1).intValue(), getArgValue(TypeInformation.Integer, o, 2).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testNewDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "NewDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().newDateTime("{0}", "{1}", "{2}", "{3}", "{4}", "{5}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1900), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) }, new Object[] { Integer.valueOf(2012), Integer.valueOf(2), Integer.valueOf(29), Integer.valueOf(23), Integer.valueOf(59), Integer.valueOf(59) }, new Object[] { Integer.valueOf(2100), Integer.valueOf(1), Integer.valueOf(31), Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.newDateTime(getArgValue(TypeInformation.Integer, o, 0).intValue(), getArgValue(TypeInformation.Integer, o, 1).intValue(), getArgValue(TypeInformation.Integer, o, 2).intValue(), getArgValue(TypeInformation.Integer, o, 3).intValue(), getArgValue(TypeInformation.Integer, o, 4).intValue(), getArgValue(TypeInformation.Integer, o, 5).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testNewTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "NewTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().newTime("{0}", "{1}", "{2}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new Object[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) }, new Object[] { Integer.valueOf(23), Integer.valueOf(59), Integer.valueOf(59) }, new Object[] { Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) } }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.newTime(getArgValue(TypeInformation.Integer, o, 0).intValue(), getArgValue(TypeInformation.Integer, o, 1).intValue(), getArgValue(TypeInformation.Integer, o, 2).intValue());
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testSecond(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Second",
            "SELECT " + databaseServices.getDMLService().getFunctions().second("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.second(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testYear(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "Year",
            "SELECT " + databaseServices.getDMLService().getFunctions().year("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.year(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testBooleanToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "BooleanToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().booleanToInteger("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.booleanToInteger(BooleanUtils.toBoolean( o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testBooleanToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "BooleanToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().booleanToText("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.booleanToText(BooleanUtils.toBoolean( o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDateTimeToDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "DateTimeToDate",
            "SELECT " + databaseServices.getDMLService().getFunctions().dateTimeToDate("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.dateTimeToDate(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDateTimeToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                assertValues(TypeInformation.String, databaseServices, "DateTimeToText",
                    "SELECT " + databaseServices.getDMLService().getFunctions().dateTimeToText("{0}", dateFormat.getVal()) + " FROM DUMMY",
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
                    
                        new Func.Func1<Object, String>() {
                            protected String executeImpl(Object o) throws Exception
                            {
                                changeDateFormat(dateFormat.getVal());
                                return ScriptableBuiltInFunction.dateTimeToText(ConvertUtils.toDateTime(o));
                            }
                        });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDateTimeToTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "DateTimeToTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().dateTimeToTime("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.dateTimeToTime(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDateToDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "DateToDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().dateToDateTime("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1), new DateTime(2012, 2, 29), new DateTime(2100, 1, 31) }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.dateToDateTime(ConvertUtils.toDateTime(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDateToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                assertValues(TypeInformation.String, databaseServices, "DateToText",
                    "SELECT " + databaseServices.getDMLService().getFunctions().dateToText("{0}", dateFormat.getVal()) + " FROM DUMMY",
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1), new DateTime(2012, 2, 29), new DateTime(2100, 1, 31) }),
                    
                        new Func.Func1<Object, String>() {
                            protected String executeImpl(Object o) throws Exception
                            {
                                changeDateFormat(dateFormat.getVal());
                                return ScriptableBuiltInFunction.dateToText(ConvertUtils.toDateTime(o));
                            }
                        });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDecimalToBoolean(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Boolean, databaseServices, "DecimalToBoolean",
            "SELECT " + databaseServices.getDMLService().getFunctions().decimalToBoolean("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { BigDecimal.valueOf(-1.44), BigDecimal.valueOf(-1), BigDecimal.valueOf(0), BigDecimal.valueOf(1), BigDecimal.valueOf(50), BigDecimal.valueOf(100.123456) }),
            
                new Func.Func1<Object, Boolean>() {
                    protected Boolean executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.decimalToBoolean(ConvertUtils.toBigDecimal(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDecimalToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "DecimalToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().decimalToInteger("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { BigDecimal.valueOf(-1.44), BigDecimal.valueOf(-1), BigDecimal.valueOf(0), BigDecimal.valueOf(1), BigDecimal.valueOf(50), BigDecimal.valueOf(100.123456) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.decimalToInteger(ConvertUtils.toBigDecimal(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDecimalToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "DecimalToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().decimalToText("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { BigDecimal.valueOf(-1.44), BigDecimal.valueOf(-1), BigDecimal.valueOf(0), BigDecimal.valueOf(1), BigDecimal.valueOf(50), BigDecimal.valueOf(100.123456) }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.decimalToText(ConvertUtils.toBigDecimal(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testEntityRefIntegerToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "EntityRefIntegerToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().entityRefIntegerToInteger("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(100), Integer.valueOf(1000) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.entityRefIntegerToInteger(ConvertUtils.toInt(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testEntityRefTextToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "EntityRefTextToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().entityRefTextToText("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "", "abc", "1", GUID.newGuid().toString() }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.entityRefTextToText(ConvertUtils.toString(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testIntegerToBoolean(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Boolean, databaseServices, "IntegerToBoolean",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToBoolean("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { Integer.valueOf(-10), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            
                new Func.Func1<Object, Boolean>() {
                    protected Boolean executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.integerToBoolean(ConvertUtils.toInt(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testIntegerToDecimal(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.BigDecimal, databaseServices, "IntegerToDecimal",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToDecimal("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { Integer.valueOf(-10), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            
                new Func.Func1<Object, BigDecimal>() {
                    protected BigDecimal executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.integerToDecimal(ConvertUtils.toInt(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testIntegerToEntityRefInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "IntegerToEntityRefInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToEntityRefInteger("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.integerToEntityRefInteger(ConvertUtils.toInt(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testIntegerToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "IntegerToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToText("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { Integer.valueOf(-10), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.integerToText(ConvertUtils.toInt(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testNullDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "NullDate",
            "SELECT " + databaseServices.getDMLService().getFunctions().nullDate() + " FROM DUMMY",
            Arrays.asList(new Object[0]),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.nullDate();
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testNullIdentifier(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "NullIdentifier",
            "SELECT " + databaseServices.getDMLService().getFunctions().nullIdentifier() + " FROM DUMMY",
            Arrays.asList(new Object[0]),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.nullIdentifier();
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testNullTextIdentifier(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "NullTextIdentifier",
            "SELECT " + databaseServices.getDMLService().getFunctions().nullTextIdentifier() + " FROM DUMMY",
            Arrays.asList(new Object[0]),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.nullTextIdentifier();
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTextToDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                assertValues(TypeInformation.get(DateTime.class), databaseServices, "TextToDate",
                    "SELECT " + databaseServices.getDMLService().getFunctions().textToDate("{0}", dateFormat.getVal()) + " FROM DUMMY",
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1).toString(dateFormat.getVal()), new DateTime(2012, 2, 29).toString(dateFormat.getVal()), new DateTime(2100, 1, 31).toString(dateFormat.getVal()) }),
                    
                        new Func.Func1<Object, DateTime>() {
                            protected DateTime executeImpl(Object o) throws Exception
                            {
                                changeDateFormat(dateFormat.getVal());
                                return ScriptableBuiltInFunction.textToDate(ConvertUtils.toString(o));
                            }
                        });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTextToDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                String dateTimeFormat = dateFormat.getVal() + " " + DEFAULT_TIME_FORMAT;
                assertValues(TypeInformation.get(DateTime.class), databaseServices, "TextToDateTime",
                    "SELECT " + databaseServices.getDMLService().getFunctions().textToDateTime("{0}", dateFormat.getVal()) + " FROM DUMMY",
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0).toString(dateTimeFormat), new DateTime(2012, 2, 29, 23, 59, 59).toString(dateTimeFormat), new DateTime(2100, 1, 31, 10, 11, 12).toString(dateTimeFormat) }),
                    
                        new Func.Func1<Object, DateTime>() {
                            protected DateTime executeImpl(Object o) throws Exception
                            {
                                changeDateFormat(dateFormat.getVal(), /*isDateTime*/
                                true);
                                return ScriptableBuiltInFunction.textToDateTime(ConvertUtils.toString(o));
                            }
                        });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTextToDecimal(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.BigDecimal, databaseServices, "TextToDecimal",
            "SELECT " + databaseServices.getDMLService().getFunctions().textToDecimal("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "-1.44", "-1", "0", "1", "50", "100.123456" }),
            
                new Func.Func1<Object, BigDecimal>() {
                    protected BigDecimal executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.textToDecimal(ConvertUtils.toString(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTextToEntityRefText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "TextToEntityRefText",
            "SELECT " + databaseServices.getDMLService().getFunctions().textToEntityRefText("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "", "abc", "1", GUID.newGuid().toString() }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.textToEntityRefText(ConvertUtils.toString(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTextToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.Integer, databaseServices, "TextToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().textToInteger("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { "-10", "-1", "0", "1", "50" }),
            
                new Func.Func1<Object, Integer>() {
                    protected Integer executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.textToInteger(ConvertUtils.toString(o));
                    }
                });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTextToTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            changeDateFormat(DEFAULT_DATE_FORMAT, /*isDateTime*/
            true);
            assertValues(TypeInformation.get(DateTime.class), databaseServices, "TextToTime",
                "SELECT " + databaseServices.getDMLService().getFunctions().textToTime("{0}") + " FROM DUMMY",
                Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0).toString(DEFAULT_TIME_FORMAT), new DateTime(2012, 2, 29, 23, 59, 59).toString(DEFAULT_TIME_FORMAT), new DateTime(2100, 1, 31, 10, 11, 12).toString(DEFAULT_TIME_FORMAT) }),
                
                    new Func.Func1<Object, DateTime>() {
                        protected DateTime executeImpl(Object o) throws Exception
                        {
                            return ScriptableBuiltInFunction.textToTime(ConvertUtils.toString(o));
                        }
                    });
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTimeToDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "TimeToDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().timeToDateTime("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 23, 59, 59), new DateTime(1900, 1, 1, 10, 11, 12) }),
            
                new Func.Func1<Object, DateTime>() {
                    protected DateTime executeImpl(Object o) throws Exception
                    {
                        return ConvertUtils.toDateTime(o);
                    }
                });
        // There is no equivalent built-in function, the function exists because of implicit conversions
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testTimeToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        assertValues(TypeInformation.String, databaseServices, "TimeToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().timeToText("{0}") + " FROM DUMMY",
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 23, 59, 59), new DateTime(1900, 1, 1, 10, 11, 12) }),
            
                new Func.Func1<Object, String>() {
                    protected String executeImpl(Object o) throws Exception
                    {
                        return ScriptableBuiltInFunction.timeToText(ConvertUtils.toDateTime(o));
                    }
                });
        
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testIf(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String trueCondition = databaseServices.getDMLService().getOperators().equal("1", "1");
        String falseCondition = databaseServices.getDMLService().getOperators().lessThen("1", "0");
        String ifTrue = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{0}", "{1}") + " FROM DUMMY";
        String ifFalse = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{0}", "{1}") + " FROM DUMMY";
        
        assertValues(TypeInformation.Integer, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1), Integer.valueOf(0) } }), 
            new Func.Func1<Object, Integer>() {
                protected Integer executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.Integer, o, 0).intValue();
                }
            });
        assertValues(TypeInformation.Integer, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1), Integer.valueOf(0) } }), 
            new Func.Func1<Object, Integer>() {
                protected Integer executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.Integer, o, 1).intValue();
                }
            });
        
        assertValues(TypeInformation.BigDecimal, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { BigDecimal.valueOf(1.5), BigDecimal.valueOf(0.5) } }), 
            new Func.Func1<Object, BigDecimal>() {
                protected BigDecimal executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.BigDecimal, o, 0);
                }
            });
        assertValues(TypeInformation.BigDecimal, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { BigDecimal.valueOf(1.5), BigDecimal.valueOf(0.5) } }), 
            new Func.Func1<Object, BigDecimal>() {
                protected BigDecimal executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.BigDecimal, o, 1);
                }
            });
        
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { new DateTime(2000, 1, 1), new DateTime(1900, 1, 1) } }), 
            new Func.Func1<Object, DateTime>() {
                protected DateTime executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.get(DateTime.class), o, 0);
                }
            });
        assertValues(TypeInformation.get(DateTime.class), databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { new DateTime(2000, 1, 1), new DateTime(1900, 1, 1) } }), 
            new Func.Func1<Object, DateTime>() {
                protected DateTime executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.get(DateTime.class), o, 1);
                }
            });
        
        assertValues(TypeInformation.String, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { "trueString", "falseString" } }), 
            new Func.Func1<Object, String>() {
                protected String executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.String, o, 0);
                }
            });
        assertValues(TypeInformation.String, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { "trueString", "falseString" } }), 
            new Func.Func1<Object, String>() {
                protected String executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.String, o, 1);
                }
            });
        
        assertValues(TypeInformation.Boolean, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) } }), 
            new Func.Func1<Object, Boolean>() {
                protected Boolean executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.Boolean, o, 0).booleanValue();
                }
            });
        assertValues(TypeInformation.Boolean, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) } }), 
            new Func.Func1<Object, Boolean>() {
                protected Boolean executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.Boolean, o, 1).booleanValue();
                }
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testIfInsideIf(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String trueCondition = databaseServices.getDMLService().getOperators().equal("1", "1");
        String falseCondition = databaseServices.getDMLService().getOperators().lessThen("1", "0");
        String ifTrueTrue = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(trueCondition,
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{2}", "{3}")) + 
            " FROM DUMMY";
        
        String ifTrueFalse = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(trueCondition,
            databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{2}", "{3}")) + 
            " FROM DUMMY";
        
        String ifFalseTrue = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(falseCondition,
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{2}", "{3}")) + 
            " FROM DUMMY";
        
        String ifFalseFalse = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(falseCondition,
            databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{2}", "{3}")) + 
            " FROM DUMMY";
        
        assertValues(TypeInformation.String, databaseServices, "If(true, If(true, A, b), If(true, c, d))", ifTrueTrue, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), 
            new Func.Func1<Object, String>() {
                protected String executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.String, o, 0);
                }
            });
        assertValues(TypeInformation.String, databaseServices, "If(true, If(false, a, B), If(true, c, d))", ifTrueFalse, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), 
            new Func.Func1<Object, String>() {
                protected String executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.String, o, 1);
                }
            });
        assertValues(TypeInformation.String, databaseServices, "If(false, If(true, a, b), If(true, C, d))", ifFalseTrue, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), 
            new Func.Func1<Object, String>() {
                protected String executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.String, o, 2);
                }
            });
        assertValues(TypeInformation.String, databaseServices, "If(false, If(false, a, b), If(false, c, D))", ifFalseFalse, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), 
            new Func.Func1<Object, String>() {
                protected String executeImpl(Object o) throws Exception
                {
                    return getArgValue(TypeInformation.String, o, 3);
                }
            });
    }
    
    
    private static String getDefaultDateFormat()
    {
        return FormatInfoLogic.getOutputDateFormatString();
    }
    
    private static void changeDateFormat(String newFormat) {
        changeDateFormat(newFormat, false);
    }
    
    private static void changeDateFormat(String newFormat, boolean isDateTime) {
        DateTimeFormatInfo.setDefaultDateTimeFormat(newFormat + (isDateTime ? DEFAULT_TIME_FORMAT : ""), FormatInfoLogic.getDateTimeRegExp(newFormat));
        FormatInfoLogic.setDefaultDateAndDateTimeFormatString(newFormat, newFormat);
    }
}
