/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.dmlservice;

import java.text.*;
import java.util.*;
import org.junit.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import outsystems.junit.framework.JUnitTestAdapter;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTest;
import outsystems.testscommon.AssertUtils;


public class DMLTest extends DatabaseProviderTest<DMLTestsConfiguration> {
    public static final TypeInformation<DMLTest> TypeInfo = TypeInformation.get(DMLTest.class);
    
    /**
	 *	Asserts that two values are equal using Assert.AreEqual(object, object, string) with a fallback for decimal (and BigDecimal) values that uses decimal.CompareTo(object) to ignore precision differences in Java.
	 */
    protected static void assertEqual(Object expected, Object result, String errorMessage) {
        try {
            Assert.assertEquals(errorMessage, (Object) (expected), (Object) (result));
        }catch (Throwable exceptionToHandle) {
            exceptionToHandle = WrappedException.unwrapThrowableIfNeeded(exceptionToHandle);
            
            if (exceptionToHandle instanceof ThreadDeath) {
                throw (ThreadDeath) exceptionToHandle;
            } else {
                Throwable e = (Throwable) exceptionToHandle;
                // This is a fallback that rethrows the original exception in case of failture, in order to reuse the error messages
                if (expected instanceof BigDecimal || result instanceof BigDecimal)
                {
                    Comparable<?> comparableExpected = (Comparable<?>) expected;
                    Comparable<?> comparableResult = (Comparable<?>) result;
                    if (NonGeneric.compareTo(comparableExpected, comparableResult) != 0)
                    {
                        if (e instanceof RuntimeException)
                            throw (RuntimeException)e;
                        WrappedException.wrapExceptionIfNeeded(e);
                    }
                }
                else
                {
                    if (e instanceof RuntimeException)
                        throw (RuntimeException)e;
                    WrappedException.wrapExceptionIfNeeded(e);
                }
            }
        }
    }
    public DMLTest() {
        super(DMLTestsConfiguration.TypeInfo);
    }
}
