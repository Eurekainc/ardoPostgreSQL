/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.dmlservice;

import java.sql.*;
import java.text.*;
import java.util.*;
import org.junit.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.dmlservice.*;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.*;
import outsystems.hubedition.extensibility.data.executionservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOCommand;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOParameter;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOParameterDirection;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOTransaction;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ConnectionUtils;
import outsystems.hubedition.extensibility.data.databaseobjects.IDatabaseObjectFactory;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.DeletePlaceholder;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.DMLPlaceholderExtensions;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.InsertPlaceholder;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.SelectPlaceholder;
import outsystems.hubedition.extensibility.data.dmlservice.dmlplaceholders.UpdatePlaceholder;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLEntityActions;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLOperators;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLService;
import outsystems.hubedition.extensibility.data.dmlservice.RetrieveIdMethod;
import outsystems.hubedition.extensibility.data.executionservice.IExecutionService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.transactionservice.ITransactionService;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.IterativeTestCase;
import outsystems.junit.framework.TestDetails;
import outsystems.servertests.databaseprovider.framework.BaseDatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTestCase;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class DMLEntityActionsTests extends DMLTest {
    public static final TypeInformation<DMLEntityActionsTests> TypeInfo = TypeInformation.get(DMLEntityActionsTests.class);
    
    private static final String errorMessageFormat = "Error validating {0} action with SQL: {1}";
    
    private final IDMLEntityActions getDMLEntityActions(IDatabaseServices databaseServices) throws outsystems.hubedition.extensibility.data.databaseobjects.InvalidDatabaseObjectIdentifierException, outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException {
        return databaseServices.getDMLService().getEntityActions(databaseServices.getObjectFactory().createTableSourceInfo("DUMMY"));
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testGetEntity(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        IDMLEntityActions dmlEntityActions = getDMLEntityActions(databaseServices);
        innerGetEntity(databaseServices, dmlEntityActions.sQLPlaceholderValuesForGet(), /*forUpdate*/
        false);
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testGetEntityForUpdate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        IDMLEntityActions dmlEntityActions = getDMLEntityActions(databaseServices);
        innerGetEntity(databaseServices, dmlEntityActions.sQLPlaceholderValuesForGetForUpdate(), /*forUpdate*/
        true);
    }
    
    
    private final void innerGetEntity(IDatabaseServices databaseServices, Map<SelectPlaceholder, String> getPlaceholders, boolean forUpdate) throws Exception {
        String beforeStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(SelectPlaceholder.TypeInfo, getPlaceholders, SelectPlaceholder.BeforeStatement);
        String afterSelect = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(SelectPlaceholder.TypeInfo, getPlaceholders, SelectPlaceholder.AfterSelectKeyword);
        String beforeFrom = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(SelectPlaceholder.TypeInfo, getPlaceholders, SelectPlaceholder.BeforeFromKeyword);
        String afterFrom = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(SelectPlaceholder.TypeInfo, getPlaceholders, SelectPlaceholder.AfterFromKeyword);
        String beforeWhere = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(SelectPlaceholder.TypeInfo, getPlaceholders, SelectPlaceholder.BeforeWhereKeyword);
        String afterWhere = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(SelectPlaceholder.TypeInfo, getPlaceholders, SelectPlaceholder.AfterWhereKeyword);
        String afterStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimEnd(SelectPlaceholder.TypeInfo, getPlaceholders, SelectPlaceholder.AfterStatement);
        
        String sql = beforeStatement + "SELECT " + afterSelect + "ID " + beforeFrom + "FROM " + afterFrom + "DUMMY " + 
            beforeWhere + 
            "WHERE " + 
            afterWhere + 
            databaseServices.getDMLService().getOperators().equal("ID", "1") + 
            afterStatement;
        
        SQLExecutor sqlExecutor = new SQLExecutor(databaseServices);
        int returnedId = sqlExecutor.executeScalar(sql).runtimeValue(TypeInformation.Integer).intValue();
        int expectedId = 1;
        assertEqual(Integer.valueOf(expectedId), Integer.valueOf(returnedId), StringUtils.format(errorMessageFormat, new Object[] {(forUpdate ? "GetEntityForUpdate" : "GetEntity"), sql}));
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testCreateEntity(DatabaseProviderTestCase tc) throws outsystems.hubedition.extensibility.data.databaseobjects.InvalidDatabaseObjectIdentifierException, outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException, SQLException {
        IDatabaseServices databaseServices = tc.getServices();
        IDMLEntityActions dmlEntityActions = getDMLEntityActions(databaseServices);
        Map<InsertPlaceholder, String> insertPlaceholders = dmlEntityActions.sQLPlaceholderValuesForCreate();
        String beforeStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(InsertPlaceholder.TypeInfo, insertPlaceholders, InsertPlaceholder.BeforeStatement);
        String beforeValuesKeyword = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(InsertPlaceholder.TypeInfo, insertPlaceholders, InsertPlaceholder.BeforeValuesKeyword);
        String afterStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimEnd(InsertPlaceholder.TypeInfo, insertPlaceholders, InsertPlaceholder.AfterStatement);
        
        final RefParmHolderInteger value = new RefParmHolderInteger(2);
        final RefParmHolder<String> insertSql = new RefParmHolder<String>(beforeStatement + "INSERT INTO DUMMY (VAL) " + beforeValuesKeyword + "VALUES (" + value.getVal() + ")" + afterStatement);
        final RefParmHolder<String> selectSql = new RefParmHolder<String>("SELECT VAL FROM DUMMY WHERE VAL = " + value.getVal());
        
        executeSQL(databaseServices, 
            new Func.Func2<IExecutionService, ADOTransaction, Object>() {
                protected Object executeImpl(IExecutionService service, ADOTransaction tran) throws Exception
                {
                    {
                        ADOCommand cmd = service.createCommand(tran, insertSql.getVal());
                        try 
                        {
                            service.executeNonQuery(cmd);
                        }
                        finally {
                            if (cmd!= null) {
                                cmd.cleanUp();
                            }
                        }
                    }
                    int insertedValue;
                    {
                        ADOCommand cmd = service.createCommand(tran, selectSql.getVal());
                        try 
                        {
                            insertedValue = ((Integer)ConvertUtils.changeType(service.executeScalar(cmd),int.class)).intValue();
                        }
                        finally {
                            if (cmd!= null) {
                                cmd.cleanUp();
                            }
                        }
                    }
                    assertEqual(Integer.valueOf(value.getVal()), Integer.valueOf(insertedValue), StringUtils.format(errorMessageFormat, new Object[] {"CreateEntity", insertSql.getVal()}));
                    return Boolean.valueOf(true);
                }
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testCreateEntityRetrievingId(DatabaseProviderTestCase tc) throws outsystems.hubedition.extensibility.data.databaseobjects.InvalidDatabaseObjectIdentifierException, outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException, SQLException {
        IDatabaseServices databaseServices = tc.getServices();
        IDMLEntityActions dmlEntityActions = getDMLEntityActions(databaseServices);
        
        final RefParmHolder<String> paramName = new RefParmHolder<String>(databaseServices.getExecutionService().getParameterPrefix() + "id");
        final RefParmHolderInteger value = new RefParmHolderInteger(2);
        RefParmHolder<RetrieveIdMethod> retrieveIdMethod = new RefParmHolder<RetrieveIdMethod>();
        Map<InsertPlaceholder, String> insertPlaceholders = dmlEntityActions.sQLPlaceholderValuesForCreateAndRetrieveId("ID", paramName.getVal(),
            retrieveIdMethod);
        
        String beforeStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(InsertPlaceholder.TypeInfo, insertPlaceholders, InsertPlaceholder.BeforeStatement);
        String beforeValuesKeyword = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(InsertPlaceholder.TypeInfo, insertPlaceholders, InsertPlaceholder.BeforeValuesKeyword);
        String afterStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimEnd(InsertPlaceholder.TypeInfo, insertPlaceholders, InsertPlaceholder.AfterStatement);
        
        final RefParmHolder<String> sql = new RefParmHolder<String>(beforeStatement + "INSERT INTO DUMMY (VAL) " + beforeValuesKeyword + "VALUES (" + value.getVal() + ")" + afterStatement);
        if (retrieveIdMethod.getVal() == RetrieveIdMethod.ReturnValue)
        {
            executeSQL(databaseServices, 
                new Func.Func2<IExecutionService, ADOTransaction, Object>() {
                    protected Object executeImpl(IExecutionService service, ADOTransaction tran) throws Exception
                    {
                        int returnedId;
                        {
                            ADOCommand cmd = service.createCommand(tran, sql.getVal());
                            try 
                            {
                                returnedId = ((Integer)ConvertUtils.changeType(service.executeScalar(cmd),int.class)).intValue();
                            }
                            finally {
                                if (cmd!= null) {
                                    cmd.cleanUp();
                                }
                            }
                        }
                        validateInsertedValue(service, tran, value.getVal(), returnedId, sql.getVal());
                        return Boolean.valueOf(true);
                    }
                });
        }
        else
        {
            executeSQL(databaseServices, 
                new Func.Func2<IExecutionService, ADOTransaction, Object>() {
                    protected Object executeImpl(IExecutionService service, ADOTransaction tran) throws Exception
                    {
                        int returnedId;
                        {
                            ADOCommand cmd = service.createCommand(tran, sql.getVal());
                            try 
                            {
                                ADOParameter parameter = service.createParameter(cmd, paramName.getVal(), Types.INTEGER, null);
                                service.setParameterDirection(parameter, ADOParameterDirection.Output);
                                service.executeNonQuery(cmd);
                                returnedId = ((Integer)ConvertUtils.changeType(parameter.getValue(),int.class)).intValue();
                            }
                            finally {
                                if (cmd!= null) {
                                    cmd.cleanUp();
                                }
                            }
                        }
                        validateInsertedValue(service, tran, value.getVal(), returnedId, sql.getVal());
                        return Boolean.valueOf(true);
                    }
                });
        }
    }
    
    
    private final void validateInsertedValue(IExecutionService service, ADOTransaction tran, int expectedValue, int returnedId, String executedSql) throws ParseException, SQLException {
        String sql = "SELECT VAL FROM DUMMY WHERE ID = " + returnedId;
        {
            ADOCommand cmd = service.createCommand(tran, sql);
            try 
            {
                int insertedValue = ((Integer)ConvertUtils.changeType(service.executeScalar(cmd),int.class)).intValue();
                assertEqual(Integer.valueOf(expectedValue), Integer.valueOf(insertedValue), StringUtils.format(errorMessageFormat, new Object[] {"CreateEntityRetrievingId", executedSql}));
            }
            finally {
                if (cmd!= null) {
                    cmd.cleanUp();
                }
            }
        }
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testUpdateEntity(DatabaseProviderTestCase tc) throws outsystems.hubedition.extensibility.data.databaseobjects.InvalidDatabaseObjectIdentifierException, outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException, SQLException {
        IDatabaseServices databaseServices = tc.getServices();
        IDMLEntityActions dmlEntityActions = getDMLEntityActions(databaseServices);
        Map<UpdatePlaceholder, String> updatePlaceholders = dmlEntityActions.sQLPlaceholderValuesForUpdate();
        String beforeStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(UpdatePlaceholder.TypeInfo, updatePlaceholders, UpdatePlaceholder.BeforeStatement);
        String beforeWhereKeyword = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(UpdatePlaceholder.TypeInfo, updatePlaceholders, UpdatePlaceholder.BeforeWhereKeyword);
        String afterStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimEnd(UpdatePlaceholder.TypeInfo, updatePlaceholders, UpdatePlaceholder.AfterStatement);
        
        final RefParmHolderInteger value = new RefParmHolderInteger(2);
        final RefParmHolder<String> updateSql = new RefParmHolder<String>(beforeStatement + "UPDATE DUMMY SET VAL = " + value.getVal() + " " + beforeWhereKeyword + "WHERE ID = 1" + afterStatement);
        final RefParmHolder<String> selectSql = new RefParmHolder<String>("SELECT VAL FROM DUMMY WHERE ID = 1");
        
        executeSQL(databaseServices, 
            new Func.Func2<IExecutionService, ADOTransaction, Object>() {
                protected Object executeImpl(IExecutionService service, ADOTransaction tran) throws Exception
                {
                    {
                        ADOCommand cmd = service.createCommand(tran, updateSql.getVal());
                        try 
                        {
                            service.executeNonQuery(cmd);
                        }
                        finally {
                            if (cmd!= null) {
                                cmd.cleanUp();
                            }
                        }
                    }
                    int updatedValue;
                    {
                        ADOCommand cmd = service.createCommand(tran, selectSql.getVal());
                        try 
                        {
                            updatedValue = ((Integer)ConvertUtils.changeType(service.executeScalar(cmd),int.class)).intValue();
                        }
                        finally {
                            if (cmd!= null) {
                                cmd.cleanUp();
                            }
                        }
                    }
                    assertEqual(Integer.valueOf(value.getVal()), Integer.valueOf(updatedValue), StringUtils.format(errorMessageFormat, new Object[] {"UpdateEntity", updateSql.getVal()}));
                    return Boolean.valueOf(true);
                }
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    public final void testDeleteEntity(DatabaseProviderTestCase tc) throws outsystems.hubedition.extensibility.data.databaseobjects.InvalidDatabaseObjectIdentifierException, outsystems.hubedition.extensibility.data.introspectionservice.IntrospectionServiceException, SQLException {
        IDatabaseServices databaseServices = tc.getServices();
        IDMLEntityActions dmlEntityActions = getDMLEntityActions(databaseServices);
        Map<DeletePlaceholder, String> deletePlaceholders = dmlEntityActions.sQLPlaceholderValuesForDelete();
        String beforeStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(DeletePlaceholder.TypeInfo, deletePlaceholders, DeletePlaceholder.BeforeStatement);
        String beforeWhereKeyword = DMLPlaceholderExtensions.getPlaceholderValueTrimStart(DeletePlaceholder.TypeInfo, deletePlaceholders, DeletePlaceholder.BeforeWhereKeyword);
        String afterStatement = DMLPlaceholderExtensions.getPlaceholderValueTrimEnd(DeletePlaceholder.TypeInfo, deletePlaceholders, DeletePlaceholder.AfterStatement);
        
        final RefParmHolder<String> deleteSql = new RefParmHolder<String>(beforeStatement + "DELETE FROM DUMMY " + beforeWhereKeyword + "WHERE ID = 1" + afterStatement);
        final RefParmHolder<String> selectSql = new RefParmHolder<String>("SELECT VAL FROM DUMMY WHERE ID = 1");
        
        executeSQL(databaseServices, 
            new Func.Func2<IExecutionService, ADOTransaction, Object>() {
                protected Object executeImpl(IExecutionService service, ADOTransaction tran) throws Exception
                {
                    {
                        ADOCommand cmd = service.createCommand(tran, deleteSql.getVal());
                        try 
                        {
                            service.executeNonQuery(cmd);
                        }
                        finally {
                            if (cmd!= null) {
                                cmd.cleanUp();
                            }
                        }
                    }
                    Object deletedValue;
                    {
                        ADOCommand cmd = service.createCommand(tran, selectSql.getVal());
                        try 
                        {
                            deletedValue = service.executeScalar(cmd);
                        }
                        finally {
                            if (cmd!= null) {
                                cmd.cleanUp();
                            }
                        }
                    }
                    assertEqual(null, deletedValue, StringUtils.format(errorMessageFormat, new Object[] {"DeleteEntity", deleteSql.getVal()}));
                    return Boolean.valueOf(true);
                }
            });
    }
    
    
    private final void executeSQL(IDatabaseServices services, Func.Func2<IExecutionService, ADOTransaction, Object> execute) throws SQLException {
        {
            Connection conn = services.getTransactionService().createConnection();
            try 
            {
                ADOTransaction tran = null;
                try {
                    tran = services.getTransactionService().createTransaction(conn);
                    execute.execute(services.getExecutionService(), tran);
                } finally{
                    if (tran != null)
                    {
                        tran.rollback();
                    }
                }
            }
            finally {
                if (conn!= null) {
                    ConnectionUtils.closeConnection(conn);
                }
            }
        }
    }
}
