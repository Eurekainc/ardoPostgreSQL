/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.executionservice;

import java.sql.*;
import java.text.*;
import java.util.*;
import org.junit.*;
import outsystems.hubedition.extensibility.data.executionservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOCommand;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOParameter;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOParameterDirection;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ConnectionUtils;
import outsystems.hubedition.extensibility.data.executionservice.ExecutionServiceExtensions;
import outsystems.hubedition.extensibility.data.executionservice.IExecutionService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.transactionservice.ITransactionService;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.IterativeTestCase;
import outsystems.junit.framework.JUnitTestAdapter;
import outsystems.junit.framework.TestDetails;
import outsystems.servertests.databaseprovider.framework.BaseDatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTestCase;
import outsystems.testscommon.AssertUtils;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class ExecutionServiceTests extends DatabaseProviderTest<TestConfiguration> {
    public static final TypeInformation<ExecutionServiceTests> TypeInfo = TypeInformation.get(ExecutionServiceTests.class);
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    
    public final void testParameterPrefix(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        SQLExecutor sqlExecutor = new SQLExecutor(databaseServices);
        String sql = "SELECT " + sqlExecutor.getParameterName(0, int.class) + " FROM DUMMY";
        
        int value = sqlExecutor.executeScalar(sql, Integer.valueOf(1)).runtimeValue(TypeInformation.Integer).intValue();
        Assert.assertEquals("ParameterPrefix didn't work as expected. SQL: " + sql, (Object) (1), (Object) (value));
    }
    
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    
    public final void checkDateTypes(DatabaseProviderTestCase tc) {
        IDatabaseServices databaseServices = tc.getServices();
        IExecutionService executionService = databaseServices.getExecutionService();
        int[] dateTypes = new int[] { Types.TIMESTAMP, Types.TIMESTAMP, Types.TIMESTAMP };
        for (int dateType : dateTypes) {
            Assert.assertTrue(ExecutionServiceExtensions.isDateType(executionService, dateType));
        }
    }
    
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    
    public final void checkParameterDirection(DatabaseProviderTestCase tc) throws SQLException {
        IDatabaseServices databaseServices = tc.getServices();
        IExecutionService executionService = databaseServices.getExecutionService();
        ITransactionService transactionService = databaseServices.getTransactionService();
        {
            Connection 
            connection = transactionService.createConnection();
            try 
            {
                {
                    ADOCommand cmd = executionService.createCommand(connection, "");
                    try 
                    {
                        ADOParameter param = executionService.createParameter(cmd, "Name", Types.VARCHAR, "John");
                        int[] paramDirection = new int[] { ADOParameterDirection.Input, ADOParameterDirection.Output};
                        for (int dir : paramDirection) {
                            executionService.setParameterDirection(param, dir);
                            Assert.assertEquals((long) param.getDirection(), (long) Integer.valueOf(dir));}
                        
                    }
                    finally {
                        if (cmd!= null) {
                            cmd.cleanUp();
                        }
                    }
                }
            }
            finally {
                if (connection!= null) {
                    ConnectionUtils.closeConnection(connection);
                }
            }
        }
    }
    
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    
    public final void parameterSetTest(DatabaseProviderTestCase tc) throws SQLException {
        IDatabaseServices databaseServices = tc.getServices();
        IExecutionService executionService = databaseServices.getExecutionService();
        ITransactionService transactionService = databaseServices.getTransactionService();
        {
            Connection 
            connection = transactionService.createConnection();
            try 
            {
                {
                    ADOCommand cmd = executionService.createCommand(connection, "select name from NameTable where name = @name");
                    try 
                    {
                        
                        ADOParameter param = executionService.createParameter(cmd, "Name", Types.INTEGER, Integer.valueOf(4));
                        
                        Assert.assertEquals((Object) (4), (Object) (ConvertUtils.toInt(param.getValue())));
                        
                        executionService.setParameterValue(param, Types.INTEGER, Integer.valueOf(4433));
                        
                        Assert.assertEquals((Object) (4433), (Object) (ConvertUtils.toInt(param.getValue())));
                    }
                    finally {
                        if (cmd!= null) {
                            cmd.cleanUp();
                        }
                    }
                }
            }
            finally {
                if (connection!= null) {
                    ConnectionUtils.closeConnection(connection);
                }
            }
        }
    }
    
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    
    public final void testDecimalConversionPrecision(DatabaseProviderTestCase tc) throws Exception {
        IExecutionService executionService = tc.getServices().getExecutionService();
        BigDecimal expected = roundDecimal(BigDecimal.valueOf(1).divide(BigDecimal.valueOf(3), DecimalUtils.SCALE, DecimalUtils.ROUNDING_MODE));
        {
            Connection conn = tc.getServices().getTransactionService().createConnection();
            try 
            {
                String sql = "SELECT 1.0/3.0 as Val FROM DUAL";
                {
                    ADOCommand // Test ExecuteScalar
                    cmd = executionService.createCommand(conn, sql);
                    try 
                    {
                        try {
                            BigDecimal obtained = roundDecimal(ConvertUtils.toBigDecimal(executionService.transformDatabaseToRuntimeValue(executionService.executeScalar(cmd))));
                            Assert.assertEquals("'" + sql + "' didn't return the expected value", (Object) (expected), (Object) (obtained));
                        }catch (Throwable exceptionToHandle) {
                            exceptionToHandle = WrappedException.unwrapThrowableIfNeeded(exceptionToHandle);
                            
                            if (exceptionToHandle instanceof ThreadDeath) {
                                throw (ThreadDeath) exceptionToHandle;
                            } else {
                                Throwable e = (Throwable) exceptionToHandle;
                                throw new Exception("Error occured when executing 'ExecuteScalar() from command 'SELECT 1/3 FROM DUAL': " + 
                                    ExceptionUtils.getExceptionTypeOrMessage(e));
                            }
                        }
                    }
                    finally {
                        if (cmd!= null) {
                            cmd.cleanUp();
                        }
                    }
                }
                {
                    ADOCommand // Test ExecuteReader
                    cmd = executionService.createCommand(conn, sql);
                    try 
                    {
                        try {
                            {
                                OSResultSet reader = executionService.executeReader(cmd);
                                try 
                                {
                                    if (!reader.next())
                                    {
                                        throw new Exception("Reader didn't return a value from the database");
                                    }
                                    BigDecimal obtained = roundDecimal(ConvertUtils.toBigDecimal(executionService.transformDatabaseToRuntimeValue(reader.getObject(1))));
                                    BigDecimal obtained2 = roundDecimal(ConvertUtils.toBigDecimal(executionService.transformDatabaseToRuntimeValue(reader.getObject("Val"))));
                                    BigDecimal obtained3 = roundDecimal(ConvertUtils.toBigDecimal(executionService.transformDatabaseToRuntimeValue(reader.getBigDecimal(1))));
                                    Assert.assertEquals("'" + sql + "' didn't return the expected value", (Object) (expected), (Object) (obtained));
                                    Assert.assertEquals("IDataReader[i] didn't return the same as IDataReader[string]", (Object) (obtained), (Object) (obtained2));
                                    Assert.assertEquals("IDataReader[i] didn't return the same as IDataReader.GetDecimal(i)", (Object) (obtained), (Object) (obtained3));
                                }
                                finally {
                                    if (reader!= null) {
                                        reader.dispose();
                                    }
                                }
                            }
                        }catch (Throwable exceptionToHandle1) {
                            exceptionToHandle1 = WrappedException.unwrapThrowableIfNeeded(exceptionToHandle1);
                            
                            if (exceptionToHandle1 instanceof ThreadDeath) {
                                throw (ThreadDeath) exceptionToHandle1;
                            } else {
                                Throwable e = (Throwable) exceptionToHandle1;
                                throw new Exception("Error occured when executing 'ExecuteReader() from command 'SELECT 1/3 FROM DUAL': " + 
                                    ExceptionUtils.getExceptionTypeOrMessage(e));
                            }
                        }
                    }
                    finally {
                        if (cmd!= null) {
                            cmd.cleanUp();
                        }
                    }
                }
            }
            finally {
                if (conn!= null) {
                    ConnectionUtils.closeConnection(conn);
                }
            }
        }
    }
    
    
    
    @outsystems.hubedition.util.obfuscation.DoNotRename
    private static BigDecimal roundDecimal(BigDecimal value) {
        return value.setScale(3, DecimalUtils.ROUNDING_MODE);
    }
    public ExecutionServiceTests() {
        super(TestConfiguration.TypeInfo);
    }
}
