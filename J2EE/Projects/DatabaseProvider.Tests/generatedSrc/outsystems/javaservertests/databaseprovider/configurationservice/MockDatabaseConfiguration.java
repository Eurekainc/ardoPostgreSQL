/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.configurationservice;

import java.nio.*;
import java.nio.charset.*;
import java.text.*;
import java.util.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.AdvancedConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.BaseDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;


public class MockDatabaseConfiguration extends BaseDatabaseConfiguration {
    private String _mockText;
    private String _mockText2;
    private int _mockInt;
    private boolean _mockBool;
    private DirectionsEnum _mockEnum;
    public static final TypeInformation<MockDatabaseConfiguration> TypeInfo = TypeInformation.get(MockDatabaseConfiguration.class);
    
    private static final String INVISIBLE_TEXT_VALUE = "Invisibile";
    
    public IDatabaseProvider getDatabaseProvider() throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException();
    }
    
    public String getDatabaseIdentifier()
    {
        return "Identifier";
    }
    
    @UserDefinedConfigurationParameter(label="MockText", region=ParameterRegion.DatabaseLocation, prompt="MockText_Prompt", order=0, isMandatory=false, isPassword=true, visibilityChecker="IsTextVisible")
    public final String getMockText()
    {
        return _mockText;
    }
    
    @UserDefinedConfigurationParameter(label="MockText", region=ParameterRegion.DatabaseLocation, prompt="MockText_Prompt", order=0, isMandatory=false, isPassword=true, visibilityChecker="IsTextVisible")
    public final void setMockText(String value)
    {
        _mockText = value;
    }
    
    @UserDefinedConfigurationParameter(label="MockText2", region=ParameterRegion.DatabaseLocation, prompt="MockText2_Prompt", order=1, isMandatory=true, isPassword=false)
    public final String getMockText2()
    {
        return _mockText2;
    }
    
    @UserDefinedConfigurationParameter(label="MockText2", region=ParameterRegion.DatabaseLocation, prompt="MockText2_Prompt", order=1, isMandatory=true, isPassword=false)
    public final void setMockText2(String value)
    {
        _mockText2 = value;
    }
    
    @UserDefinedConfigurationParameter(label="MockInt", region=ParameterRegion.UserSpecific, prompt="MockInt_Prompt", order=1, isMandatory=true, example="MockInt_Example")
    public final int getMockInt()
    {
        return _mockInt;
    }
    
    @UserDefinedConfigurationParameter(label="MockInt", region=ParameterRegion.UserSpecific, prompt="MockInt_Prompt", order=1, isMandatory=true, example="MockInt_Example")
    public final void setMockInt(int value)
    {
        _mockInt = value;
    }
    
    @UserDefinedConfigurationParameter(label="MockBool", region=ParameterRegion.UserAdminSpecific, prompt="MockBool_Prompt", order=2, example="MockBool_Example")
    public final boolean isMockBool()
    {
        return _mockBool;
    }
    
    @UserDefinedConfigurationParameter(label="MockBool", region=ParameterRegion.UserAdminSpecific, prompt="MockBool_Prompt", order=2, example="MockBool_Example")
    public final void setMockBool(boolean value)
    {
        _mockBool = value;
    }
    
    @UserDefinedConfigurationParameter(label="MockEnum", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
    public final DirectionsEnum getMockEnum()
    {
        return _mockEnum;
    }
    
    @UserDefinedConfigurationParameter(label="MockEnum", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
    public final void setMockEnum(DirectionsEnum value)
    {
        _mockEnum = value;
    }
    
    public final boolean isTextVisible() {
        return !getMockText().equals(INVISIBLE_TEXT_VALUE);
    }
    
    public boolean equals(Object obj) {
        if (!super.equals(obj))
        {
            return false;
        }
        
        MockDatabaseConfiguration other = ClassUtils.safeCast(obj, MockDatabaseConfiguration.class);
        
        return ((other != null) && equalsBasedOnParts(new Object[] { getMockText(), Integer.valueOf(getMockInt()), Boolean.valueOf(isMockBool()), getMockEnum() },
    new Object[] { other.getMockText(), Integer.valueOf(other.getMockInt()), Boolean.valueOf(other.isMockBool()), other.getMockEnum() }));
    }
    
    public int hashCode() {
        return super.hashCode() ^ getHashCodeBasedOnParts(getMockText(), Integer.valueOf(getMockInt()), Boolean.valueOf(isMockBool()), getMockEnum());
    }
    
    protected String assembleBasicConnectionString() {
        return new StringBuilder().append("MockText=").append(getMockText()).append("MockInt=").append(getMockInt()).append("MockBool=").append(isMockBool()).append("MockEnum=").append(getMockEnum()).toString();
    }
    
    private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(null, null, null);
    
    public AdvancedConfiguration getAdvancedConfiguration()
    {
        return advancedConfiguration;
    }
    
    public void setAdvancedConfiguration(AdvancedConfiguration value)
    {
        advancedConfiguration = value;
    }
    
    protected String assembleAdvancedConnectionString() {
        return getAdvancedConfiguration().getAdvancedConnectionStringField();
    }
    
    public IRuntimeDatabaseConfiguration getRuntimeDatabaseConfiguration() throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException();
    }
}
