/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.configurationservice;

import java.text.*;
import java.util.*;
import org.junit.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import java.util.Map;
import outsystems.hubedition.extensibility.data.configurationservice.AdvancedConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IIntegrationDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.ConfigurationReflectionException;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.MetaDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.JUnitTestAdapter;
import outsystems.junit.framework.TestDetails;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.testscommon.AssertUtils;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class ParameterTests extends DashboardTest {
    public static final TypeInformation<ParameterTests> TypeInfo = TypeInformation.get(ParameterTests.class);
    
    public static enum DirectionsEnum implements IEnum {
        Up,
        Down,
        Left,
        Right;
        
        public static final TypeInformation<DirectionsEnum> TypeInfo = TypeInformation.get(DirectionsEnum.class);
        public int getIntValue() {
            return ordinal();
        }
        
        public static String[] names() {
            return EnumUtils.getNames(values());
        }
        
        public static DirectionsEnum getDefaultValue() {
            return Up;
        }
        
        private static Map<Integer, DirectionsEnum> intToEnum;
        private static Map<Integer, DirectionsEnum> getIntToEnum() {
            if (intToEnum == null) {
                intToEnum = EnumUtils.getIntToEnumValueMap(values());
            }
            return intToEnum;
        }
        
        private static Map<String, DirectionsEnum> lowerCaseNameToEnum;
        private static Map<String, DirectionsEnum> getLowerCaseNameToEnum() {
            if (lowerCaseNameToEnum == null) {
                lowerCaseNameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/true);
            }
            return lowerCaseNameToEnum;
        }
        
        private static Map<String, DirectionsEnum> nameToEnum;
        private static Map<String, DirectionsEnum> getNameToEnum() {
            if (nameToEnum == null) {
                nameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/false);
            }
            return nameToEnum;
        }
        
        public static DirectionsEnum valueOf(int value) {
            DirectionsEnum result = getIntToEnum().get(value);
            if (result == null) {
                throw new IllegalArgumentException("No enum const class DirectionsEnum with int value " + value);
            }
            return result;
        }
        
        
        public static DirectionsEnum valueOf(String value, boolean ignoreCase) {
            if (!ignoreCase) {
                return valueOf(value);
            }
            DirectionsEnum result = getLowerCaseNameToEnum().get(value.toLowerCase());
            if (result == null) {
                throw new IllegalArgumentException("No enum const class DirectionsEnum." + value);
            }
            return result;
        }
        
        
        public static boolean isDefined(String value) {
            return getNameToEnum().containsKey(value);
        }
        
        public static boolean isDefined(int value) {
            return getIntToEnum().containsKey(value);
        }
    }
    
    public static class MockDatabaseConfiguration implements IIntegrationDatabaseConfiguration {
        private String _mockText;
        private int _mockInt;
        private boolean _mockBool;
        private DirectionsEnum _mockEnum;
        private float _mockInvalid;
        public static final TypeInformation<MockDatabaseConfiguration> TypeInfo = TypeInformation.get(MockDatabaseConfiguration.class);
        @UserDefinedConfigurationParameter(label="MockText", region=ParameterRegion.DatabaseLocation, prompt="MockText_Prompt", order=1, isMandatory=true, isPassword=false)
        public final String getMockText()
        {
            return _mockText;
        }
        
        @UserDefinedConfigurationParameter(label="MockText", region=ParameterRegion.DatabaseLocation, prompt="MockText_Prompt", order=1, isMandatory=true, isPassword=false)
        public final void setMockText(String value)
        {
            _mockText = value;
        }
        
        @UserDefinedConfigurationParameter(label="MockInt", region=ParameterRegion.UserSpecific, prompt="MockInt_Prompt", order=1, isMandatory=true, example="MockInt_Example")
        public final int getMockInt()
        {
            return _mockInt;
        }
        
        @UserDefinedConfigurationParameter(label="MockInt", region=ParameterRegion.UserSpecific, prompt="MockInt_Prompt", order=1, isMandatory=true, example="MockInt_Example")
        public final void setMockInt(int value)
        {
            _mockInt = value;
        }
        
        @UserDefinedConfigurationParameter(label="MockBool", region=ParameterRegion.UserAdminSpecific, prompt="MockBool_Prompt", order=2, example="MockBool_Example")
        public final boolean isMockBool()
        {
            return _mockBool;
        }
        
        @UserDefinedConfigurationParameter(label="MockBool", region=ParameterRegion.UserAdminSpecific, prompt="MockBool_Prompt", order=2, example="MockBool_Example")
        public final void setMockBool(boolean value)
        {
            _mockBool = value;
        }
        
        @UserDefinedConfigurationParameter(label="MockEnum", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
        public final DirectionsEnum getMockEnum()
        {
            return _mockEnum;
        }
        
        @UserDefinedConfigurationParameter(label="MockEnum", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
        public final void setMockEnum(DirectionsEnum value)
        {
            _mockEnum = value;
        }
        
        
        @UserDefinedConfigurationParameter(label="Invalid", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
        public final float getMockInvalid()
        {
            return _mockInvalid;
        }
        
        @UserDefinedConfigurationParameter(label="Invalid", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
        public final void setMockInvalid(float value)
        {
            _mockInvalid = value;
        }
        
        public final IDatabaseProvider getDatabaseProvider() throws UnsupportedOperationException
        {
            throw new UnsupportedOperationException();
        }
        
        public final String getConnectionString() throws UnsupportedOperationException
        {
            throw new UnsupportedOperationException();
        }
        
        public final String getConnectionStringOverride() throws UnsupportedOperationException
        {
            throw new UnsupportedOperationException();
        }
        
        public final void setConnectionStringOverride(String value) throws UnsupportedOperationException
        {
            throw new UnsupportedOperationException();
        }
        
        public final String getDatabaseIdentifier() throws UnsupportedOperationException
        {
            throw new UnsupportedOperationException();
        }
        
        public final void setDatabaseIdentifier(String value) throws UnsupportedOperationException
        {
            throw new UnsupportedOperationException();
        }
        
        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(null, null, null);
        
        public final AdvancedConfiguration getAdvancedConfiguration()
        {
            return advancedConfiguration;
        }
        
        public final IRuntimeDatabaseConfiguration getRuntimeDatabaseConfiguration()
        {
            return null;
        }
    }
    
    private MockDatabaseConfiguration config;
    private MetaDatabaseConfiguration wrapper;
    
    public void setUp() {
        config = new MockDatabaseConfiguration();
        wrapper = new MetaDatabaseConfiguration(config);
    }
    
    @Test
    @TestDetails(Description="Check conversion for enum parameters", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void testEnumValueConvertion() {
        
        config.setMockEnum( DirectionsEnum.Down );
        Assert.assertEquals((Object) ("Down"), (Object) (wrapper.getParameter("MockEnum").get()));
        
        wrapper.getParameter("MockEnum").set("Left");
        Assert.assertEquals((Object) (DirectionsEnum.Left), (Object) (config.getMockEnum()));
        
        wrapper.getParameter("MockEnum").set("");
        Assert.assertEquals("Empty string should be converted to the first Enum value returned by Enum.GetValues in C# and getEnumConstants in Java", (Object) (ParameterTests.DirectionsEnum.values()[0]), (Object) (config.getMockEnum()));
        
    }
    
    
    @Test
    @TestDetails(Description="Check conversion for int parameters", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void testIntValueConvertion() {
        
        config.setMockInt( 1 );
        Assert.assertEquals((Object) ("1"), (Object) (wrapper.getParameter("MockInt").get()));
        
        wrapper.getParameter("MockInt").set("3");
        Assert.assertEquals((Object) (3), (Object) (config.getMockInt()));
        
        wrapper.getParameter("MockInt").set("");
        Assert.assertEquals("Empty string should be converted to int 0", (Object) (0), (Object) (config.getMockInt()));
        
    }
    
    
    @Test
    @TestDetails(Description="Check conversion for text parameters", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void testTextValueConvertion() {
        
        config.setMockText( "o gawd" );
        Assert.assertEquals((Object) ("o gawd"), (Object) (wrapper.getParameter("MockText").get()));
        
        wrapper.getParameter("MockText").set("o my");
        Assert.assertEquals((Object) ("o my"), (Object) (config.getMockText()));
        
    }
    
    
    @Test
    @TestDetails(Description="Check conversion for bool parameters", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void testBoolValueConvertion() {
        
        config.setMockBool( true );
        Assert.assertEquals((Object) ("true"), (Object) (wrapper.getParameter("MockBool").get()));
        
        wrapper.getParameter("MockBool").set("false");
        Assert.assertEquals((Object) (false), (Object) (config.isMockBool()));
        
        wrapper.getParameter("MockBool").set("true");
        Assert.assertEquals((Object) (true), (Object) (config.isMockBool()));
        
        wrapper.getParameter("MockBool").set("");
        Assert.assertEquals("Empty string should be converted to boolean false", (Object) (false), (Object) (config.isMockBool()));
        
    }
    
    
    @Test
    @TestDetails(Description="Check if a parameter with value null is returned as an empty string", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void testNullValueParameterReturnedAsEmptyString() {
        Assert.assertEquals((Object) (""), (Object) (wrapper.getParameter("MockText").get()));
    }
    
    
    @Test(expected=ConfigurationReflectionException.class)
    @TestDetails(Description="Check if setting parameter with invalid type throws an exception", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void testSettingParameterWithUnsupportedTypeConversionThrowsException() {
        wrapper.getParameter("MockInvalid").set("1.233");
    }
    
    
    @Test
    @TestDetails(Description="Check if we can Get AdvancedConnectionStringField from wrapper", CreatedBy="lfl", Feature="Database Abstraction Layer", TestIssue="609920")
    public final void testGetAdvancedConnectionStringField() {
        config = new MockDatabaseConfiguration();
        config.getAdvancedConfiguration().setAdvancedConnectionStringField( "nonnull" );
        wrapper = new MetaDatabaseConfiguration(config);
        Assert.assertEquals((Object) ("nonnull"), (Object) (wrapper.getParameter("AdvancedConnectionStringField").get()));
    }
    
    
    @Test
    @TestDetails(Description="Check if we can Set AdvancedConnectionStringField thru wrapper", CreatedBy="lfl", Feature="Database Abstraction Layer", TestIssue="609920")
    public final void testSetAdvancedConnectionStringField() {
        config = new MockDatabaseConfiguration();
        config.getAdvancedConfiguration().setAdvancedConnectionStringField( "nonnull" );
        wrapper = new MetaDatabaseConfiguration(config);
        wrapper.getParameter("AdvancedConnectionStringField").set("otherNonNull");
        Assert.assertEquals((Object) ("otherNonNull"), (Object) (config.getAdvancedConfiguration().getAdvancedConnectionStringField()));
    }
    
    
}
