/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.servertests.databaseprovider.framework;

import java.sql.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;
import linqbridge.linq.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.executionservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import java.math.BigDecimal;


public abstract class BaseDatabaseProviderTest1<TDatabaseProvider extends IDatabaseProvider, TConfiguration extends IDatabaseProviderTestConfiguration<TDatabaseProvider>> extends BaseDatabaseProviderTest implements IGenericObject {
    
    private static final <TDatabaseProvider extends IDatabaseProvider, TConfiguration extends IDatabaseProviderTestConfiguration<TDatabaseProvider>> TConfiguration getConfigurationField(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TConfiguration> classTypeArg_TConfiguration) {
        BaseDatabaseProviderTest1StaticsHandler<TDatabaseProvider, TConfiguration> staticsHandler = staticInitBaseDatabaseProviderTest1(classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration);
        return staticsHandler.configurationField;
    }
    
    private static final <TDatabaseProvider extends IDatabaseProvider, TConfiguration extends IDatabaseProviderTestConfiguration<TDatabaseProvider>> void setConfigurationField(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TConfiguration> classTypeArg_TConfiguration, TConfiguration value) {
        BaseDatabaseProviderTest1StaticsHandler<TDatabaseProvider, TConfiguration> staticsHandler = staticInitBaseDatabaseProviderTest1(classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration);
        staticsHandler.configurationField = value;
    }
    
    
    public static <TDatabaseProvider extends IDatabaseProvider, TConfiguration extends IDatabaseProviderTestConfiguration<TDatabaseProvider>> void setupCurrentThreadCulture(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TConfiguration> classTypeArg_TConfiguration)
    {
        
    }
    
    
    
    public void setUp() {
        super.setUp();
        BaseDatabaseProviderTest1.<TDatabaseProvider, TConfiguration>setupCurrentThreadCulture(classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration);
    }
    
    public void initFixture() throws Exception {
        super.initFixture();
        executeBootstrapScripts();
    }
    
    public void disposeFixture() throws Exception {
        executeTeardownScripts();
        super.disposeFixture();
    }
    
    private final void executeBootstrapScripts() throws Exception {
        java.util.Iterator<IDatabaseProviderTestCase<TDatabaseProvider>> testCaseIter = (getConfigurationField(classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration).getTestCases()).iterator();
        try {
            IDatabaseProviderTestCase<TDatabaseProvider> testCase;
            while (testCaseIter.hasNext()) {
                testCase = testCaseIter.next();
                testCase.executeBootstrap();
            }
        } finally {
            CollectionUtils.dispose(testCaseIter);
        }
    }
    
    private final void executeTeardownScripts() throws Exception {
        java.util.Iterator<IDatabaseProviderTestCase<TDatabaseProvider>> testCaseIter = (getConfigurationField(classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration).getTestCases()).iterator();
        try {
            IDatabaseProviderTestCase<TDatabaseProvider> testCase;
            while (testCaseIter.hasNext()) {
                testCase = testCaseIter.next();
                testCase.executeTeardown();
            }
        } finally {
            CollectionUtils.dispose(testCaseIter);
        }
    }
    public BaseDatabaseProviderTest1(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TConfiguration> classTypeArg_TConfiguration) {
        instanceInitBaseDatabaseProviderTest1(classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration);
    }
    
    public TypeInformation<?> getTypeInformation() {
        return TypeInformation.<BaseDatabaseProviderTest1<TDatabaseProvider, TConfiguration>>get(BaseDatabaseProviderTest1.class, classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration);
    }
    
    private final void instanceInitBaseDatabaseProviderTest1(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TConfiguration> classTypeArg_TConfiguration) {
        this.classTypeArg_TDatabaseProvider = classTypeArg_TDatabaseProvider;
        this.classTypeArg_TConfiguration = classTypeArg_TConfiguration;
    }
    protected static <TDatabaseProvider extends IDatabaseProvider, TConfiguration extends IDatabaseProviderTestConfiguration<TDatabaseProvider>> BaseDatabaseProviderTest1StaticsHandler<TDatabaseProvider, TConfiguration> staticInitBaseDatabaseProviderTest1(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TConfiguration> classTypeArg_TConfiguration) {
        @SuppressWarnings("unchecked")
        BaseDatabaseProviderTest1StaticsHandler<TDatabaseProvider, TConfiguration> result = StaticsHandlerFactory.get(BaseDatabaseProviderTest1StaticsHandler.class, BaseDatabaseProviderTest1StaticsHandler.staticsHandlerMap, classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration);
        
        if (!result.isInitialized()) {
            synchronized (result) {
                if (result.isNew()) {
                    result.startInitialization();
                    try {
                        result.staticInit(classTypeArg_TDatabaseProvider, classTypeArg_TConfiguration);
                    } finally {
                        result.finishInitialization();
                    }
                }
            }
        }
        
        return result;
    }
    protected TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider;
    protected TypeInformation<TConfiguration> classTypeArg_TConfiguration;
    private static final class BaseDatabaseProviderTest1StaticsHandler<TDatabaseProvider extends IDatabaseProvider, TConfiguration extends IDatabaseProviderTestConfiguration<TDatabaseProvider>> extends StaticsHandler {
        @SuppressWarnings("rawtypes")
        public static final java.util.Map<TypeArguments, BaseDatabaseProviderTest1StaticsHandler> staticsHandlerMap = new java.util.HashMap<TypeArguments, BaseDatabaseProviderTest1StaticsHandler>();
        public TConfiguration configurationField;
        public void staticInit(final TypeInformation<TDatabaseProvider> classTypeArg_TDatabaseProvider, final TypeInformation<TConfiguration> classTypeArg_TConfiguration) {
            configurationField = classTypeArg_TConfiguration.newInstance();
        }
    }
    
}
