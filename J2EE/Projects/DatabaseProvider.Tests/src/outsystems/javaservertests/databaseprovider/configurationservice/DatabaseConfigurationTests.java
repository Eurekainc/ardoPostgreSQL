/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.configurationservice;

import java.io.*;
import java.text.*;
import java.util.*;
import org.junit.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.configurationservice.IIntegrationDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.MetaDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.IterativeTestCase;
import outsystems.junit.framework.JUnitTestAdapter;
import outsystems.junit.framework.TestDetails;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTestCase;
import outsystems.testscommon.AssertUtils;


@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class DatabaseConfigurationTests extends DatabaseProviderTest<TestConfiguration> {
    public static final TypeInformation<DatabaseConfigurationTests> TypeInfo = TypeInformation.get(DatabaseConfigurationTests.class);
    private final IIntegrationDatabaseConfiguration createIntegrationDatabaseConfiguration(DatabaseProviderTestCase tc) {
        return tc.getServices().getDatabaseConfiguration().getDatabaseProvider().createEmptyIntegrationDatabaseConfiguration();
    }
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    @TestDetails(Description="Checks if parameters with a visibility checker have a corresponding method", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void checkIfVisibilityMethodsExist(DatabaseProviderTestCase tc) {
        List<IUserDefinedParameter> configuration = new MetaDatabaseConfiguration(createIntegrationDatabaseConfiguration(tc)).getVisibleParameters();
    }
    
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    @TestDetails(Description="Checks if all parameters (annotated plus extra) have getters and setters", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void checkIfEveryPropertyHasGettersAndSetters(DatabaseProviderTestCase tc) {
        new MetaDatabaseConfiguration(createIntegrationDatabaseConfiguration(tc));
    }
    
    
    @IterativeTestCase(iteratorType=TestConfiguration.class)
    @TestDetails(Description="Checks if all annotated parameters have a supported type", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void checkIfEveryAnnotatedPropertyHasSupportedType(DatabaseProviderTestCase tc) throws IOException {
        Func.Func1_Lambda<Class<?>, Boolean> IsSupported = (Class<?> t) -> {
            
            ArrayList<Class<?>> supportedTypes = new ArrayList<Class<?>>(Arrays.asList(
                int.class, 
                String.class, 
                boolean.class));
            
            return Boolean.valueOf(t.isEnum() || supportedTypes.contains(t));
        };
        
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(createIntegrationDatabaseConfiguration(tc));
        StringWriter writer = new StringWriter();
        java.util.Iterator<IParameter> parameterIter = (wrapper.getParameters()).iterator();
        try {
            IParameter parameter;
            while (parameterIter.hasNext()) {
                parameter = parameterIter.next();
                if (!IsSupported.execute(parameter.getType()))
                {
                    StreamUtils.writeLine(writer, "Parameter " + parameter.getName() + " has annottated property with unsupported type " + parameter.getType());
                }
            }
        } finally {
            CollectionUtils.dispose(parameterIter);
        }
        String errorMessages = writer.toString();
        
        Assert.assertEquals(errorMessages, (Object) (""), (Object) (errorMessages));
    }
    
    
    public DatabaseConfigurationTests() {
        super(TestConfiguration.TypeInfo);
    }
}
