/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.configurationservice;

import java.nio.*;
import java.nio.charset.*;
import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import org.junit.*;
import outsystems.hubedition.extensibility.data.configurationservice.*;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import java.util.Map;
import linqbridge.linq.LinqMethods;
import outsystems.hubedition.extensibility.data.configurationservice.AdvancedConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.BaseDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.IUserDefinedParameter;
import outsystems.hubedition.extensibility.data.configurationservice.metaconfiguration.MetaDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.JUnitTestAdapter;
import outsystems.junit.framework.TestDetails;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.testscommon.AssertUtils;
import outsystems.testscommon.CollectionAssert;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class MetaDatabaseConfigurationTests extends DashboardTest {
    public static final TypeInformation<MetaDatabaseConfigurationTests> TypeInfo = TypeInformation.get(MetaDatabaseConfigurationTests.class);
    
    public static enum DirectionsEnum implements IEnum {
        Up,
        Down,
        Left,
        Right;
        
        public static final TypeInformation<DirectionsEnum> TypeInfo = TypeInformation.get(DirectionsEnum.class);
        public int getIntValue() {
            return ordinal();
        }
        
        public static String[] names() {
            return EnumUtils.getNames(values());
        }
        
        public static DirectionsEnum getDefaultValue() {
            return Up;
        }
        
        private static Map<Integer, DirectionsEnum> intToEnum;
        private static Map<Integer, DirectionsEnum> getIntToEnum() {
            if (intToEnum == null) {
                intToEnum = EnumUtils.getIntToEnumValueMap(values());
            }
            return intToEnum;
        }
        
        private static Map<String, DirectionsEnum> lowerCaseNameToEnum;
        private static Map<String, DirectionsEnum> getLowerCaseNameToEnum() {
            if (lowerCaseNameToEnum == null) {
                lowerCaseNameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/true);
            }
            return lowerCaseNameToEnum;
        }
        
        private static Map<String, DirectionsEnum> nameToEnum;
        private static Map<String, DirectionsEnum> getNameToEnum() {
            if (nameToEnum == null) {
                nameToEnum = EnumUtils.getNameToEnumValueMap(values(), /*lowerCase*/false);
            }
            return nameToEnum;
        }
        
        public static DirectionsEnum valueOf(int value) {
            DirectionsEnum result = getIntToEnum().get(value);
            if (result == null) {
                throw new IllegalArgumentException("No enum const class DirectionsEnum with int value " + value);
            }
            return result;
        }
        
        
        public static DirectionsEnum valueOf(String value, boolean ignoreCase) {
            if (!ignoreCase) {
                return valueOf(value);
            }
            DirectionsEnum result = getLowerCaseNameToEnum().get(value.toLowerCase());
            if (result == null) {
                throw new IllegalArgumentException("No enum const class DirectionsEnum." + value);
            }
            return result;
        }
        
        
        public static boolean isDefined(String value) {
            return getNameToEnum().containsKey(value);
        }
        
        public static boolean isDefined(int value) {
            return getIntToEnum().containsKey(value);
        }
    }
    
    public static class MockDatabaseConfiguration extends BaseDatabaseConfiguration {
        private String _mockText;
        private String _mockText2;
        private int _mockInt;
        private boolean _mockBool;
        private DirectionsEnum _mockEnum;
        public static final TypeInformation<MockDatabaseConfiguration> TypeInfo = TypeInformation.get(MockDatabaseConfiguration.class);
        
        private static final String INVISIBLE_TEXT_VALUE = "Invisibile";
        
        public IDatabaseProvider getDatabaseProvider()
        {
            throw new UnsupportedOperationException();
        }
        
        public String getDatabaseIdentifier()
        {
            return "Identifier";
        }
        
        @UserDefinedConfigurationParameter(label="MockText", region=ParameterRegion.DatabaseLocation, prompt="MockText_Prompt", order=0, isMandatory=false, isPassword=true, visibilityChecker="IsTextVisible")
        public final String getMockText()
        {
            return _mockText;
        }
        
        @UserDefinedConfigurationParameter(label="MockText", region=ParameterRegion.DatabaseLocation, prompt="MockText_Prompt", order=0, isMandatory=false, isPassword=true, visibilityChecker="IsTextVisible")
        public final void setMockText(String value)
        {
            _mockText = value;
        }
        
        @UserDefinedConfigurationParameter(label="MockText2", region=ParameterRegion.DatabaseLocation, prompt="MockText2_Prompt", order=1, isMandatory=true, isPassword=false)
        public final String getMockText2()
        {
            return _mockText2;
        }
        
        @UserDefinedConfigurationParameter(label="MockText2", region=ParameterRegion.DatabaseLocation, prompt="MockText2_Prompt", order=1, isMandatory=true, isPassword=false)
        public final void setMockText2(String value)
        {
            _mockText2 = value;
        }
        
        @UserDefinedConfigurationParameter(label="MockInt", region=ParameterRegion.UserSpecific, prompt="MockInt_Prompt", order=1, isMandatory=true, example="MockInt_Example")
        public final int getMockInt()
        {
            return _mockInt;
        }
        
        @UserDefinedConfigurationParameter(label="MockInt", region=ParameterRegion.UserSpecific, prompt="MockInt_Prompt", order=1, isMandatory=true, example="MockInt_Example")
        public final void setMockInt(int value)
        {
            _mockInt = value;
        }
        
        @UserDefinedConfigurationParameter(label="MockBool", region=ParameterRegion.UserAdminSpecific, prompt="MockBool_Prompt", order=2, example="MockBool_Example")
        public final boolean isMockBool()
        {
            return _mockBool;
        }
        
        @UserDefinedConfigurationParameter(label="MockBool", region=ParameterRegion.UserAdminSpecific, prompt="MockBool_Prompt", order=2, example="MockBool_Example")
        public final void setMockBool(boolean value)
        {
            _mockBool = value;
        }
        
        @UserDefinedConfigurationParameter(label="MockEnum", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
        public final DirectionsEnum getMockEnum()
        {
            return _mockEnum;
        }
        
        @UserDefinedConfigurationParameter(label="MockEnum", region=ParameterRegion.Advanced, prompt="MockEnum_Prompt", order=3, example="MockEnum_Example")
        public final void setMockEnum(DirectionsEnum value)
        {
            _mockEnum = value;
        }
        
        public final boolean isTextVisible() {
            return StringUtils.equals(getMockText(), null) || !getMockText().equals(INVISIBLE_TEXT_VALUE);
        }
        
        public final void setConnectionStringTemplateExpressionProp(String value) {
            advancedConfiguration = new AdvancedConfiguration(null, null, value);
        }
        
        public boolean equals(Object obj) {
            if (!super.equals(obj))
            {
                return false;
            }
            
            MockDatabaseConfiguration other = ClassUtils.safeCast(obj, MetaDatabaseConfigurationTests.MockDatabaseConfiguration.class);
            
            return ((other != null) && equalsBasedOnParts(new Object[] { getMockText(), Integer.valueOf(getMockInt()), Boolean.valueOf(isMockBool()), getMockEnum() },
    new Object[] { other.getMockText(), Integer.valueOf(other.getMockInt()), Boolean.valueOf(other.isMockBool()), other.getMockEnum() }));
        }
        
        public int hashCode() {
            return super.hashCode() ^ getHashCodeBasedOnParts(getMockText(), Integer.valueOf(getMockInt()), Boolean.valueOf(isMockBool()), getMockEnum());
        }
        
        protected String assembleBasicConnectionString() {
            return new StringBuilder().append("MockText=").append(getMockText()).append("MockInt=").append(getMockInt()).append("MockBool=").append(isMockBool()).append("MockEnum=").append(getMockEnum()).toString();
        }
        
        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(null, null, null);
        
        public AdvancedConfiguration getAdvancedConfiguration()
        {
            return advancedConfiguration;
        }
        
        public void setAdvancedConfiguration(AdvancedConfiguration value)
        {
            advancedConfiguration = value;
        }
        
        protected String assembleAdvancedConnectionString() {
            return getAdvancedConfiguration().getAdvancedConnectionStringField();
        }
        
        public IRuntimeDatabaseConfiguration getRuntimeDatabaseConfiguration()
        {
            throw new UnsupportedOperationException();
        }
    }
    
    @Test
    @TestDetails(Description="Checks if tagged parameters are discovered", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void annotatedParametersAreDiscovered() {
        
        MockDatabaseConfiguration config = new MockDatabaseConfiguration();
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
        
        ArrayList<String> expectedAnnotatedParameters = new ArrayList<String>(Arrays.asList(
            "MockText", 
            "MockText2", 
            "MockInt", 
            "MockBool", 
            "MockEnum"));
        
        ArrayList<String> obtainedParameters = LinqMethods.toList(LinqMethods.select(wrapper.getVisibleParameters(), (IUserDefinedParameter p) -> {
            return p.getName();
        }));
        
        CollectionAssert.areEquivalent(expectedAnnotatedParameters, obtainedParameters);
        
    }
    
    
    @Test
    @TestDetails(Description="Checks if extra parameters are discovered", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void nonUserDefinedParametersAreDiscovered() {
        
        MockDatabaseConfiguration config = new MockDatabaseConfiguration();
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
        
        ArrayList<String> expectedParameters = new ArrayList<String>(Arrays.asList(
            "ConnectionStringOverride"));
        
        ArrayList<String> obtainedParameters = LinqMethods.toList(LinqMethods.select(LinqMethods.where(wrapper.getParameters(), (IParameter p) -> {
            return !(p instanceof IUserDefinedParameter);
        }), (IParameter p) -> {
            return p.getName();
        }));
        
        CollectionAssert.areEquivalent(expectedParameters, obtainedParameters);
    }
    
    
    @Test
    @TestDetails(Description="Check if GetParameter retrives an annotated parameter", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void getParameterFindsOnAnnotatedParameters() {
        
        MockDatabaseConfiguration config = new MockDatabaseConfiguration();
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
        
        IParameter retrieved = wrapper.getParameter("MockText");
        
        Assert.assertEquals((Object) ("MockText"), (Object) (retrieved.getName()));
    }
    
    
    @Test
    @TestDetails(Description="Check if GetParameter retrives an extra parameter", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void getParameterFindsOnExtraParameters() {
        
        MockDatabaseConfiguration config = new MockDatabaseConfiguration();
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
        
        IParameter retrived = wrapper.getParameter("ConnectionStringOverride");
        
        Assert.assertEquals((Object) ("ConnectionStringOverride"), (Object) (retrived.getName()));
    }
    
    
    @Test
    @TestDetails(Description="Check if GetParameter returns null when no parameter is found", CreatedBy="rcn", Feature="Database Abstraction Layer", TestIssue="613292")
    public final void getParameterReturnsNullWhenNoParameterFound() {
        
        MockDatabaseConfiguration config = new MockDatabaseConfiguration();
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
        
        IParameter retrived = wrapper.getParameter("IDontExist");
        
        Assert.assertNull("Found non existing parameter " + "IDontExist", retrived);
        
    }
    
    
    @Test
    @TestDetails(Description="Check that only Advanced And UserSpecific appear, Template Expression Hidden", CreatedBy="lfl", Feature="Database Abstraction Layer", TestIssue="609920")
    public final void visibleParametersOfAdvancedConfiguration() {
        MockDatabaseConfiguration config = new MockDatabaseConfiguration();
        config.getAdvancedConfiguration().setAdvancedConnectionStringField( "" );
        
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
        
        ArrayList<String> expectedAnnotatedParameters = new ArrayList<String>(Arrays.asList(
            "MockInt", 
            "AdvancedConnectionStringField"));
        
        ArrayList<String> obtainedParameters = LinqMethods.toList(LinqMethods.select(wrapper.getVisibleParameters(), (IUserDefinedParameter p) -> {
            return p.getName();
        }));
        
        CollectionAssert.areEquivalent(expectedAnnotatedParameters, obtainedParameters);
    }
    
    
    @Test
    @TestDetails(Description="Check that only Advanced And UserSpecific, Template Expression NOT Hidden", CreatedBy="lfl", Feature="Database Abstraction Layer", TestIssue="609920")
    public final void visibleParametersOfAdvancedConfigurationWithTemplateExpression() {
        MockDatabaseConfiguration config = new MockDatabaseConfiguration();
        config.setConnectionStringTemplateExpressionProp("Some Value");
        config.getAdvancedConfiguration().setAdvancedConnectionStringField( "" );
        
        
        MetaDatabaseConfiguration wrapper = new MetaDatabaseConfiguration(config);
        
        ArrayList<String> expectedAnnotatedParameters = new ArrayList<String>(Arrays.asList(
            "MockInt", 
            "ConnectionStringTemplateExpression", 
            "AdvancedConnectionStringField"));
        
        ArrayList<String> obtainedParameters = LinqMethods.toList(LinqMethods.select(wrapper.getVisibleParameters(), (IUserDefinedParameter p) -> {
            return p.getName();
        }));
        
        CollectionAssert.areEquivalent(expectedAnnotatedParameters, obtainedParameters);
    }
    
    
}
