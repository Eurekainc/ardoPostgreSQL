/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.dmlservice;

import java.text.*;
import java.util.*;
import org.junit.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.extensibility.data.dmlservice.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLDefaultValues;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.IterativeTestCase;
import outsystems.junit.framework.TestDetails;
import outsystems.servertests.databaseprovider.framework.BaseDatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTestCase;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class DMLDefaultValuesTests extends DMLTest {
    public static final TypeInformation<DMLDefaultValuesTests> TypeInfo = TypeInformation.get(DMLDefaultValuesTests.class);
    
    private static final String errorMessageFormat = "Error validating {0} default value with SQL: {1}";
    
    private final <T> void assertValue(final TypeInformation<T> methodTypeArg_T, IDatabaseServices services, String defaultValueName, String defaultValue, Object expectedValue) throws Exception {
        SQLExecutor sqlExecutor = new SQLExecutor(services);
        String sql = "SELECT " + defaultValue + " o1 FROM DUMMY" + getMachineName();
        Object result = sqlExecutor.executeScalar(sql).<T>runtimeValue(methodTypeArg_T);
        assertEqual(expectedValue, result, StringUtils.format(errorMessageFormat, new Object[] {defaultValueName, sql}));
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the Integer default value returns the number zero", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testIntegerDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Integer", databaseServices.getDMLService().getDefaultValues().getInteger(), Integer.valueOf(0));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the LongInteger default value returns the number zero", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="lsl")
    public final void testLongIntegerDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<Long>assertValue(TypeInformation.Long, databaseServices, "LongInteger", databaseServices.getDMLService().getDefaultValues().getLongInteger(), Long.valueOf((long) 0));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the Decimal default value returns the number zero", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testDecimalDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Decimal", databaseServices.getDMLService().getDefaultValues().getDecimal(), new BigDecimal("0"));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the Boolean default value returns the boolean value 'false'", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testBooleanDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<Boolean>assertValue(TypeInformation.Boolean, databaseServices, "Boolean", databaseServices.getDMLService().getDefaultValues().getBoolean(), Boolean.valueOf(false));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the Text default value returns an empty text value", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testTextDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<String>assertValue(TypeInformation.String, databaseServices, "Text", databaseServices.getDMLService().getDefaultValues().getText(), "");
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the Date default value returns a date value that represents the date '1900-01-01'", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testDateDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<DateTime>assertValue(TypeInformation.get(DateTime.class), databaseServices, "Date", databaseServices.getDMLService().getDefaultValues().getDate(), new DateTime(1900, 1, 1, 0, 0, 0));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the Time default value returns a time value that represents the time '00:00:00'", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testTimeDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<DateTime>assertValue(TypeInformation.get(DateTime.class), databaseServices, "Time", databaseServices.getDMLService().getDefaultValues().getTime(), new DateTime(1900, 1, 1, 0, 0, 0));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the DateTime default value returns a datetime value that represents the datetime '1900-01-01 00:00:00'", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testDateTimeDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<DateTime>assertValue(TypeInformation.get(DateTime.class), databaseServices, "DateTime", databaseServices.getDMLService().getDefaultValues().getDateTime(), new DateTime(1900, 1, 1, 0, 0, 0));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the BinaryData default value returns a null value or an empty byte array", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testBinaryDataDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        SQLExecutor sqlExecutor = new SQLExecutor(databaseServices);
        IDMLDefaultValues dmlDefaultValues = databaseServices.getDMLService().getDefaultValues();
        String sql = "SELECT " + dmlDefaultValues.getBinaryData() + " o1 FROM DUMMY" + getMachineName();
        byte[] result = sqlExecutor.executeScalar(sql).<byte[]>runtimeValue(TypeInformation.get(byte[].class));
        assertEqual(Integer.valueOf(0), Integer.valueOf(((result != null? result : new byte[0])).length), StringUtils.format(errorMessageFormat, new Object[] {"Null", sql}));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that reading the value produced by the Null default value returns a nonexistent value", TestIssue="610152", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testNullDefaultValue(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        this.<Object>assertValue(TypeInformation.Object, databaseServices, "Null", databaseServices.getDMLService().getDefaultValues().getNull(), null);
    }
    
}
