/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.dmlservice;

import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import org.junit.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLOperators;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.IterativeTestCase;
import outsystems.junit.framework.TestDetails;
import outsystems.servertests.databaseprovider.framework.BaseDatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTestCase;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class DMLOperatorsTests extends DMLTest {
    public static final TypeInformation<DMLOperatorsTests> TypeInfo = TypeInformation.get(DMLOperatorsTests.class);
    
    private static final String ERROR_MESSAGE_FORMAT = "Error executing operator {0}({1}) with SQL: {2}";
    
    
    public static class Person {
        private int _personId;
        private String _name;
        private int _age;
        private BigDecimal _weight = ClassUtils.BigDecimalDefaultValue;
        private boolean _dead;
        private DateTime _lastLogin = ClassUtils.DateTimeDefaultValue;
        public static final TypeInformation<Person> TypeInfo = TypeInformation.get(Person.class);
        
        
        public static final Person DaveLauper = new Person(1, "DaveLauper", 21, new BigDecimal("80.5"), true, new DateTime(2014, 3, 13, 14, 50, 23));
        
        public static final Person JohnOps = new Person(2, "JohnOps", 30, new BigDecimal("100.9"), false, new DateTime(2014, 3, 14, 10, 0, 36));
        
        public Person(int personId, String name, int age, BigDecimal weight, boolean dead, DateTime lastLogin){
            setPersonId( personId );
            setName( name );
            setAge( age );
            setWeight( weight );
            setDead( dead );
            setLastLogin( lastLogin );
        }
        
        
        public final int getPersonId()
        {
            return _personId;
        }
        
        
        public final void setPersonId(int value)
        {
            _personId = value;
        }
        
        public final String getName()
        {
            return _name;
        }
        
        
        public final void setName(String value)
        {
            _name = value;
        }
        
        public final int getAge()
        {
            return _age;
        }
        
        
        public final void setAge(int value)
        {
            _age = value;
        }
        
        public final BigDecimal getWeight()
        {
            return _weight;
        }
        
        
        public final void setWeight(BigDecimal value)
        {
            _weight = value;
        }
        
        public final boolean isDead()
        {
            return _dead;
        }
        
        
        public final void setDead(boolean value)
        {
            _dead = value;
        }
        
        public final DateTime getLastLogin()
        {
            return _lastLogin;
        }
        
        
        public final void setLastLogin(DateTime value)
        {
            _lastLogin = value;
        }
    }
    
    private static <T> void assertValue(final TypeInformation<T> methodTypeArg_T, IDatabaseServices services, String funcName, String sql, T expectedValue, Object ... parameters) throws Exception {
        final RefParmHolder<SQLExecutor> sqlExecutor = new RefParmHolder<SQLExecutor>(new SQLExecutor(services));
        if (parameters.length != 0)
        {
            sql = StringUtils.format(sql, LinqMethods.toArray(TypeInformation.Object, LinqMethods.select(Arrays.asList(parameters), (Object o, Integer i) -> {
    return sqlExecutor.getVal().getParameterName(i, o.getClass());
})));
        }
        T result = sqlExecutor.getVal().executeScalar(sql, parameters).<T>runtimeValue(methodTypeArg_T);
        assertEqual(expectedValue, result, StringUtils.format(ERROR_MESSAGE_FORMAT, new Object[] {funcName, StringUtils.join(", ", LinqMethods.toArray(TypeInformation.String, LinqMethods.select(Arrays.asList(parameters), (Object o) -> {
    return o.toString();
}))), sql}));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Equal operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testEqual(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Equal", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().equal("NAME", "{0}"), Person.DaveLauper.getPersonId(), Person.DaveLauper.getName());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Equal", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().equal("AGE", "{0}"), Person.DaveLauper.getPersonId(), Integer.valueOf(Person.DaveLauper.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Equal", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().equal("WEIGHT", "{0}"), Person.DaveLauper.getPersonId(), Person.DaveLauper.getWeight());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Equal", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().equal("DEAD", "{0}"), Person.DaveLauper.getPersonId(), Boolean.valueOf(Person.DaveLauper.isDead()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Equal", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().equal("LASTLOGIN", "{0}"), Person.DaveLauper.getPersonId(), Person.DaveLauper.getLastLogin());
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the NotEqual operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testNotEqual(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "NotEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().notEqual("NAME", "{0}"), Person.DaveLauper.getPersonId(), Person.JohnOps.getName());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "NotEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().notEqual("AGE", "{0}"), Person.DaveLauper.getPersonId(), Integer.valueOf(Person.JohnOps.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "NotEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().notEqual("WEIGHT", "{0}"), Person.DaveLauper.getPersonId(), Person.JohnOps.getWeight());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "NotEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().notEqual("DEAD", "{0}"), Person.DaveLauper.getPersonId(), Boolean.valueOf(Person.JohnOps.isDead()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "NotEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().notEqual("LASTLOGIN", "{0}"), Person.DaveLauper.getPersonId(), Person.JohnOps.getLastLogin());
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the LessThan operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testLessThan(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThen("NAME", "{0}"), Person.DaveLauper.getPersonId(), Person.JohnOps.getName());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThen("AGE", "{0}"), Person.DaveLauper.getPersonId(), Integer.valueOf(Person.JohnOps.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThen("WEIGHT", "{0}"), Person.DaveLauper.getPersonId(), Person.JohnOps.getWeight());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThen("LASTLOGIN", "{0}"), Person.DaveLauper.getPersonId(), Person.JohnOps.getLastLogin());
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the LessThanOrEqual operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testLessThanOrEqual(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThanOrEqual("NAME", "{0}"), Person.DaveLauper.getPersonId(), Person.DaveLauper.getName());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThanOrEqual("AGE", "{0}"), Person.DaveLauper.getPersonId(), Integer.valueOf(Person.DaveLauper.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThanOrEqual("WEIGHT", "{0}"), Person.DaveLauper.getPersonId(), Person.DaveLauper.getWeight());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "LessThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().lessThanOrEqual("LASTLOGIN", "{0}"), Person.DaveLauper.getPersonId(), Person.DaveLauper.getLastLogin());
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the GreaterThan operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testGreaterThan(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThan("NAME", "{0}"), Person.JohnOps.getPersonId(), Person.DaveLauper.getName());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThan("AGE", "{0}"), Person.JohnOps.getPersonId(), Integer.valueOf(Person.DaveLauper.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThan("WEIGHT", "{0}"), Person.JohnOps.getPersonId(), Person.DaveLauper.getWeight());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThan", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThan("LASTLOGIN", "{0}"), Person.JohnOps.getPersonId(), Person.DaveLauper.getLastLogin());
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the GreaterThanOrEqual operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testGreaterThanOrEqual(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThanOrEqual("NAME", "{0}"), Person.JohnOps.getPersonId(), Person.JohnOps.getName());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThanOrEqual("AGE", "{0}"), Person.JohnOps.getPersonId(), Integer.valueOf(Person.JohnOps.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThanOrEqual("WEIGHT", "{0}"), Person.JohnOps.getPersonId(), Person.JohnOps.getWeight());
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "GreaterThanOrEqual", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().greaterThanOrEqual("LASTLOGIN", "{0}"), Person.JohnOps.getPersonId(), Person.JohnOps.getLastLogin());
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the And operator is correct. This test also uses the Equal operator.", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testAnd(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String nameEquals = databaseServices.getDMLService().getOperators().equal("NAME", "{0}");
        String ageEquals = databaseServices.getDMLService().getOperators().equal("AGE", "{1}");
        
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "And", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().and(nameEquals, ageEquals), 1, Person.DaveLauper.getName(), Integer.valueOf(Person.DaveLauper.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "And", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().and(nameEquals, ageEquals), 0, Person.DaveLauper.getName(), Integer.valueOf(Person.JohnOps.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "And", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().and(nameEquals, ageEquals), 0, Person.JohnOps.getName(), Integer.valueOf(Person.DaveLauper.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "And", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().and(nameEquals, ageEquals), 1, Person.JohnOps.getName(), Integer.valueOf(Person.JohnOps.getAge()));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Or operator is correct. This test also uses the Equal operator.", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testOr(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String nameEquals = databaseServices.getDMLService().getOperators().equal("NAME", "{0}");
        String ageEquals = databaseServices.getDMLService().getOperators().equal("AGE", "{1}");
        
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Or", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().or(nameEquals, ageEquals), 1, Person.DaveLauper.getName(), Integer.valueOf(Person.DaveLauper.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Or", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().or(nameEquals, ageEquals), 2, Person.DaveLauper.getName(), Integer.valueOf(Person.JohnOps.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Or", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().or(nameEquals, ageEquals), 2, Person.JohnOps.getName(), Integer.valueOf(Person.DaveLauper.getAge()));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Or", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().or(nameEquals, ageEquals), 1, Person.JohnOps.getName(), Integer.valueOf(Person.JohnOps.getAge()));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Add operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testAdd(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Add", "SELECT " + databaseServices.getDMLService().getOperators().add("{0}", "{1}") + " FROM DUMMY" + getMachineName(), 2, Integer.valueOf(1), Integer.valueOf(1));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Add", "SELECT " + databaseServices.getDMLService().getOperators().add("{0}", "{1}") + " FROM DUMMY" + getMachineName(), 0, Integer.valueOf(1), Integer.valueOf(-1));
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Add", "SELECT " + databaseServices.getDMLService().getOperators().add("{0}", "{1}") + " FROM DUMMY" + getMachineName(), new BigDecimal("4"), new BigDecimal("3.14"), new BigDecimal("0.86"));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Subtract operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testSubtract(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Subtract", "SELECT " + databaseServices.getDMLService().getOperators().subtract("{0}", "{1}") + " FROM DUMMY" + getMachineName(), 0, Integer.valueOf(1), Integer.valueOf(1));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Subtract", "SELECT " + databaseServices.getDMLService().getOperators().subtract("{0}", "{1}") + " FROM DUMMY" + getMachineName(), -2, Integer.valueOf(-4), Integer.valueOf(-2));
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Subtract", "SELECT " + databaseServices.getDMLService().getOperators().subtract("{0}", "{1}") + " FROM DUMMY" + getMachineName(), new BigDecimal("0.86"), new BigDecimal("4"), new BigDecimal("3.14"));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Multiply operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testMultiply(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Multiply", "SELECT " + databaseServices.getDMLService().getOperators().multiply("{0}", "{1}") + " FROM DUMMY" + getMachineName(), 0, Integer.valueOf(1), Integer.valueOf(0));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Multiply", "SELECT " + databaseServices.getDMLService().getOperators().multiply("{0}", "{1}") + " FROM DUMMY" + getMachineName(), -1, Integer.valueOf(-1), Integer.valueOf(1));
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Multiply", "SELECT " + databaseServices.getDMLService().getOperators().multiply("{0}", "{1}") + " FROM DUMMY" + getMachineName(), new BigDecimal("6"), new BigDecimal("2"), new BigDecimal("3"));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Divide operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testDivide(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Divide", "SELECT " + databaseServices.getDMLService().getOperators().divide("{0}", "{1}") + " FROM DUMMY" + getMachineName(), new BigDecimal("0"), new BigDecimal("0"), new BigDecimal("1"));
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Divide", "SELECT " + databaseServices.getDMLService().getOperators().divide("{0}", "{1}") + " FROM DUMMY" + getMachineName(), new BigDecimal("-1"), new BigDecimal("-1"), new BigDecimal("1"));
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Divide", "SELECT " + databaseServices.getDMLService().getOperators().divide("{0}", "{1}") + " FROM DUMMY" + getMachineName(), new BigDecimal("1.5"), new BigDecimal("3"), new BigDecimal("2"));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Not operator is correct. This test also uses the Equal operator.", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testNot(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String ageEqual = databaseServices.getDMLService().getOperators().equal("AGE", "{0}");
        String notExpression = databaseServices.getDMLService().getOperators().not(ageEqual);
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Not", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + notExpression, Person.DaveLauper.getPersonId(), Integer.valueOf(Person.JohnOps.getAge()));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IsNotNull operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testIsNotNull(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "IsNotNull", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().isNotNull("DEAD"), Person.DaveLauper.getPersonId(), new Object[0]);
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IsNull operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testIsNull(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "IsNull", "SELECT PERSONID FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().isNull("DEAD"), Person.JohnOps.getPersonId(), new Object[0]);
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IsNull operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testNegative(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Negative", "SELECT " + databaseServices.getDMLService().getOperators().negative("{0}") + " FROM DUMMY" + getMachineName(), -1, Integer.valueOf(1));
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Negative", "SELECT " + databaseServices.getDMLService().getOperators().negative("{0}") + " FROM DUMMY" + getMachineName(), 1, Integer.valueOf(-1));
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Negative", "SELECT " + databaseServices.getDMLService().getOperators().negative("{0}") + " FROM DUMMY" + getMachineName(), new BigDecimal("-1.5"), new BigDecimal("1.5"));
        DMLOperatorsTests.<BigDecimal>assertValue(TypeInformation.BigDecimal, databaseServices, "Negative", "SELECT " + databaseServices.getDMLService().getOperators().negative("{0}") + " FROM DUMMY" + getMachineName(), new BigDecimal("1.5"), new BigDecimal("-1.5"));
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Concatenate operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testConcatenate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<String>assertValue(TypeInformation.String, databaseServices, "Concatenate", "SELECT " + databaseServices.getDMLService().getOperators().concatenate("{0}", "{1}") + " FROM DUMMY" + getMachineName(), "DaveLauper", "Dave", "Lauper");
        DMLOperatorsTests.<String>assertValue(TypeInformation.String, databaseServices, "Concatenate", "SELECT " + databaseServices.getDMLService().getOperators().concatenate("{0}", "{1}") + " FROM DUMMY" + getMachineName(), "Dave", "Dave", "");
        DMLOperatorsTests.<String>assertValue(TypeInformation.String, databaseServices, "Concatenate", "SELECT " + databaseServices.getDMLService().getOperators().concatenate("{0}", "{1}") + " FROM DUMMY" + getMachineName(), "Lauper", "", "Lauper");
        DMLOperatorsTests.<String>assertValue(TypeInformation.String, databaseServices, "Concatenate", "SELECT " + databaseServices.getDMLService().getOperators().concatenate("{0}", "{1}") + " FROM DUMMY" + getMachineName(), "", "", "");
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Like operator is correct", TestIssue="610149", Feature="Database Abstraction Layer", CreatedBy="mar")
    public final void testLike(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Like", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().like("NAME", "{0}"), 1, "DaveLauper");
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Like", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().like("NAME", "{0}"), 0, "Dave");
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Like", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().like("NAME", "{0}"), 1, "Dave%");
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Like", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().like("NAME", "{0}"), 0, "Lauper");
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Like", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().like("NAME", "{0}"), 1, "%Lauper");
        DMLOperatorsTests.<Integer>assertValue(TypeInformation.Integer, databaseServices, "Like", "SELECT COUNT(*) FROM PERSON" + getMachineName() + " WHERE " + databaseServices.getDMLService().getOperators().like("NAME", "{0}"), 3, "%");
    }
    
}
