/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package outsystems.javaservertests.databaseprovider.dmlservice;

import java.text.*;
import java.util.*;
import linqbridge.linq.*;
import outsystems.common.*;
import outsystems.hubedition.extensibility.data.*;
import outsystems.hubedition.util.*;
import outsystems.hubedition.util.delegates.*;
import outsystems.runtimecommon.*;
import outsystems.servertests.databaseprovider.framework.*;
import java.math.BigDecimal;
import linqbridge.linq.LinqMethods;
import outsystems.common.CommonConstants;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLFunctions;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLOperators;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.junit.framework.DashboardTestFixture;
import outsystems.junit.framework.IterativeTestCase;
import outsystems.junit.framework.TestDetails;
import outsystems.runtimecommon.FormatInfoLogic;
import outsystems.runtimecommon.ScriptableBuiltInFunction;
import outsystems.servertests.databaseprovider.framework.BaseDatabaseProviderTest;
import outsystems.servertests.databaseprovider.framework.DashboardTest;
import outsystems.servertests.databaseprovider.framework.DatabaseProviderTestCase;



@org.junit.runner.RunWith(outsystems.junit.logic.DashboardTestRunner.class)
@DashboardTestFixture(testKind=DashboardTest.DashboardTestKind)
public class DMLFunctionsTests extends DMLTest {
    public static final TypeInformation<DMLFunctionsTests> TypeInfo = TypeInformation.get(DMLFunctionsTests.class);
    
    private static final String[] DATE_FORMATS = new String[] { "dd/MM/yyyy", "dd-MM-yyyy", "MM-dd-yyyy", "MM/dd/yyyy", CommonConstants.DefaultDateFormat, "yyyy/MM/dd" };
    
    private static final String DEFAULT_TIME_FORMAT = "HH:mm:ss";
    private static final String DEFAULT_DATE_FORMAT = CommonConstants.DefaultDateFormat;
    
    private static final String ERROR_MESSAGE_FORMAT = "Error executing function {0} with parameters: {1}. Executed SQL: {2}";
    
    private static <T> void assertValues(final TypeInformation<T> methodTypeArg_T, IDatabaseServices services, String funcName, String sqlFormat, Iterable<Object> paramsToTest, Func.Func1_Lambda<Object, T> expectedConverter) throws Exception {
        SQLExecutor sqlExecutor = new SQLExecutor(services);
        java.util.Iterator<Object> valueIter = (paramsToTest).iterator();
        try {
            Object value;
            while (valueIter.hasNext()) {
                value = valueIter.next();
                T expected = expectedConverter.execute(value);
                String sql = getSql(sqlFormat, value, sqlExecutor);
                T result = DMLFunctionsTests.<T>executeScalar(methodTypeArg_T, sqlExecutor, sql, value);
                assertEqual(expected, result, StringUtils.format(ERROR_MESSAGE_FORMAT, new Object[] {funcName, getParameterValuesString(value), sql}));
            }
        } finally {
            CollectionUtils.dispose(valueIter);
        }
    }
    
    private static String getSql(String sqlFormat, Object value, final SQLExecutor sqlExecutor) {
        final RefParmHolderInteger i = new RefParmHolderInteger(0);
        return value.getClass().isArray() ? StringUtils.format(sqlFormat, LinqMethods.toArray(TypeInformation.Object, LinqMethods.select(Arrays.asList(((Object[]) value)), (Object o) -> {
    return sqlExecutor.getParameterName(i.valPostIncr(), o.getClass());
}))) : StringUtils.format(sqlFormat, new Object[] {sqlExecutor.getParameterName(i.getVal(), value.getClass())});
    }
    
    private static <T> T executeScalar(final TypeInformation<T> methodTypeArg_T, SQLExecutor sqlExecutor, String sql, Object parameters) throws Exception {
        return (parameters.getClass().isArray() ? sqlExecutor.executeScalar(sql, (Object[]) parameters) : sqlExecutor.executeScalar(sql, parameters)).<T>runtimeValue(methodTypeArg_T);
    }
    
    private static String getParameterValuesString(Object value) {
        return value.getClass().isArray() ? StringUtils.join(", ", LinqMethods.toArray(TypeInformation.String, LinqMethods.select(Arrays.asList(((Object[]) value)), (Object o) -> {
    return o.toString();
}))) : value.toString();
    }
    
    private static <T> T getArgValue(final TypeInformation<T> methodTypeArg_T, Object objArray, int index) {
        return methodTypeArg_T.cast(((Object[]) objArray)[index]);
    }
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Abs function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testAbs(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "Abs",
            "SELECT " + databaseServices.getDMLService().getFunctions().abs("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("-1.44"), new BigDecimal("4.21"), new BigDecimal("0"), new BigDecimal("-2"), new BigDecimal("50") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.abs(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Round function is coherent with the behavior of the built-in function in code, WITHOUT validating the edge cases for mid-points (e.g. 1.5)", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testRound(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "Round",
            "SELECT " + databaseServices.getDMLService().getFunctions().round("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("-2.145453"), new BigDecimal("0"), new BigDecimal("50"), new BigDecimal("3.14") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.round(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=ServerOnlyDMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Sqrt function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testSqrt(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "Sqrt",
            "SELECT " + databaseServices.getDMLService().getFunctions().sqrt("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("0"), new BigDecimal("1"), new BigDecimal("2.25"), new BigDecimal("9") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.sqrt(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Trunc function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTrunc(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "Trunc",
            "SELECT " + databaseServices.getDMLService().getFunctions().trunc("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("0"), new BigDecimal("1"), new BigDecimal("3.14"), new BigDecimal("10.34563434") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.trunc(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Concat function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testConcat(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "Concat",
            "SELECT " + databaseServices.getDMLService().getFunctions().concat("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { "Dave", "Lauper" }, new Object[] { "Out", "Systems" }, new Object[] { "First", "" }, new Object[] { "", "Last" }, new Object[] { "", "" } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.concat(DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 0), DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 1));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Index function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testIndex(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Index",
            "SELECT " + databaseServices.getDMLService().getFunctions().index("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { "Test", "NotFound" }, new Object[] { "MyTest1 MyTest2", "Test" }, new Object[] { "", "NotFound" } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.index(DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 0), DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 1));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Length function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testLength(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Length",
            "SELECT " + databaseServices.getDMLService().getFunctions().length("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "DaveLauper", "Test With Spaces", "" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.length(o.toString());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Replace function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testReplace(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "Replace",
            "SELECT " + databaseServices.getDMLService().getFunctions().replace("{0}", "{1}", "{2}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { "DaveLauper", "NotFound", "" }, new Object[] { "Test1Test2Test3", "Test", "0" }, new Object[] { "Test1Test2Test3", "3", "1" }, new Object[] { "Test1Test2Test3", "Test", "" } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.replace(DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 0), DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 1), DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 2));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Substr function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testSubstr(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "Substr",
            "SELECT " + databaseServices.getDMLService().getFunctions().substr("{0}", "{1}", "{2}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { "DaveLauper", Integer.valueOf(0), Integer.valueOf(4) }, new Object[] { "DaveLauper", Integer.valueOf(4), Integer.valueOf(6) }, new Object[] { "DaveLauper", Integer.valueOf(4), Integer.valueOf(0) }, new Object[] { "DaveLauper", Integer.valueOf(10), Integer.valueOf(0) }, new Object[] { "DaveLauper", Integer.valueOf(0), Integer.valueOf(100) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.substr(DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 0), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 2).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the ToLower function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testToLower(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "ToLower",
            "SELECT " + databaseServices.getDMLService().getFunctions().toLower("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "DaveLauper", "Test With Spaces", "" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.toLower(o.toString());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the ToUpper function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testToUpper(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "ToUpper",
            "SELECT " + databaseServices.getDMLService().getFunctions().toUpper("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "DaveLauper", "Test With Spaces", "" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.toUpper(o.toString());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Trim function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTrim(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "Trim",
            "SELECT " + databaseServices.getDMLService().getFunctions().trim("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.trim(o.toString());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TrimEnd function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTrimEnd(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "TrimEnd",
            "SELECT " + databaseServices.getDMLService().getFunctions().trimEnd("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.trimEnd(o.toString());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TrimStart function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTrimStart(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "TrimStart",
            "SELECT " + databaseServices.getDMLService().getFunctions().trimStart("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "DaveLauper", " LeftSpace", "RightSpace", " BothSpaces ", "" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.trimStart(o.toString());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the AddDays function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testAddDays(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddDays",
            "SELECT " + databaseServices.getDMLService().getFunctions().addDays("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.addDays(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the AddHours function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testAddHours(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddHours",
            "SELECT " + databaseServices.getDMLService().getFunctions().addHours("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.addHours(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the AddMinutes function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testAddMinutes(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddMinutes",
            "SELECT " + databaseServices.getDMLService().getFunctions().addMinutes("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.addMinutes(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the AddMonths function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testAddMonths(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddMonths",
            "SELECT " + databaseServices.getDMLService().getFunctions().addMonths("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) }, new Object[] { new DateTime(2012, 1, 30, 1, 2, 3), Integer.valueOf(1) }, new Object[] { new DateTime(2012, 3, 30, 1, 2, 3), Integer.valueOf(-1) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.addMonths(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the AddSeconds function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testAddSeconds(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddSeconds",
            "SELECT " + databaseServices.getDMLService().getFunctions().addSeconds("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.addSeconds(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the AddYears function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testAddYears(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "AddYears",
            "SELECT " + databaseServices.getDMLService().getFunctions().addYears("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(-15) }, new Object[] { new DateTime(2014, 1, 1, 10, 0, 0), Integer.valueOf(0) }, new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), Integer.valueOf(1) }, new Object[] { new DateTime(2012, 2, 29, 1, 2, 3), Integer.valueOf(1) }, new Object[] { new DateTime(2012, 2, 29, 1, 2, 3), Integer.valueOf(-1) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.addYears(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the BuildDateTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testBuildDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "BuildDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().buildDateTime("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2100, 1, 1), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(1900, 1, 1), new DateTime(1900, 1, 1, 10, 11, 12) }, new Object[] { new DateTime(2100, 1, 1), new DateTime(1900, 1, 1, 10, 11, 12) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.buildDateTime(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 1));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Day function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDay(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Day",
            "SELECT " + databaseServices.getDMLService().getFunctions().day("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.day(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DayOfWeek function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDayOfWeek(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "DayOfWeek",
            "SELECT " + databaseServices.getDMLService().getFunctions().dayOfWeek("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.dayOfWeek(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DiffDays function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDiffDays(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "DiffDays",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffDays("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.diffDays(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 1));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DiffHours function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDiffHours(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "DiffHours",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffHours("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.diffHours(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 1));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DiffMinutes function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDiffMinutes(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "DiffMinutes",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffMinutes("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.diffMinutes(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 1));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DiffSeconds function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDiffSeconds(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "DiffSeconds",
            "SELECT " + databaseServices.getDMLService().getFunctions().diffSeconds("{0}", "{1}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 0, 0, 0) }, new Object[] { new DateTime(2012, 2, 29, 10, 11, 12), new DateTime(2012, 2, 28, 0, 1, 2) }, new Object[] { new DateTime(2012, 2, 28, 0, 1, 2), new DateTime(2012, 2, 29, 10, 11, 12) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.diffSeconds(DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0), DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 1));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Hour function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testHour(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Hour",
            "SELECT " + databaseServices.getDMLService().getFunctions().hour("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.hour(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Minute function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testMinute(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Minute",
            "SELECT " + databaseServices.getDMLService().getFunctions().minute("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.minute(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Month function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testMonth(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Month",
            "SELECT " + databaseServices.getDMLService().getFunctions().month("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.month(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the NewDate function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testNewDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "NewDate",
            "SELECT " + databaseServices.getDMLService().getFunctions().newDate("{0}", "{1}", "{2}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1900), Integer.valueOf(1), Integer.valueOf(1) }, new Object[] { Integer.valueOf(2012), Integer.valueOf(2), Integer.valueOf(29) }, new Object[] { Integer.valueOf(2100), Integer.valueOf(1), Integer.valueOf(31) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.newDate(DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 0).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 2).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the NewDateTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testNewDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "NewDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().newDateTime("{0}", "{1}", "{2}", "{3}", "{4}", "{5}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1900), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) }, new Object[] { Integer.valueOf(2012), Integer.valueOf(2), Integer.valueOf(29), Integer.valueOf(23), Integer.valueOf(59), Integer.valueOf(59) }, new Object[] { Integer.valueOf(2100), Integer.valueOf(1), Integer.valueOf(31), Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.newDateTime(DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 0).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 2).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 3).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 4).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 5).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the NewTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testNewTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "NewTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().newTime("{0}", "{1}", "{2}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new Object[] { Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0) }, new Object[] { Integer.valueOf(23), Integer.valueOf(59), Integer.valueOf(59) }, new Object[] { Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) } }),
            (Object o) -> {
                return ScriptableBuiltInFunction.newTime(DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 0).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue(), DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 2).intValue());
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Second function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testSecond(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Second",
            "SELECT " + databaseServices.getDMLService().getFunctions().second("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.second(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the Year function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testYear(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "Year",
            "SELECT " + databaseServices.getDMLService().getFunctions().year("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.year(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the BooleanToInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testBooleanToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "BooleanToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().booleanToInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.booleanToInteger(BooleanUtils.toBoolean( o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the BooleanToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testBooleanToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "BooleanToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().booleanToText("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.booleanToText(BooleanUtils.toBoolean( o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DateTimeToDate function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDateTimeToDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "DateTimeToDate",
            "SELECT " + databaseServices.getDMLService().getFunctions().dateTimeToDate("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.dateTimeToDate(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DateTimeToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDateTimeToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "DateTimeToText",
                    "SELECT " + databaseServices.getDMLService().getFunctions().dateTimeToText("{0}", dateFormat.getVal()) + " FROM DUMMY" + getMachineName(),
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
                    (Object o) -> {
                        changeDateFormat(dateFormat.getVal());
                        return ScriptableBuiltInFunction.dateTimeToText(ConvertUtils.toDateTime(o));
                    });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DateTimeToTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDateTimeToTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "DateTimeToTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().dateTimeToTime("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(2012, 2, 29, 23, 59, 59), new DateTime(2100, 1, 31, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.dateTimeToTime(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DateToDateTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDateToDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "DateToDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().dateToDateTime("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1), new DateTime(2012, 2, 29), new DateTime(2100, 1, 31) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.dateToDateTime(ConvertUtils.toDateTime(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DateToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDateToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "DateToText",
                    "SELECT " + databaseServices.getDMLService().getFunctions().dateToText("{0}", dateFormat.getVal()) + " FROM DUMMY" + getMachineName(),
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1), new DateTime(2012, 2, 29), new DateTime(2100, 1, 31) }),
                    (Object o) -> {
                        changeDateFormat(dateFormat.getVal());
                        return ScriptableBuiltInFunction.dateToText(ConvertUtils.toDateTime(o));
                    });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DecimalToBoolean function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDecimalToBoolean(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Boolean>assertValues(TypeInformation.Boolean, databaseServices, "DecimalToBoolean",
            "SELECT " + databaseServices.getDMLService().getFunctions().decimalToBoolean("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("-1.44"), new BigDecimal("-1"), new BigDecimal("0"), new BigDecimal("1"), new BigDecimal("50"), new BigDecimal("100.123456") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.decimalToBoolean(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DecimalToInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDecimalToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "DecimalToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().decimalToInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("-1.44"), new BigDecimal("-1"), new BigDecimal("0"), new BigDecimal("1"), new BigDecimal("50"), new BigDecimal("100.123456") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.decimalToInteger(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DecimalToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testDecimalToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "DecimalToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().decimalToText("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("-1.44"), new BigDecimal("-1"), new BigDecimal("0"), new BigDecimal("1"), new BigDecimal("50"), new BigDecimal("100.123456") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.decimalToText(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IdentifierToInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testEntityRefIntegerToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "IdentifierToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().identifierToInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(100), Integer.valueOf(1000) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.identifierToInteger(ConvertUtils.toInt(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IdentifierToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testEntityRefTextToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "IdentifierToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().identifierToText("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "", "abc", "1", GUID.newGuid().toString() }),
            (Object o) -> {
                return ScriptableBuiltInFunction.identifierToText(ConvertUtils.toString(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IntegerToBoolean function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testIntegerToBoolean(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Boolean>assertValues(TypeInformation.Boolean, databaseServices, "IntegerToBoolean",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToBoolean("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(-10), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.integerToBoolean(ConvertUtils.toInt(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IntegerToDecimal function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testIntegerToDecimal(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "IntegerToDecimal",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToDecimal("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(-10), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.integerToDecimal(ConvertUtils.toInt(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the LongIntegerToDecimal function is coherent with the behavior of the Convert.ToDecimal function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="lef")
    public final void testLongIntegerToDecimal(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "LongIntegerToDecimal",
            "SELECT " + databaseServices.getDMLService().getFunctions().longIntegerToDecimal("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Long.valueOf(-1234567890123L), Long.valueOf(-10L), Long.valueOf(-1L), Long.valueOf(0L), Long.valueOf(1L), Long.valueOf(50L), Long.valueOf(1234567890123L) }),
            (Object o) -> {
                return new BigDecimal(ConvertUtils.toLong(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IntegerToIdentifier function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testIntegerToEntityRefInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "IntegerToIdentifier",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToIdentifier("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.integerToIdentifier(ConvertUtils.toInt(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IntegerToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testIntegerToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "IntegerToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().integerToText("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(-10), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(50) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.integerToText(ConvertUtils.toInt(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the NullDate function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testNullDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "NullDate",
            "SELECT " + databaseServices.getDMLService().getFunctions().nullDate() + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[0]),
            (Object o) -> {
                return ScriptableBuiltInFunction.nullDate();
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the NullIdentifier function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testNullIdentifier(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "NullIdentifier",
            "SELECT " + databaseServices.getDMLService().getFunctions().nullIdentifier() + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[0]),
            (Object o) -> {
                return ScriptableBuiltInFunction.nullIdentifier();
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the NullTextIdentifier function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testNullTextIdentifier(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "NullTextIdentifier",
            "SELECT " + databaseServices.getDMLService().getFunctions().nullTextIdentifier() + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[0]),
            (Object o) -> {
                return ScriptableBuiltInFunction.nullTextIdentifier();
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TextToDate function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTextToDate(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "TextToDate",
                    "SELECT " + databaseServices.getDMLService().getFunctions().textToDate("{0}", dateFormat.getVal()) + " FROM DUMMY" + getMachineName(),
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1).toString(dateFormat.getVal()), new DateTime(2012, 2, 29).toString(dateFormat.getVal()), new DateTime(2100, 1, 31).toString(dateFormat.getVal()) }),
                    (Object o) -> {
                        changeDateFormat(dateFormat.getVal());
                        return ScriptableBuiltInFunction.textToDate(ConvertUtils.toString(o));
                    });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TextToDateTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTextToDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            for (String dateFormatIter : DATE_FORMATS) {
                final RefParmHolder<String> dateFormat = new RefParmHolder<String>(dateFormatIter);
                String dateTimeFormat = dateFormat.getVal() + " " + DEFAULT_TIME_FORMAT;
                DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "TextToDateTime",
                    "SELECT " + databaseServices.getDMLService().getFunctions().textToDateTime("{0}", dateFormat.getVal()) + " FROM DUMMY" + getMachineName(),
                    Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0).toString(dateTimeFormat), new DateTime(2012, 2, 29, 23, 59, 59).toString(dateTimeFormat), new DateTime(2100, 1, 31, 10, 11, 12).toString(dateTimeFormat) }),
                    (Object o) -> {
                        changeDateFormat(dateFormat.getVal(), /*isDateTime*/
                        true);
                        return ScriptableBuiltInFunction.textToDateTime(ConvertUtils.toString(o));
                    });
            }
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TextToDecimal function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTextToDecimal(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "TextToDecimal",
            "SELECT " + databaseServices.getDMLService().getFunctions().textToDecimal("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "-1.44", "-1", "0", "1", "50", "100.123456" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.textToDecimal(ConvertUtils.toString(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TextToIdentifier function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTextToEntityRefText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "TextToIdentifier",
            "SELECT " + databaseServices.getDMLService().getFunctions().textToIdentifier("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "", "abc", "1", GUID.newGuid().toString() }),
            (Object o) -> {
                return ScriptableBuiltInFunction.textToIdentifier(ConvertUtils.toString(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TextToInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTextToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "TextToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().textToInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "-10", "-1", "0", "1", "50" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.textToInteger(ConvertUtils.toString(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TextToTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTextToTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String prevDateFormat = getDefaultDateFormat();
        try {
            changeDateFormat(DEFAULT_DATE_FORMAT, /*isDateTime*/
            true);
            DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "TextToTime",
                "SELECT " + databaseServices.getDMLService().getFunctions().textToTime("{0}") + " FROM DUMMY" + getMachineName(),
                Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0).toString(DEFAULT_TIME_FORMAT), new DateTime(2012, 2, 29, 23, 59, 59).toString(DEFAULT_TIME_FORMAT), new DateTime(2100, 1, 31, 10, 11, 12).toString(DEFAULT_TIME_FORMAT) }),
                (Object o) -> {
                    return ScriptableBuiltInFunction.textToTime(ConvertUtils.toString(o));
                });
        } finally{
            changeDateFormat(prevDateFormat);
        }
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TimeToDateTime function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTimeToDateTime(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "TimeToDateTime",
            "SELECT " + databaseServices.getDMLService().getFunctions().timeToDateTime("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 23, 59, 59), new DateTime(1900, 1, 1, 10, 11, 12) }),
            (Object o) -> {
                return ConvertUtils.toDateTime(o);
            });
        // There is no equivalent built-in function, the function exists because of implicit conversions
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TimeToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testTimeToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "TimeToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().timeToText("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new DateTime(1900, 1, 1, 0, 0, 0), new DateTime(1900, 1, 1, 23, 59, 59), new DateTime(1900, 1, 1, 10, 11, 12) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.timeToText(ConvertUtils.toDateTime(o));
            });
        
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the TextToLongInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer, Long Integers Project", CreatedBy="rls")
    public final void testTextToLongInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Long>assertValues(TypeInformation.Long, databaseServices, "TextToLongInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().textToLongInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { "-100000000000000", "-10000", "0", "10000", "100000000000000" }),
            (Object o) -> {
                return ScriptableBuiltInFunction.textToLongInteger(ConvertUtils.toString(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the LongIntegerToText function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer, Long Integers Project", CreatedBy="rls")
    public final void testLongIntegerToText(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "LongIntegerToText",
            "SELECT " + databaseServices.getDMLService().getFunctions().longIntegerToText("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(-100000000), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(100000000) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.longIntegerToText(ConvertUtils.toLong(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the IdentifierToLongInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer, Long Integers Project", CreatedBy="rls")
    public final void testIdentifierToLongInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Long>assertValues(TypeInformation.Long, databaseServices, "IdentifierToLongInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().identifierToLongInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(0), Integer.valueOf(1000000000) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.identifierToLongInteger(ConvertUtils.toLong(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the LongIntegerToIdentifier function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer, Long Integers Project", CreatedBy="rls")
    public final void testLongIntegerToIdentifier(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Long>assertValues(TypeInformation.Long, databaseServices, "LongIntegerToIdentifier",
            "SELECT " + databaseServices.getDMLService().getFunctions().longIntegerToIdentifier("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(0), Integer.valueOf(1000000000) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.longIntegerToIdentifier(ConvertUtils.toLong(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the LongIntegerToInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer, Long Integers Project", CreatedBy="rls")
    public final void testLongIntegerToInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "LongIntegerToInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().longIntegerToInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { Integer.valueOf(-1000000000), Integer.valueOf(-1000), Integer.valueOf(0), Integer.valueOf(1000), Integer.valueOf(1000000000) }),
            (Object o) -> {
                return ScriptableBuiltInFunction.longIntegerToInteger(ConvertUtils.toLong(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the DecimalToLongInteger function is coherent with the behavior of the built-in function in code", TestIssue="610148", Feature="Database Abstraction Layer, Long Integers Project", CreatedBy="rls")
    public final void testDecimalToLongInteger(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        DMLFunctionsTests.<Long>assertValues(TypeInformation.Long, databaseServices, "DecimalToLongInteger",
            "SELECT " + databaseServices.getDMLService().getFunctions().decimalToLongInteger("{0}") + " FROM DUMMY" + getMachineName(),
            Arrays.asList(new Object[] { new BigDecimal("-1.44444444"), new BigDecimal("-1"), new BigDecimal("0"), new BigDecimal("1"), new BigDecimal("50"), new BigDecimal("100.123456789") }),
            (Object o) -> {
                return ScriptableBuiltInFunction.decimalToLongInteger(ConvertUtils.toBigDecimal(o));
            });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the If function is correct for true and false conditions", TestIssue="644181", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testIf(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String trueCondition = databaseServices.getDMLService().getOperators().equal("1", "1");
        String falseCondition = databaseServices.getDMLService().getOperators().lessThen("1", "0");
        String ifTrue = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{0}", "{1}") + " FROM DUMMY" + getMachineName();
        String ifFalse = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{0}", "{1}") + " FROM DUMMY" + getMachineName();
        
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1), Integer.valueOf(0) } }), (Object o) -> {
            return DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 0).intValue();
        });
        DMLFunctionsTests.<Integer>assertValues(TypeInformation.Integer, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { Integer.valueOf(1), Integer.valueOf(0) } }), (Object o) -> {
            return DMLFunctionsTests.<Integer>getArgValue(TypeInformation.Integer, o, 1).intValue();
        });
        
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { new BigDecimal("1.5"), new BigDecimal("0.5") } }), (Object o) -> {
            return DMLFunctionsTests.<BigDecimal>getArgValue(TypeInformation.BigDecimal, o, 0);
        });
        DMLFunctionsTests.<BigDecimal>assertValues(TypeInformation.BigDecimal, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { new BigDecimal("1.5"), new BigDecimal("0.5") } }), (Object o) -> {
            return DMLFunctionsTests.<BigDecimal>getArgValue(TypeInformation.BigDecimal, o, 1);
        });
        
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { new DateTime(2000, 1, 1), new DateTime(1900, 1, 1) } }), (Object o) -> {
            return DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 0);
        });
        DMLFunctionsTests.<DateTime>assertValues(TypeInformation.get(DateTime.class), databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { new DateTime(2000, 1, 1), new DateTime(1900, 1, 1) } }), (Object o) -> {
            return DMLFunctionsTests.<DateTime>getArgValue(TypeInformation.get(DateTime.class), o, 1);
        });
        
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { "trueString", "falseString" } }), (Object o) -> {
            return DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 0);
        });
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { "trueString", "falseString" } }), (Object o) -> {
            return DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 1);
        });
        
        DMLFunctionsTests.<Boolean>assertValues(TypeInformation.Boolean, databaseServices, "If", ifTrue, Arrays.asList(new Object[] { new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) } }), (Object o) -> {
            return DMLFunctionsTests.<Boolean>getArgValue(TypeInformation.Boolean, o, 0).booleanValue();
        });
        DMLFunctionsTests.<Boolean>assertValues(TypeInformation.Boolean, databaseServices, "If", ifFalse, Arrays.asList(new Object[] { new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) } }), (Object o) -> {
            return DMLFunctionsTests.<Boolean>getArgValue(TypeInformation.Boolean, o, 1).booleanValue();
        });
    }
    
    
    @IterativeTestCase(iteratorType=DMLTestsConfiguration.class)
    @TestDetails(Description="Validates that the behavior of the SQL fragment produced by the If function inside another If function is correct for (true, true), (true, false), (false, true) and (false, false) conditions", TestIssue="644181", Feature="Database Abstraction Layer", CreatedBy="rls")
    public final void testIfInsideIf(DatabaseProviderTestCase tc) throws Exception {
        IDatabaseServices databaseServices = tc.getServices();
        String trueCondition = databaseServices.getDMLService().getOperators().equal("1", "1");
        String falseCondition = databaseServices.getDMLService().getOperators().lessThen("1", "0");
        String ifTrueTrue = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(trueCondition,
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{2}", "{3}")) + 
            " FROM DUMMY" + 
            getMachineName();
        
        String ifTrueFalse = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(trueCondition,
            databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{2}", "{3}")) + 
            " FROM DUMMY" + 
            getMachineName();
        
        String ifFalseTrue = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(falseCondition,
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(trueCondition, "{2}", "{3}")) + 
            " FROM DUMMY" + 
            getMachineName();
        
        String ifFalseFalse = "SELECT " + databaseServices.getDMLService().getFunctions().ifElse(falseCondition,
            databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{0}", "{1}"),
            databaseServices.getDMLService().getFunctions().ifElse(falseCondition, "{2}", "{3}")) + 
            " FROM DUMMY" + 
            getMachineName();
        
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "If(true, If(true, A, b), If(true, c, d))", ifTrueTrue, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), (Object o) -> {
            return DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 0);
        });
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "If(true, If(false, a, B), If(true, c, d))", ifTrueFalse, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), (Object o) -> {
            return DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 1);
        });
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "If(false, If(true, a, b), If(true, C, d))", ifFalseTrue, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), (Object o) -> {
            return DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 2);
        });
        DMLFunctionsTests.<String>assertValues(TypeInformation.String, databaseServices, "If(false, If(false, a, b), If(false, c, D))", ifFalseFalse, Arrays.asList(new Object[] { new Object[] { "a", "b", "c", "d" } }), (Object o) -> {
            return DMLFunctionsTests.<String>getArgValue(TypeInformation.String, o, 3);
        });
    }
    
    
    private static String getDefaultDateFormat()
    {
        return FormatInfoLogic.getOutputDateFormatString();
    }
    
    private static void changeDateFormat(String newFormat) {
        changeDateFormat(newFormat, false);
    }
    
    private static void changeDateFormat(String newFormat, boolean isDateTime) {
        DateTimeFormatInfo.setDefaultDateTimeFormat(newFormat + (isDateTime ? DEFAULT_TIME_FORMAT : ""), FormatInfoLogic.getDateTimeRegExp(newFormat));
        FormatInfoLogic.setDefaultDateAndDateTimeFormatString(newFormat, newFormat);
    }
    
}
