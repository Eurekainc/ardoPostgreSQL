/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package ardo.postgresql.configuration;

import ardo.postgresql.DatabaseProvider;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.hubedition.extensibility.data.configurationservice.AdvancedConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.BaseDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.ParameterRegion;
import outsystems.hubedition.extensibility.data.configurationservice.UserDefinedConfigurationParameter;
import outsystems.hubedition.util.TypeInformation;

/**
 *	This class encapsulates a connection string and other configuration information required to connect to a database.
 */
public class DatabaseConfiguration extends BaseDatabaseConfiguration {
    private String _server;
    private String _database;
    private String _username;
    private String _password;
    private AdvancedConfiguration _advancedConfiguration = new AdvancedConfiguration("", "", "");
    public static final TypeInformation<DatabaseConfiguration> TypeInfo = TypeInformation.get(DatabaseConfiguration.class);
    
    /**
	 *	Gets the database provider. It provides information about the database, and access to its services.
	 */
    public IDatabaseProvider getDatabaseProvider() {
        return DatabaseProvider.Instance;
    }
    
    /*
        This annotation defines how the configuration will be displayed in Service Center by using the following properties:
            - Label: Label of the form for this field
            - IsMandatory: Defines if the configuration field is mandatory
            - Order: The order within each region that the field will show up in the configuration form
            - Region: Form segment that groups related configuration fields
                 * DatabaseLocation: First region of the configuration form that defines the database you are going to integrate with.
                                     Common examples of fields in this region are: Server, Port and Schema.
                 * UserSpecific: Second region of the configuration form that defines authentication information required to connect.
                                 Common examples of fields are: Username and password
                 * AdminSpecific: Ignore for integration purposes
                 * Advanced: Ignore for integration purposes
         
        In order to better understand the annotations please compare the code of this sample with the configuration screen of a MySQL database connection
            http://localhost/ServiceCenter/DatabaseConnections_List.aspx
     */
    
    @UserDefinedConfigurationParameter(label="Server", isMandatory=true, order=1, region=ParameterRegion.DatabaseLocation, prompt="Server")
    public final String getServer() {
        return _server;
    }
    
    @UserDefinedConfigurationParameter(label="Server", isMandatory=true, order=1, region=ParameterRegion.DatabaseLocation, prompt="Server")
    public final void setServer(String value) {
        _server = value;
    }

    @UserDefinedConfigurationParameter(label="Database", isMandatory=true, order=2, region=ParameterRegion.DatabaseLocation, prompt="Database")
    public final String getDatabase() {
        return _database;
    }
    
    @UserDefinedConfigurationParameter(label="Database", isMandatory=true, order=2, region=ParameterRegion.DatabaseLocation, prompt="Database")
    public final void setDatabase(String value) {
    	_database = value;
    }
    
    
    @UserDefinedConfigurationParameter(label="Username", isMandatory=true, order=1, region=ParameterRegion.UserSpecific, prompt="Username")
    public final String getUsername() {
        return _username;
    }
    
    @UserDefinedConfigurationParameter(label="Username", isMandatory=true, order=1, region=ParameterRegion.UserSpecific, prompt="Username")
    public final void setUsername(String value) {
        _username = value;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, order=2, region=ParameterRegion.UserSpecific, prompt="Password")
    public final String getPassword() {
        return _password;
    }
    
    @UserDefinedConfigurationParameter(label="Password", isPassword=true, order=2, region=ParameterRegion.UserSpecific, prompt="Password")
    public final void setPassword(String value) {
        _password = value;
    }
    
    /**
	 *	This property represents the database identifier to be used in the configuration.
	 *	@throws	UnsupportedOperationException	
	 */
    public String getDatabaseIdentifier() {
        return _database;
    }
    
    /**
	 *	This property represents the advanced configuration object
	 */
    public AdvancedConfiguration getAdvancedConfiguration() {
        return _advancedConfiguration;
    }
    
    /**
	 *	This property represents the advanced configuration object
	 */
    public void setAdvancedConfiguration(AdvancedConfiguration value) {
        _advancedConfiguration = value;
    }
    
    /**
	 *	Returns a basic connection string with attributes such as username and password.
	 *	@return	
	 */
    protected String assembleBasicConnectionString() {
        return "jdbc:postgresql://" + getServer() + "/" + getDatabase() + "?user=" + getUsername() + "&password=" + getPassword(); 
    }
    
    /**
	 *	Returns an advanced connection string with attributes that might be specific for a particular database.
	 *	@return	
	 */
    protected String assembleAdvancedConnectionString() {
        return "jdbc:postgresql://" + getAdvancedConfiguration().getAdvancedConnectionStringField();
    }
    
    /**
	 *	Gets the runtime database configuration.
	 *	@return	The runtime database configuration.
	 */
    public IRuntimeDatabaseConfiguration getRuntimeDatabaseConfiguration() {
    	RuntimeDatabaseConfiguration config = new RuntimeDatabaseConfiguration();
    	
   		config.setConnectionString(getConnectionString());
   		config.setDatabaseIdentifier(getDatabaseIdentifier());
   		config.setUsername(getUsername());
    	
        return config;
    }
}
