/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package ardo.postgresql;

import ardo.postgresql.dml.DMLService;
import ardo.postgresql.execution.ExecutionService;
import ardo.postgresql.introspection.DatabaseObjectFactory;
import ardo.postgresql.introspection.IntrospectionService;
import ardo.postgresql.transaction.TransactionService;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.databaseobjects.IDatabaseObjectFactory;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLService;
import outsystems.hubedition.extensibility.data.executionservice.IExecutionService;
import outsystems.hubedition.extensibility.data.introspectionservice.IIntrospectionService;
import outsystems.hubedition.extensibility.data.transactionservice.ITransactionService;
import outsystems.hubedition.util.TypeInformation;

/**
 *	Represents the set of services that needs to be implemented to add support for a new database.
 */
public class DatabaseServices implements IDatabaseServices {
    public static final TypeInformation<DatabaseServices> TypeInfo = TypeInformation.get(DatabaseServices.class);
    
    private IRuntimeDatabaseConfiguration _configuration;
    private IDatabaseObjectFactory _objectFactory;
    private ITransactionService _transactionService;
    private IExecutionService _executionService;
    private IDMLService _dmlService;
    private IIntrospectionService _introspectionService;
    
    /**
	 *	Initializes a new instance of the DatabaseServices class.
	 *	@param	databaseConfiguration	The database configuration.
	 */
    public DatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration){
        _configuration = databaseConfiguration;
        _objectFactory = new DatabaseObjectFactory(this);
        _transactionService = new TransactionService(this);
        _executionService = new ExecutionService(this);
        _dmlService = new DMLService(this);
        _introspectionService = new IntrospectionService(this);
    }
    
    /**
	 *	Returns a factory capable of creating database information objects from qualified names. If required, this object might access the database.
	 */
    public final IDatabaseObjectFactory getObjectFactory() {
        return _objectFactory;
    }
    
    /**
	 *	Gets the T:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionServiceobject associated with a database. Represents a specific database connection or transaction.
	 */
    public final ITransactionService getTransactionService() {
        return _transactionService;
    }
    
    /**
	 *	Gets the T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService associated with the database. Represents an execution context to run SQL commands on a database.
	 */
    public final IExecutionService getExecutionService() {
        return _executionService;
    }
    
    /**
	 *	Gets the T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLServiceobject associated with the database. Represents a service that generates SQL statements.
	 */
    public final IDMLService getDMLService() {
        return _dmlService;
    }
    
    /**
	 *	Gets the IIntrospectionServiceobject associated with the database. Represents a service that provides information about meta-data of the database.
	 */
    public final IIntrospectionService getIntrospectionService() {
        return _introspectionService;
    }
    
    /**
	 *	Gets the T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfigurationobject associated with a database. It encapsulates the necessary information to connect to a database instance.
	 */
    public final IRuntimeDatabaseConfiguration getDatabaseConfiguration() {
        return _configuration;
    }
}
