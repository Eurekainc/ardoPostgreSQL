/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package ardo.postgresql.dml;

import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;
import outsystems.hubedition.extensibility.data.dmlservice.BaseDMLService;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLAggregateFunctions;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLDefaultValues;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLEntityActions;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLFunctions;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLIdentifiers;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLOperators;
import outsystems.hubedition.extensibility.data.dmlservice.IDMLQueries;
import outsystems.hubedition.util.TypeInformation;

/**
 *	Defines a contract for generating SQL fragments to interact with a database.
 */
public class DMLService extends BaseDMLService {
    public static final TypeInformation<DMLService> TypeInfo = TypeInformation.get(DMLService.class);
    
    private IDMLQueries _queries;
    private IDMLIdentifiers _identifiers;
    private IDMLOperators _operators;
    private IDMLFunctions _functions;
    private IDMLAggregateFunctions _aggregateFunctions;
    private IDMLDefaultValues _defaultValues;
    
    /**
	 *	Initializes a new instance of the DMLService class.
	 *	@param	databaseServices	The database services.
	 */
    public DMLService(IDatabaseServices databaseServices){
        super(databaseServices);
        _queries = new DMLQueries(this);
        _identifiers = new DMLIdentifiers(this);
        _operators = new DMLOperators(this);
        _functions = new DMLFunctions(this);
        _aggregateFunctions = new DMLAggregateFunctions(this);
        _defaultValues = new DMLDefaultValues(this);
    }
    
    /**
	 *	Gets an object that generates the SQL fragments required to perform entity actions.
	 *	@param	tableSourceInfo	Information about the entity's underlying table source
	 *	@return	
	 */
    public IDMLEntityActions getEntityActions(ITableSourceInfo tableSourceInfo) {
        return new DMLEntityActions(this, tableSourceInfo);
    }
    
    /**
	 *	Gets an object that generates the SQL fragments required to perform specific queries (e.g. count query).
	 */
    public IDMLQueries getQueries() {
        return _queries;
    }
    
    /**
	 *	Gets an object that generates and manipulates SQL identifiers.
	 */
    public IDMLIdentifiers getIdentifiers() {
        return _identifiers;
    }
    
    /**
	 *	Gets an object that generates the SQL operators required to execute simple queries.
	 */
    public IDMLOperators getOperators() {
        return _operators;
    }
    
    /**
	 *	Gets an object that generates the SQL functions required to execute simple queries
	 */
    public IDMLFunctions getFunctions() {
        return _functions;
    }
    
    /**
	 *	Gets an object that generates the SQL aggregate functions required to execute simple queries
	 */
    public IDMLAggregateFunctions getAggregateFunctions() {
        return _aggregateFunctions;
    }
    
    /**
	 *	Gets an object that generates the SQL default values for each database type.
	 */
    public IDMLDefaultValues getDefaultValues() {
        return _defaultValues;
    }
}
