/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package ardo.postgresql;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Types;

import oracle.ucp.jdbc.PoolDataSource;
import oracle.ucp.jdbc.PoolDataSourceFactory;
import ardo.postgresql.configuration.DatabaseConfiguration;
import ardo.postgresql.configuration.RuntimeDatabaseConfiguration;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOCommand;
import outsystems.hubedition.databaseabstractionlayer.adoadapters.ADOParameter;
import outsystems.hubedition.extensibility.data.BaseDatabaseProvider;
import outsystems.hubedition.extensibility.data.IDatabaseProvider;
import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.IProviderProperties;
import outsystems.hubedition.extensibility.data.configurationservice.IIntegrationDatabaseConfiguration;
import outsystems.hubedition.extensibility.data.configurationservice.IRuntimeDatabaseConfiguration;
import outsystems.hubedition.util.OSResultSet;
import outsystems.hubedition.util.TypeInformation;
import outsystems.runtimecommon.DatabaseProviderKey;

/**
 *	Represents a database management system.
 */
public class DatabaseProvider extends BaseDatabaseProvider {
    public static final TypeInformation<DatabaseProvider> TypeInfo = TypeInformation.get(DatabaseProvider.class);
    
    public static final IDatabaseProvider Instance = new DatabaseProvider();
    
    /**
	 *	Returns the services provided by the DBMS.
	 *	@param	databaseConfiguration	The database configuration.
	 */
    public IDatabaseServices getIntegrationDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration) {
        return new DatabaseServices(databaseConfiguration);
    }
    
    /**
	 *	Returns a unique identifier of the database provider, used to identify it as a plugin
	 */
    public DatabaseProviderKey getKey() {
    	return DatabaseProviderKey.deserialize("ardoPGSQL");
    }
    
    /**
	 *	Gets the T:OutSystems.HubEdition.Extensibility.Data.IProviderProperties instance associated with this database provider.
	 *	@return	The provider properties.
	 */
    public IProviderProperties getProperties() {
        return new ProviderProperties(this);
    }
    
    /**
	 *	Returns an empty T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration.
	 *	@return	
	 */
    public IIntegrationDatabaseConfiguration createEmptyIntegrationDatabaseConfiguration() {
        return new DatabaseConfiguration();
    }
    
    public static void main(String[] args) throws Exception {
    	
    	DatabaseConfiguration dbconfig = new DatabaseConfiguration();
    	dbconfig.setServer("minilinux.lan");
    	dbconfig.setUsername("ostests");
    	dbconfig.setPassword("tests");
    	dbconfig.setDatabase("ostests");
    	
    	RuntimeDatabaseConfiguration runtimeConfig = (RuntimeDatabaseConfiguration)dbconfig.getRuntimeDatabaseConfiguration();
    	
		IDatabaseServices services = DatabaseProvider.Instance.getIntegrationDatabaseServices(runtimeConfig);
		
		System.out.println(runtimeConfig.getConnectionString());
    			
		Connection conn = services.getTransactionService().createConnection();
		
		Statement st = conn.createStatement();
		
		ResultSet set = st.executeQuery("SELECT 1+1 as result");
		
		while(set.next()) {
			System.out.println(set.getInt("result"));
		}
		
		set.close();
		st.close();
		
	    
    	conn.close();

		
	}
    
}
