/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package ardo.postgresql.transaction;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.transactionservice.BaseTransactionService;
import outsystems.hubedition.util.TypeInformation;

/**
 *	Database service that handles connection and transaction management to a access a database.
 */
public class TransactionService extends BaseTransactionService {
    public static final TypeInformation<TransactionService> TypeInfo = TypeInformation.get(TransactionService.class);
    
    /**
	 *	Initializes a new instance of the TransactionService class.
	 *	@param	databaseServices	The database services to be used by this service.
	 */
    public TransactionService(IDatabaseServices databaseServices){
        super(databaseServices);
    }
    
    /**
	 *	Gets the isolation level to be used in the transactions.
	 */
    protected int getIsolationLevel() {
        return Connection.TRANSACTION_READ_COMMITTED;
    }
    
    /**
	 *	Releases all connections in the pool.
	 */
    protected void releaseAllPooledConnections() {
        
    }
    
    /*
    protected Connection getConnectionFromDriver() throws SQLException {
    	return DriverManager.getConnection(getDatabaseServices().getDatabaseConfiguration().getConnectionString());
    }
    */
    
    /**
	 *	Checks if a separate connection is needed to connect to another catalog.
	 */
    public boolean isNeedsSeparateAdminConnection() {
        return false;
    }

	@Override
	public String getDriverConnectionFactoryClassName() {
		// is this the one we want, or could it be the simple since we're deferring pooling to the Platform?
		return "org.postgresql.Driver";
	}
	
}
