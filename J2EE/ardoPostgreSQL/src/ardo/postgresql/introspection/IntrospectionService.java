/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

package ardo.postgresql.introspection;

import java.sql.SQLException;

import outsystems.hubedition.extensibility.data.IDatabaseServices;
import outsystems.hubedition.extensibility.data.databaseobjects.IDatabaseInfo;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceColumnInfo;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceForeignKeyInfo;
import outsystems.hubedition.extensibility.data.databaseobjects.ITableSourceInfo;
import outsystems.hubedition.extensibility.data.introspectionservice.BaseIntrospectionService;
import outsystems.hubedition.extensibility.data.introspectionservice.IsTableSourceToIgnore;
import outsystems.hubedition.util.TypeInformation;

/**
 *	Inspects a database server to retrieve information about its data model.
 */
public class IntrospectionService extends BaseIntrospectionService {
    public static final TypeInformation<IntrospectionService> TypeInfo = TypeInformation.get(IntrospectionService.class);
    
    /**
	 *	Initializes a new instance of the IntrospectionService class.
	 *	@param	databaseServices	The database services.
	 */
    public IntrospectionService(IDatabaseServices databaseServices){
        super(databaseServices);
    }
    
    /**
	 *	Returns the list of databases that can be accessed from the current configuration. A database is a logical group of data objects (e.g. tables, views) that the plugin maps to a db-specific concept (e.g. SQL Server catalog or Oracle schema).
	 *	@return	List of available databases in the given server
	 *	@throws	SQLException	if an error occurs while accessing the database
	 */
    public Iterable<IDatabaseInfo> listDatabases() {
        throw new UnsupportedOperationException();
    }
    
    /**
	 *	Returns a list of table sources (e.g. tables, views) that belong to a given database.  The returned table sources must have different display names.
	 *	@param	database	Database from which we want to fetch the list of tables
	 *	@param	isTableSourceToIgnore	The delegate to call to see if the table source should be ignored and excluded from the returned list
	 *	@return	List of available table sources in the given database
	 *	@throws	SQLException	if an error occurs while accessing the database
	 */
    public Iterable<ITableSourceInfo> listTableSources(IDatabaseInfo database, IsTableSourceToIgnore isTableSourceToIgnore) {
        throw new UnsupportedOperationException();
    }
    
    /**
	 *	Returns the list of foreign keys of the table source (e.g. table, view)
	 *	@param	tableSource	Table source from which we want to fetch the list of foreign keys
	 *	@return	The list of foreign keys of the table
	 *	@throws	SQLException	if an error occurs while accessing the database
	 */
    public Iterable<ITableSourceForeignKeyInfo> getTableSourceForeignKeys(ITableSourceInfo tableSource) {
        throw new UnsupportedOperationException();
    }
    
    /**
	 *	Returns the list of columns of the table source (e.g. table, view)
	 *	@param	tableSource	Table source from which we want to fetch the list of columns
	 *	@return	The columns of the table
	 *	@throws	SQLException	if an error occurs while accessing the database
	 */
    public Iterable<ITableSourceColumnInfo> getTableSourceColumns(ITableSourceInfo tableSource) {
        throw new UnsupportedOperationException();
    }
}
