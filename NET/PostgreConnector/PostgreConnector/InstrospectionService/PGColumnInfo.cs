using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OutSystems.HubEdition.Extensibility.Data.IntrospectionService;
using System.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;

namespace ardo.DatabaseProvider.PostgreSQL.InstrospectionService
{
    public class PGColumnInfo : ITableSourceColumnInfo
    {
        // perhaps the input should be a better typed object than IDataReader
        public PGColumnInfo(ITableSourceInfo table, IDataReader reader)
        {
            TableSource = table;
            Name = (string)reader["column_name"];
            IsMandatory = "NO".Equals(((string)reader["is_nullable"]).ToUpper());
            string column_default = reader["column_default"] == DBNull.Value?null:(string)reader["column_default"];
            IsAutoGenerated = !string.IsNullOrEmpty(column_default) && column_default.ToLower().StartsWith("nextval(") ;
            

            string data_type = (string)reader["data_type"];
            int maxLength = reader["character_maximum_length"] == DBNull.Value ? -1 : (int)reader["character_maximum_length"];
            int precision = reader["numeric_precision"] == DBNull.Value ? -1 : (int)reader["numeric_precision"];
            int precision_radix = reader["numeric_precision_radix"] == DBNull.Value ? -1 : (int)reader["numeric_precision_radix"];
            int numeric_scale = reader["numeric_scale"] == DBNull.Value ? -1 : (int)reader["numeric_scale"];

            DataType = new PGDataInfo(data_type, maxLength, precision, precision_radix, numeric_scale);

            IsPrimaryKey = 
                reader["constraint_type"] != DBNull.Value && 
                "PRIMARY KEY".Equals(((string)reader["constraint_type"]).ToUpper());

            // correct potential inconsistencies

            if (IsPrimaryKey && !(DataType.Type == DBDataType.INTEGER || DataType.Type == DBDataType.TEXT))
                // only integer and text are valid primary keys
                IsPrimaryKey = false;

            if (IsPrimaryKey && !IsMandatory)
                // primary key must be mandatory
                IsMandatory = true;

            if (IsAutoGenerated && !(DataType.Type == DBDataType.INTEGER))
                // only integers can be auto-number
                IsAutoGenerated = false;

        }

        public IDataTypeInfo DataType
        {
            get;
            private set;
        }

        public bool IsAutoGenerated
        {
            get;
            private set;
        }

        public bool IsMandatory
        {
            get;
            private set;
        }

        public bool IsPrimaryKey
        {
            get;
            private set;
        }

        public string Name
        {
            get;
            private set;
        }

        public ITableSourceInfo TableSource
        {
            get;
            private set;
        }
    }
}
