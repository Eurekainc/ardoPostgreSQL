/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.Platform;

namespace OutSystems.ServerTests.DatabaseProvider.Framework {
    public abstract class BaseAgnosticDatabaseProviderTestConfiguration<TDatabaseProvider, TDatabaseProviderTestCase>
            : BaseDatabaseProviderTestConfiguration<TDatabaseProvider, TDatabaseProviderTestCase> 
                where TDatabaseProvider: IDatabaseProvider where TDatabaseProviderTestCase: IDatabaseProviderTestCase<TDatabaseProvider>, new() {

        // Plugins are loaded relative to AppBase so that they work on the developer machine and on regressions
        private static readonly DatabasePluginProvider<TDatabaseProvider> pluginProvider =
            new DatabasePluginProvider<TDatabaseProvider>(
                new DirectoryInfo(Path.Combine(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "plugins"), "database")));

        protected override IEnumerable<TDatabaseProvider> ProvidersToTest {
            get { 
                return pluginProvider.Implementations;
            }
        }

    }

    public abstract class AgnosticDatabaseProviderTestConfiguration
        : BaseAgnosticDatabaseProviderTestConfiguration<IDatabaseProvider, DatabaseProviderTestCase> {}

    public abstract class PlatformAgnosticDatabaseProviderTestConfiguration
        : BaseAgnosticDatabaseProviderTestConfiguration<IPlatformDatabaseProvider, PlatformDatabaseProviderTestCase> {}
}
