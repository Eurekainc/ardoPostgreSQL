/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;

namespace OutSystems.HubEdition.Extensibility.Data.DMLService {

    /// <summary>
    /// Defines a contract for generating SQL fragments to interact with a database.
    /// </summary>
    public interface IDMLService {

        /// <summary>
        /// Gets the <see cref="IDatabaseServices"/> instance associated with this service.
        /// </summary>
        IDatabaseServices DatabaseServices { get; }

        /// <summary>
        /// Gets an object that generates the SQL fragments required to perform specific queries (e.g. count query).
        /// </summary>
        IDMLQueries Queries { get; }

        /// <summary>
        /// Gets an object that generates the SQL fragments required to perform entity actions.
        /// </summary>
        /// <param name="tableSourceInfo">Information about the entity's underlying table source</param>
        IDMLEntityActions GetEntityActions(ITableSourceInfo tableSourceInfo);
        
        /// <summary>
        /// Gets an object that generates and manipulates SQL identifiers.
        /// </summary>
        IDMLIdentifiers Identifiers { get; }

        /// <summary>
        /// Gets an object that generates the SQL operators required to execute simple queries.
        /// </summary>
        IDMLOperators Operators { get; }

        /// <summary>
        /// Gets an object that generates the SQL functions required to execute simple queries
        /// </summary>
        IDMLFunctions Functions { get; }

        /// <summary>
        /// Gets an object that generates the SQL aggregate functions required to execute DataSet queries
        /// </summary>
        IDMLAggregateFunctions AggregateFunctions { get; }

        /// <summary>
        /// Gets an object that generates the SQL default values for each database type.
        /// </summary>
        IDMLDefaultValues DefaultValues { get; }

        /// <summary>
        /// Gets an object that defines a set of fragments (e.g. keywords, operators) of the database-specific dialect 
        /// that can be used to provide syntax highlighting in SQL statements
        /// </summary>
        IDMLSyntaxHighlightDefinitions SyntaxHighlightDefinitions { get;}

        /// <summary>
        /// Returns an SQL expression that transforms a value of a specified type, so that it can be used in a query condition.
        /// </summary>
        /// <param name="value">DML expression that evaluates to a specific type.</param>
        /// <param name="type">Database type of the literal.</param>
        /// <returns>DML expression that transforms the value.</returns>
        string TransformDatabaseValue(string value, DBDataType type);

        /// <summary>
        /// Escapes special characters in a text value to be used in SQL statements (e.g replace ' by '').
        /// </summary>
        /// <param name="text">text value to be escaped</param>
        /// <returns>The escaped text</returns>
        string EscapeTextValue(string text);
    }
}
