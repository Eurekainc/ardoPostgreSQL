/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.IntrospectionService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService {
    
    /// <summary>
    /// Inspects a database server to retrieve information about its data model.
    /// </summary>
    public interface IPlatformIntrospectionService : IIntrospectionService {

        new IPlatformDatabaseServices DatabaseServices { get; }
        
        /// <summary>
        /// Returns the list of columns of the table source (e.g. table, view)
        /// </summary>
        /// <param name="tableSource">Table source from which we want to fetch the list of columns</param>        
        /// <returns>The columns of the table</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        IEnumerable<IPlatformTableSourceColumnInfo> GetPlatformTableSourceColumns(ITableSourceInfo tableSource);
        
        /// <summary>
        /// Returns detailed information about database table sources (e.g. foreign keys, indexes)
        /// </summary>
        /// <param name="tables">Table sources from which we want to fetch the details</param>
        /// <returns>Table sources information along with the details</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> GetTableSourcesDetails(params ITableSourceInfo[] tables);

        /// <summary>
        /// Checks if the table sources exist in the database.
        /// </summary>
        /// <param name="tableSourcesNames">Table sources names which we want to check</param>
        /// <returns>Table sources names along with a boolean value indicating if the table source exists or not in the database</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        IDictionary<string, bool> CheckTableSourcesExist(params string[] tableSourcesNames);
    }
}
